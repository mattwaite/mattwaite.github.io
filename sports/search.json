[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Sports Data Analysis and Visualization",
    "section": "",
    "text": "The 2018 season started out disastrously for the Nebraska Cornhuskers. The first game against a probably overmatched opponent? Called on account of an epic thunderstorm that plowed right over Memorial Stadium. The next game? Loss. The one following? Loss. The next four? All losses, after the fanbase was whipped into a hopeful frenzy by the hiring of Scott Frost, national title winning quarterback turned hot young coach come back home to save a mythical football program from the mediocrity it found itself mired in.\nAll that excitement lay in tatters.\nOn sports talk radio, on the sports pages and across social media and cafe conversations, one topic kept coming up again and again to explain why the team was struggling: Penalties. The team was just committing too many of them. In fact, six games and no wins into the season, they were dead last in the FBS penalty yards.\nWorse yet for this line of reasoning? Nebraska won game 7, against Minnesota, committing only six penalties for 43 yards, just about half their average over the season. Then they won game 8 against FCS patsy Bethune Cookman, committing only five penalties for 35 yards. That’s a whopping 75 yards less than when they were losing. See? Cut the penalties, win games screamed the radio show callers.\nThe problem? It’s not true. Penalties might matter for a single drive. They may even throw a single game. But if you look at every top-level college football team since 2009, the number of penalty yards the team racks up means absolutely nothing to the total number of points they score. There’s no relationship between them. Penalty yards have no discernible influence on points beyond just random noise.\nPut this another way: If you were Scott Frost, and a major college football program was paying you $5 million a year to make your team better, what should you focus on in practice? If you had growled at some press conference that you’re going to work on penalties in practice until your team stops committing them, the results you’d get from all that wasted practice time would be impossible to separate from just random chance. You very well may reduce your penalty yards and still lose.\nHow do I know this? Simple statistics.\nThat’s one of the three pillars of this book: Simple stats. The three pillars are:\n\nSimple, easy to understand statistics …\n… extracted using simple code …\n… visualized simply to reveal new and interesting things in sports.\n\nDo you need to be a math whiz to read this book? No. I’m not one either. What we’re going to look at is pretty basic, but that’s also why it’s so powerful.\nDo you need to be a computer science major to write code? Nope. I’m not one of those either. But anyone can think logically, and write simple code that is repeatable and replicable.\nDo you need to be an artist to create compelling visuals? I think you see where this is going. No. I can barely draw stick figures, but I’ve been paid to make graphics in my career. With a little graphic design know how, you can create publication worthy graphics with code.\n\n\nThis book is all in the R statistical language. To follow along, you’ll do the following:\n\nInstall the R language on your computer. Go to the R Project website, click download R and select a mirror closest to your location. Then download the version for your computer.\nInstall R Studio Desktop. The free version is great.\n\nGoing forward, you’ll see passages like this:\n\ninstall.packages(\"tidyverse\")\n\nDon’t do it now, but that is code that you’ll need to run in your R Studio. When you see that, you’ll know what to do.\n\n\n\nThis book is the collection of class materials for the author’s Sports Data Analysis and Visualization class at the University of Nebraska-Lincoln’s College of Journalism and Mass Communications. There’s some things you should know about it:\n\nIt is free for students.\nThe topics will remain the same but the text is going to be constantly tinkered with.\nWhat is the work of the author is copyright Matt Waite 2019.\nThe text is Attribution-NonCommercial-ShareAlike 4.0 International Creative Commons licensed. That means you can share it and change it, but only if you share your changes with the same license and it cannot be used for commercial purposes. I’m not making money on this so you can’t either.\nAs such, the whole book – authored in Quarto – is open sourced on Github. Pull requests welcomed!"
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "2  The very basics",
    "section": "",
    "text": "R is a programming language, one specifically geared toward statistical analysis. Like all programming languages, it has certain built-in functions and you can interact with it in multiple ways. The first, and most basic, is the console.\nThink of the console like talking directly to R. It’s direct, but it has some drawbacks and some quirks we’ll get into later. For now, try typing this into the console and hit enter:\nCongrats, you’ve run some code. It’s not very complex, and you knew the answer before hand, but you get the idea. We can compute things. We can also store things. In programming languages, these are called variables. We can assign things to variables using <-. And then we can do things with them. The <- is a called an assignment operator.\nNow assign a different number to the variable number. Try running number * number again. Get what you expected?\nWe can have as many variables as we can name. We can even reuse them (but be careful you know you’re doing that or you’ll introduce errors). Try this in your console.\nWe can store anything in a variable. A whole table. An array of numbers. Every college basketball game played in the last 10 years. A single word. A whole book. All the books of the 18th century. They’re really powerful. We’ll explore them at length."
  },
  {
    "objectID": "intro.html#adding-libraries-part-1",
    "href": "intro.html#adding-libraries-part-1",
    "title": "2  The very basics",
    "section": "2.1 Adding libraries, part 1",
    "text": "2.1 Adding libraries, part 1\nThe real strength of any given programming language is the external libraries that power it. The base language can do a lot, but it’s the external libraries that solve many specific problems – even making the base language easier to use.\nFor this class, we’re going to need several external libraries.\nThe first library we’re going to use is called Swirl. So in the console, type install.packages('swirl') and hit enter. That installs swirl.\nNow, to use the library, type library(swirl) and hit enter. That loads swirl. Then type swirl() and hit enter. Now you’re running swirl. Follow the directions on the screen. When you are asked, you want to install course 1 R Programming: The basics of programming in R. Then, when asked, you want to do option 1, R Programming, in that course.\nWhen you are finished with the course – it will take just a few minutes – it will first ask you if you want credit on Coursera. You do not. Then type 0 to exit (it will not be very clear that’s what you do when you are done)."
  },
  {
    "objectID": "intro.html#adding-libraries-part-2",
    "href": "intro.html#adding-libraries-part-2",
    "title": "2  The very basics",
    "section": "2.2 Adding libraries, part 2",
    "text": "2.2 Adding libraries, part 2\nWe’ll mostly use two libraries for analysis – dplyr and ggplot2. To get them, and several other useful libraries, we can install a single collection of libraries called the tidyverse. Type this into your console: install.packages('tidyverse')\nNOTE: This is a pattern. You should always install libraries in the console.\nThen, to help us with learning and replication, we’re going to use R Notebooks. So we need to install that library. Type this into your console: install.packages('rmarkdown')"
  },
  {
    "objectID": "intro.html#notebooks",
    "href": "intro.html#notebooks",
    "title": "2  The very basics",
    "section": "2.3 Notebooks",
    "text": "2.3 Notebooks\nFor the rest of the class, we’re going to be working in notebooks. In notebooks, you will both run your code and explain each step, much as I am doing here.\nTo start a notebook, you click on the green plus in the top left corner and go down to R Notebook. Do that now.\n\n\n\n\n\nYou will see that the notebook adds a lot of text for you. It tells you how to work in notebooks – and you should read it. The most important parts are these:\nTo add text, simply type. To add code you can click on the Insert button on the toolbar or by pressing Cmd+Option+I on Mac or Ctl+Alt+I on Windows.\nHighlight all that text and delete it. You should have a blank document. This document is called a R Markdown file – it’s a special form of text, one that you can style, and one you can include R in the middle of it. Markdown is a simple markup format that you can use to create documents. So first things first, let’s give our notebook a big headline. Add this:\n# My awesome notebook\nNow, under that, without any markup, just type This is my awesome notebook.\nUnder that, you can make text bold by writing It is **really** awesome.\nIf you want it italics, just do this on the next line: No, it's _really_ awesome. I swear.\nTo see what it looks like without the markup, click the Preview or Knit button in the toolbar. That will turn your notebook into a webpage, with the formatting included.\nThroughout this book, we’re going to use this markdown to explain what we are doing and, more importantly, why we are doing it. Explaining your thinking is a vital part of understanding what you are doing.\nThat explaination, plus the code, is the real power of notebooks. To add a block of code, follow the instructions from above: click on the Insert button on the toolbar or by pressing Cmd+Option+I on Mac or Ctl+Alt+I on Windows.\nIn that window, use some of the code from above and add two numbers together. To see it run, click the green triangle on the right. That runs the chunk. You should see the answer to your addition problem.\nAnd that, just that, is the foundation you need to start this book."
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "3  Data, structures and types",
    "section": "",
    "text": "Data are everywhere (and data is plural of datum, thus the use of are in that statement). It surrounds you. Every time you use your phone, you are creating data. Lots of it. Your online life. Any time you buy something. It’s everywhere. Sports, like life, is no different. Sports is drowning in data, and more comes along all the time.\nIn sports, and in this class, we’ll be dealing largely with two kinds of data: event level data and summary data. It’s not hard to envision event level data in sports. A pitch in baseball. A hit. A play in football. A pass in soccer. They are the events that make up the game. Combine them together – summarize them – and you’ll have some notion of how the game went. What we usually see is summary data – who wants to scroll through 50 pitches to find out a player went 2-3 with a double and an RBI? Who wants to scroll through hundreds of pitches to figure out the Rays beat the Yankees?\nTo start with, we need to understand the shape of data."
  },
  {
    "objectID": "data.html#rows-and-columns",
    "href": "data.html#rows-and-columns",
    "title": "3  Data, structures and types",
    "section": "3.1 Rows and columns",
    "text": "3.1 Rows and columns\nData, oversimplifying it a bit, is information organized. Generally speaking, it’s organized into rows and columns. Rows, generally, are individual elements. A team. A player. A game. Columns, generally, are components of the data, sometimes called variables. So if each row is a player, the first column might be their name. The second is their position. The third is their batting average. And so on.\n\n\n\n\n\nOne of the critical components of data analysis, especially for beginners, is having a mental picture of your data. What does each row mean? What does each column in each row signify? How many rows do you have? How many columns?"
  },
  {
    "objectID": "data.html#types",
    "href": "data.html#types",
    "title": "3  Data, structures and types",
    "section": "3.2 Types",
    "text": "3.2 Types\nThere are scores of data types in the world, and R has them. In this class, we’re primarily going to be dealing with data frames, and each element of our data frames will have a data type.\nTypically, they’ll be one of four types of data:\n\nNumeric: a number, like the number of touchdown passes in a season or a batting average.\nCharacter: Text, like a name, a team, a conference.\nDate: Fully formed dates – 2019-01-01 – have a special date type. Elements of a date, like a year (ex. 2019) are not technically dates, so they’ll appear as numeric data types.\nLogical: Rare, but every now and then we’ll have a data type that’s Yes or No, True or False, etc.\n\nQuestion: Is a zip code a number? Is a jersey number a number? Trick question, because the answer is no. Numbers are things we do math on. If the thing you want is not something you’re going to do math on – can you add two phone numbers together? – then make it a character type. If you don’t, most every software system on the planet will drop leading zeros. For example, every zip code in Boston starts with 0. If you record that as a number, your zip code will become a four digit number, which isn’t a zip code anymore."
  },
  {
    "objectID": "data.html#a-simple-way-to-get-data",
    "href": "data.html#a-simple-way-to-get-data",
    "title": "3  Data, structures and types",
    "section": "3.3 A simple way to get data",
    "text": "3.3 A simple way to get data\nOne good thing about sports is that there’s lots of interest in it. And that means there’s outlets that put sports data on the internet. Now I’m going to show you a trick to getting it easily.\nThe site sports-reference.com takes NCAA (and other league) stats and puts them online. For instance, here’s their page on Nebraska basketball’s game logs, which you should open now.\nNow, in a new tab, log into Google Docs/Drive and open a new spreadsheet. In the first cell of the first row, copy and paste this formula in:\n=IMPORTHTML(\"https://www.sports-reference.com/cbb/schools/nebraska/2019-gamelogs.html\", \"table\", 1)\nIf it worked right, you’ve got the data from that page in a spreadsheet."
  },
  {
    "objectID": "data.html#cleaning-the-data",
    "href": "data.html#cleaning-the-data",
    "title": "3  Data, structures and types",
    "section": "3.4 Cleaning the data",
    "text": "3.4 Cleaning the data\nThe first thing we need to do is recognize that we don’t have data, really. We have the results of a formula. You can tell by putting your cursor on that field, where you’ll see the formula again. This is where you’d look:\n\n\n\n\n\nThe solution is easy:\nEdit > Select All or type command/control A Edit > Copy or type command/control c Edit > Paste Special > Values Only or type command/control shift v\nYou can verify that it worked by looking in that same row 1 column A, where you’ll see the formula is gone.\n\n\n\n\n\nNow you have data, but your headers are all wrong. You want your headers to be one line – not two, like they have. And the header names repeat – first for our team, then for theirs. So you have to change each header name to be UsORB or TeamORB and OpponentORB instead of just ORB.\nAfter you’ve done that, note we have repeating headers. There’s two ways to deal with that – you could just hightlight it and go up to Edit > Delete Rows XX-XX depending on what rows you highlighted. That’s the easy way with our data.\nBut what if you had hundreds of repeating headers like that? Deleting them would take a long time.\nYou can use sorting to get rid of anything that’s not data. So click on Data > Sort Range. You’ll want to check the “Data has header row” field. Then hit Sort.\n\n\n\n\n\nNow all you need to do is search through the data for where your junk data – extra headers, blanks, etc. – got sorted and delete it. After you’ve done that, you can export it for use in R. Go to File > Download as > Comma Separated Values. Remember to put it in the same directory as your R Notebook file so you can import the data easily."
  },
  {
    "objectID": "aggregates.html",
    "href": "aggregates.html",
    "title": "4  Aggregates",
    "section": "",
    "text": "R is a statistical programming language that is purpose built for data analysis.\nBase R does a lot, but there are a mountain of external libraries that do things to make R better/easier/more fully featured. We already installed the tidyverse – or you should have if you followed the instructions for the last assignment – which isn’t exactly a library, but a collection of libraries. Together, they make up the tidyverse. Individually, they are extraordinarily useful for what they do. We can load them all at once using the tidyverse name, or we can load them individually. Let’s start with individually.\nThe two libraries we are going to need for this assignment are readr and dplyr. The library readr reads different types of data in as a dataframe. For this assignment, we’re going to read in csv data or Comma Separated Values data. That’s data that has a comma between each column of data.\nThen we’re going to use dplyr to analyze it.\nTo use a library, you need to import it. Good practice – one I’m going to insist on – is that you put all your library steps at the top of your notebook.\nThat code looks like this:\nTo load them both, you need to run that code twice:\nYou can keep doing that for as many libraries as you need. I’ve seen notebooks with 10 or more library imports.\nBut the tidyverse has a neat little trick. We can load most of the libraries we’ll need for the whole semester with one line:\nFrom now on, if that’s not the first line of your notebook, you’re probably doing it wrong."
  },
  {
    "objectID": "aggregates.html#basic-data-analysis-group-by-and-count",
    "href": "aggregates.html#basic-data-analysis-group-by-and-count",
    "title": "4  Aggregates",
    "section": "4.1 Basic data analysis: Group By and Count",
    "text": "4.1 Basic data analysis: Group By and Count\nThe first thing we need to do is get some data to work with. We do that by reading it in. In our case, we’re going to read data from a csv file – a comma-separated values file.\nThe CSV file we’re going to read from is a Basketball Reference page of advanced metrics for NBA players this season. The Sports Reference sites are a godsend of data, a trove of stuff, and we’re going to use it a lot in this class.\nFor this walkthrough:\n   Download csv file\n\nSo step 2, after setting up our libraries, is most often going to be importing data. In order to analyze data, we need data, so it stands to reason that this would be something we’d do very early.\nThe code looks something like this, but hold off copying it just yet:\nnbaplayers <- read_csv(\"~/Box/SportsData/nbaadvancedplayers1920.csv\")\nLet’s unpack that.\nThe first part – nbaplayers – is the name of your variable. A variable is just a name of a thing that stores stuff. In this case, our variable is a data frame, which is R’s way of storing data (technically it’s a tibble, which is the tidyverse way of storing data, but the differences aren’t important and people use them interchangeably). We can call this whatever we want. I always want to name data frames after what is in it. In this case, we’re going to import a dataset of NBA players. Variable names, by convention are one word all lower case. You can end a variable with a number, but you can’t start one with a number.\nThe <- bit is the variable assignment operator. It’s how we know we’re assigning something to a word. Think of the arrow as saying “Take everything on the right of this arrow and stuff it into the thing on the left.” So we’re creating an empty vessel called nbaplayers and stuffing all this data into it.\nThe read_csv bits are pretty obvious, except for one thing. What happens in the quote marks is the path to the data. In there, I have to tell R where it will find the data. The easiest thing to do, if you are confused about how to find your data, is to put your data in the same folder as as your notebook (you’ll have to save that notebook first). If you do that, then you just need to put the name of the file in there (nbaadvancedplayers1920.csv). In my case, I’ve got a folder called Box in my home directory (that’s the ~ part), and in there is a folder called SportsData that has the file called nbaadvancedplayers1920.csv in it. Some people – insane people – leave the data in their downloads folder. The data path then would be ~/Downloads/nameofthedatafilehere.csv on PC or Mac.\nWhat you put in there will be different from mine. So your first task is to import the data.\n\nnbaplayers <- read_csv(\"data/nbaadvancedplayers1920.csv\")\n\nRows: 651 Columns: 27\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (3): Player, Pos, Tm\ndbl (24): Rk, Age, G, MP, PER, TS%, 3PAr, FTr, ORB%, DRB%, TRB%, AST%, STL%,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nNow we can inspect the data we imported. What does it look like? To do that, we use head(nbaplayers) to show the headers and the first six rows of data. If we wanted to see them all, we could just simply enter mountainlions and run it.\nTo get the number of records in our dataset, we run nrow(nbaplayers)\n\nhead(nbaplayers)\n\n# A tibble: 6 × 27\n     Rk Player     Pos     Age Tm        G    MP   PER `TS%` `3PAr`   FTr `ORB%`\n  <dbl> <chr>      <chr> <dbl> <chr> <dbl> <dbl> <dbl> <dbl>  <dbl> <dbl>  <dbl>\n1     1 Steven Ad… C        26 OKC      63  1680  20.5 0.604  0.006 0.421   14  \n2     2 Bam Adeba… PF       22 MIA      72  2417  20.3 0.598  0.018 0.484    8.5\n3     3 LaMarcus … C        34 SAS      53  1754  19.7 0.571  0.198 0.241    6.3\n4     4 Kyle Alex… PF       23 MIA       2    13   4.7 0.5    0     0       17.9\n5     5 Nickeil A… SG       21 NOP      47   591   8.9 0.473  0.5   0.139    1.6\n6     6 Grayson A… SG       24 MEM      38   718  12   0.609  0.562 0.179    1.2\n# … with 15 more variables: `DRB%` <dbl>, `TRB%` <dbl>, `AST%` <dbl>,\n#   `STL%` <dbl>, `BLK%` <dbl>, `TOV%` <dbl>, `USG%` <dbl>, OWS <dbl>,\n#   DWS <dbl>, WS <dbl>, `WS/48` <dbl>, OBPM <dbl>, DBPM <dbl>, BPM <dbl>,\n#   VORP <dbl>\n\n\n\nnrow(nbaplayers)\n\n[1] 651\n\n\nAnother way to look at nrow – we have 651 players from this season in our dataset.\nWhat if we wanted to know how many players there were by position? To do that by hand, we’d have to take each of the 651 records and sort them into a pile. We’d put them in groups and then count them.\ndplyr has a group by function in it that does just this. A massive amount of data analysis involves grouping like things together at some point. So it’s a good place to start.\nSo to do this, we’ll take our dataset and we’ll introduce a new operator: %>%. The best way to read that operator, in my opinion, is to interpret that as “and then do this.”\nAfter we group them together, we need to count them. We do that first by saying we want to summarize our data (a count is a part of a summary). To get a summary, we have to tell it what we want. So in this case, we want a count. To get that, let’s create a thing called total and set it equal to n(), which is dplyrs way of counting something.\nHere’s the code:\n\nnbaplayers %>%\n  group_by(Pos) %>%\n  summarise(\n    total = n()\n  )\n\n# A tibble: 9 × 2\n  Pos   total\n  <chr> <int>\n1 C       111\n2 C-PF      2\n3 PF      135\n4 PF-C      2\n5 PG      111\n6 SF      113\n7 SF-PF     4\n8 SF-SG     3\n9 SG      170\n\n\nSo let’s walk through that. We start with our dataset – nbaplayers – and then we tell it to group the data by a given field in the data which we get by looking at either the output of head or you can look in the environment where you’ll see nbaplayers.\nIn this case, we wanted to group together positions, signified by the field name Pos. After we group the data, we need to count them up. In dplyr, we use summarize which can do more than just count things. Inside the parentheses in summarize, we set up the summaries we want. In this case, we just want a count of the positions: total = n(), says create a new field, called total and set it equal to n(), which might look weird, but it’s common in stats. The number of things in a dataset? Statisticians call in n. There are n number of players in this dataset. So n() is a function that counts the number of things there are.\nAnd when we run that, we get a list of positions with a count next to them. But it’s not in any order. So we’ll add another And Then Do This %>% and use arrange. Arrange does what you think it does – it arranges data in order. By default, it’s in ascending order – smallest to largest. But if we want to know the county with the most mountain lion sightings, we need to sort it in descending order. That looks like this:\n\nnbaplayers %>%\n  group_by(Pos) %>%\n  summarise(\n    total = n()\n  ) %>% arrange(desc(total))\n\n# A tibble: 9 × 2\n  Pos   total\n  <chr> <int>\n1 SG      170\n2 PF      135\n3 SF      113\n4 C       111\n5 PG      111\n6 SF-PF     4\n7 SF-SG     3\n8 C-PF      2\n9 PF-C      2\n\n\nSo the most common position in the NBA? Shooting guard, followed by power forward.\nWe can, if we want, group by more than one thing. Which team has the most of a single position? To do that, we can group by the team – called Tm in the data – and position, or Pos in the data:\n\nnbaplayers %>%\n  group_by(Tm, Pos) %>%\n  summarise(\n    total = n()\n  ) %>% arrange(desc(total))\n\n`summarise()` has grouped output by 'Tm'. You can override using the `.groups`\nargument.\n\n\n# A tibble: 159 × 3\n# Groups:   Tm [31]\n   Tm    Pos   total\n   <chr> <chr> <int>\n 1 TOT   PF       13\n 2 TOT   SG       13\n 3 SAC   PF        9\n 4 TOT   SF        9\n 5 BRK   SG        8\n 6 LAL   SG        8\n 7 TOT   PG        8\n 8 ATL   SG        7\n 9 BRK   SF        7\n10 DAL   SG        7\n# … with 149 more rows\n\n\nSo wait, what team is TOT?\nValuable lesson: whoever collects the data has opinions on how to solve problems. In this case, Basketball Reference, when a player get’s traded, records stats for the player’s first team, their second team, and a combined season total for a team called TOT, meaning Total. Is there a team abbreviated TOT? No. So ignore them here.\nSacramento has 9 power forward. Brooklyn has 8 shooting guards, as do the Lakers. You can learn a bit about how a team is assembled by looking at these simple counts."
  },
  {
    "objectID": "aggregates.html#other-aggregates-mean-and-median",
    "href": "aggregates.html#other-aggregates-mean-and-median",
    "title": "4  Aggregates",
    "section": "4.2 Other aggregates: Mean and median",
    "text": "4.2 Other aggregates: Mean and median\nIn the last example, we grouped some data together and counted it up, but there’s so much more you can do. You can do multiple measures in a single step as well.\nSticking with our NBA player data, we can calculate any number of measures inside summarize. Here, we’ll use R’s built in mean and median functions to calculate … well, you get the idea.\nLet’s look just a the number of minutes each position gets.\n\nnbaplayers %>%\n  group_by(Pos) %>%\n  summarise(\n    count = n(),\n    mean_minutes = mean(MP),\n    median_minutes = median(MP)\n  )\n\n# A tibble: 9 × 4\n  Pos   count mean_minutes median_minutes\n  <chr> <int>        <dbl>          <dbl>\n1 C       111         891.           887 \n2 C-PF      2         316.           316.\n3 PF      135         790.           567 \n4 PF-C      2        1548.          1548.\n5 PG      111         944.           850 \n6 SF      113         877.           754 \n7 SF-PF     4         638.           286.\n8 SF-SG     3        1211           1688 \n9 SG      170         843.           654.\n\n\nSo there’s 651 players in the data. Let’s look at shooting guards. The average shooting guard plays 842 minutes and the median is 653.5 minutes.\nWhy?\nLet’s let sort help us.\n\nnbaplayers %>% arrange(desc(MP))\n\n# A tibble: 651 × 27\n      Rk Player    Pos     Age Tm        G    MP   PER `TS%` `3PAr`   FTr `ORB%`\n   <dbl> <chr>     <chr> <dbl> <chr> <dbl> <dbl> <dbl> <dbl>  <dbl> <dbl>  <dbl>\n 1   323 CJ McCol… SG       28 POR      70  2556  17   0.541  0.378 0.136    1.9\n 2    55 Devin Bo… SG       23 PHO      70  2512  20.6 0.618  0.31  0.397    1.3\n 3   198 James Ha… SG       30 HOU      68  2483  29.1 0.626  0.557 0.528    2.9\n 4    27 Harrison… PF       27 SAC      72  2482  13.3 0.574  0.338 0.337    3.4\n 5   297 Damian L… PG       29 POR      66  2474  26.9 0.627  0.5   0.384    1.4\n 6   204 Tobias H… PF       27 PHI      72  2469  17.2 0.556  0.304 0.184    3.1\n 7   479 P.J. Tuc… PF       34 HOU      72  2467   8.3 0.559  0.702 0.113    4.7\n 8   175 Shai Gil… SG       21 OKC      70  2428  17.7 0.568  0.247 0.352    2.2\n 9     2 Bam Adeb… PF       22 MIA      72  2417  20.3 0.598  0.018 0.484    8.5\n10   343 Donovan … SG       23 UTA      69  2364  18.8 0.558  0.352 0.24     2.6\n# … with 641 more rows, and 15 more variables: `DRB%` <dbl>, `TRB%` <dbl>,\n#   `AST%` <dbl>, `STL%` <dbl>, `BLK%` <dbl>, `TOV%` <dbl>, `USG%` <dbl>,\n#   OWS <dbl>, DWS <dbl>, WS <dbl>, `WS/48` <dbl>, OBPM <dbl>, DBPM <dbl>,\n#   BPM <dbl>, VORP <dbl>\n\n\nThe player with the most minutes on the floor is a shooting guard. Shooting guard is the most common position, so that means there’s CJ McCollum rolling up 2,556 minutes in a season, and then there’s Cleveland Cavalier’s sensation J.P. Macura. Never heard of J.P. Macura? Might be because he logged one minute in one game this season.\nThat’s a huge difference.\nSo when choosing a measure of the middle, you have to ask yourself – could I have extremes? Because a median won’t be sensitive to extremes. It will be the point at which half the numbers are above and half are below. The average or mean will be a measure of the middle, but if you have a bunch of pine riders and then one ironman superstar, the average will be wildly skewed."
  },
  {
    "objectID": "aggregates.html#even-more-aggregates",
    "href": "aggregates.html#even-more-aggregates",
    "title": "4  Aggregates",
    "section": "4.3 Even more aggregates",
    "text": "4.3 Even more aggregates\nThere’s a ton of things we can do in summarize – we’ll work with more of them as the course progresses – but here’s a few other questions you can ask.\nWhich position in the NBA plays the most minutes? And what is the highest and lowest minute total for that position? And how wide is the spread between minutes? We can find that with sum to add up the minutes to get the total minutes, min to find the minimum minutes, max to find the maximum minutes and sd to find the standard deviation in the numbers.\n\nnbaplayers %>% \n  group_by(Pos) %>% \n  summarise(\n    total = sum(MP), \n    avgminutes = mean(MP), \n    minminutes = min(MP),\n    maxminutes = max(MP),\n    stdev = sd(MP)) %>% arrange(desc(total))\n\n# A tibble: 9 × 6\n  Pos    total avgminutes minminutes maxminutes stdev\n  <chr>  <dbl>      <dbl>      <dbl>      <dbl> <dbl>\n1 SG    143229       843.          1       2556 735. \n2 PF    106654       790.          5       2482 719. \n3 PG    104745       944.          8       2474 727. \n4 SF     99109       877.         11       2316 709. \n5 C      98914       891.          3       2336 619. \n6 SF-SG   3633      1211          87       1858 977. \n7 PF-C    3097      1548.        960       2137 832. \n8 SF-PF   2553       638.         46       1936 873. \n9 C-PF     633       316.        256        377  85.6\n\n\nSo again, no surprise, shooting guards spend the most minutes on the floor in the NBA. They average 842 minutes, but we noted why that’s trouble. The minimum is the J.P. Macura Award, max is the Trailblazer’s failing at load management, and the standard deviation is a measure of how spread out the data is. In this case, not the highest spread among positions, but pretty high. So you know you’ve got some huge minutes players and a bunch of bench players."
  },
  {
    "objectID": "mutating.html",
    "href": "mutating.html",
    "title": "5  Mutating data",
    "section": "",
    "text": "One of the most common data analysis techniques is to look at change over time. The most common way of comparing change over time is through percent change. The math behind calculating percent change is very simple, and you should know it off the top of your head. The easy way to remember it is:\n(new - old) / old\nOr new minus old divided by old. Your new number minus the old number, the result of which is divided by the old number. To do that in R, we can use dplyr and mutate to calculate new metrics in a new field using existing fields of data.\nSo first we’ll import the tidyverse so we can read in our data and begin to work with it.\nNow you’ll need a common and simple dataset of total attendance at NCAA football games over the last few seasons.\nYou’ll import it something like this.\nIf you want to see the first six rows – handy to take a peek at your data – you can use the function head.\nThe code to calculate percent change is pretty simple. Remember, with summarize, we used n() to count things. With mutate, we use very similar syntax to calculate a new value using other values in our dataset. So in this case, we’re trying to do (new-old)/old, but we’re doing it with fields. If we look at what we got when we did head, you’ll see there’s `2018` as the new data, and we’ll use `2017` as the old data. So we’re looking at one year. Then, to help us, we’ll use arrange again to sort it, so we get the fastest growing school over one year.\nWhat do we see right away? Do those numbers look like we expect them to? No. They’re a decimal expressed as a percentage. So let’s fix that by multiplying by 100.\nNow, does this ordering do anything for us? No. Let’s fix that with arrange.\nSo who had the most growth last year from the year before? Something going on at Georgia Southern."
  },
  {
    "objectID": "mutating.html#a-more-complex-example",
    "href": "mutating.html#a-more-complex-example",
    "title": "5  Mutating data",
    "section": "5.1 A more complex example",
    "text": "5.1 A more complex example\nThere’s metric in basketball that’s easy to understand – shooting percentage. It’s the number of shots made divided by the number of shots attempted. Simple, right? Except it’s a little too simple. Because what about three point shooters? They tend to be more vailable because the three point shot is worth more. What about players who get to the line? In shooting percentage, free throws are nowhere to be found.\nBasketball nerds, because of these weaknesses, have created a new metric called True Shooting Percentage. True shooting percentage takes into account all aspects of a players shooting to determine who the real shooters are.\nUsing dplyr and mutate, we can calculate true shooting percentage. So let’s look at a new dataset, one of every college basketball player’s season stats in 2019-20 season. It’s a dataset of more than 5,000 players, and we’ve got 59 variables – one of them is True Shooting Percentage, but we’re going to ignore that.\nFor this walkthrough:\n   Download csv file\n\nImport it like this:\n\nplayers <- read_csv(\"data/players20.csv\")\n\nRows: 5452 Columns: 57\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (8): Team, Player, Class, Pos, Height, Hometown, High School, Summary\ndbl (49): #, Weight, Rk.x, G, GS, MP, FG, FGA, FG%, 2P, 2PA, 2P%, 3P, 3PA, 3...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nThe basic true shooting percentage formula is (Points / (2*(FieldGoalAttempts + (.44 * FreeThrowAttempts)))) * 100. Let’s talk that through. Points divided by a lot. It’s really field goal attempts plus 44 percent of the free throw attempts. Why? Because that’s about what a free throw is worth, compared to other ways to score. After adding those things together, you double it. And after you divide points by that number, you multiply the whole lot by 100.\nIn our data, we need to be able to find the fields so we can complete the formula. To do that, one way is to use the Environment tab in R Studio. In the Environment tab is a listing of all the data you’ve imported, and if you click the triangle next to it, it’ll list all the field names, giving you a bit of information about each one.\n\n\n\n\n\nSo what does True Shooting Percentage look like in code?\nLet’s think about this differently. Who had the best true shooting season last year?\n\nplayers %>%\n  mutate(trueshooting = (PTS/(2*(FGA + (.44*FTA))))*100) %>%\n  arrange(desc(trueshooting))\n\n# A tibble: 5,452 × 58\n   Team    Player   `#` Class Pos   Height Weight Hometown `High School` Summary\n   <chr>   <chr>  <dbl> <chr> <chr> <chr>   <dbl> <chr>    <chr>         <chr>  \n 1 Vander… Trace…    20 JR    G     6-2       170 Carmel,… Park Tudor HS 3.0 Pt…\n 2 Stetso… Alex …    11 SO    G     6-2       195 Houston… New Hampton … 0.5 Pt…\n 3 South … Mark …    11 SO    G     6-2       190 Hudson,… Hudson HS     0.6 Pt…\n 4 Samfor… Jack …    11 FR    G     5-10      155 Homewoo… Homewood HS   2.0 Pt…\n 5 Saint … Brand…    12 SO    G     6-3       180 Tremont… Wesclin HS    3.0 Pt…\n 6 Provid… Tommy…    22 FR    G     6-2       175 Bingham… Seton Cathol… 0.6 Pt…\n 7 Old Do… Quish…    24 SO    G     5-10      140 Hampton… Hampton HS    1.0 Pt…\n 8 Oklaho… J.K. …    54 SR    G     6-1       185 Fairfax… Glencoe HS    1.0 Pt…\n 9 Navy M… Chris…    10 FR    G     6-1       183 Bowie, … Annapolis HS  3.0 Pt…\n10 Missou… Brook…    25 SO    G     6-0       187 St. Lou… De Smet HS    0.6 Pt…\n# … with 5,442 more rows, and 48 more variables: Rk.x <dbl>, G <dbl>, GS <dbl>,\n#   MP <dbl>, FG <dbl>, FGA <dbl>, `FG%` <dbl>, `2P` <dbl>, `2PA` <dbl>,\n#   `2P%` <dbl>, `3P` <dbl>, `3PA` <dbl>, `3P%` <dbl>, FT <dbl>, FTA <dbl>,\n#   `FT%` <dbl>, ORB <dbl>, DRB <dbl>, TRB <dbl>, AST <dbl>, STL <dbl>,\n#   BLK <dbl>, TOV <dbl>, PF <dbl>, PTS <dbl>, Rk.y <dbl>, PER <dbl>,\n#   `TS%` <dbl>, `eFG%` <dbl>, `3PAr` <dbl>, FTr <dbl>, PProd <dbl>,\n#   `ORB%` <dbl>, `DRB%` <dbl>, `TRB%` <dbl>, `AST%` <dbl>, `STL%` <dbl>, …\n\n\nYou’ll be forgiven if you did not hear about Vanderbilt’s shooting sensation Trace Arbuckle. He played in one game, took one shot and actually hit it. It happened to be a three pointer, which is one more three pointer than I’ve hit in college basketball. So props to him. Does that mean he had the best true shooting season in college basketball last year?\nNot hardly.\nWe’ll talk about how to narrow the pile and filter out data in the next chapter."
  },
  {
    "objectID": "filtering.html",
    "href": "filtering.html",
    "title": "6  Filters and selections",
    "section": "",
    "text": "More often than not, we have more data than we want. Sometimes we need to be rid of that data. In dplyr, there’s two ways to go about this: filtering and selecting.\nFiltering creates a subset of the data based on criteria. All records where the count is greater than 10. All records that match “Nebraska”. Something like that.\nSelecting simply returns only the fields named. So if you only want to see School and Attendance, you select those fields. When you look at your data again, you’ll have two columns. If you try to use one of your columns that you had before you used select, you’ll get an error.\nLet’s work with our football attendance data to show some examples.\nFirst we’ll need the tidyverse.\nNow import the data.\nSo, first things first, let’s say we don’t care about all this Air Force, Akron, Alabama crap and just want to see Dear Old Nebraska U. We do that with filter and then we pass it a condition.\nBefore we do that, a note about conditions. Most of the conditional operators you’ll understand – greater than and less than are > and <. The tough one to remember is equal to. In conditional statements, equal to is == not =. If you haven’t noticed, = is a variable assignment operator, not a conditional statement. So equal is == and NOT equal is !=.\nSo if you want to see Institutions equal to Nebraska, you do this:\nOr if we want to see schools that had more than half a million people buy tickets to a football game in a season, we do the following. NOTE THE BACKTICKS.\nBut what if we want to see all of the Power Five conferences? We could use conditional logic in our filter. The conditional logic operators are | for OR and & for AND. NOTE: AND means all conditions have to be met. OR means any of the conditions work. So be careful about boolean logic.\nBut that’s a lot of repetitive code. And a lot of typing. And typing is the devil. So what if we could create a list and pass it into the filter? It’s pretty simple.\nWe can create a new variable – remember variables can represent just about anything – and create a list. To do that we use the c operator, which stands for concatenate. That just means take all the stuff in the parenthesis after the c and bunch it into a list.\nNote here: text is in quotes. If they were numbers, we wouldn’t need the quotes.\nNow with a list, we can use the %in% operator. It does what you think it does – it gives you data that matches things IN the list you give it."
  },
  {
    "objectID": "filtering.html#selecting-data-to-make-it-easier-to-read",
    "href": "filtering.html#selecting-data-to-make-it-easier-to-read",
    "title": "6  Filters and selections",
    "section": "6.1 Selecting data to make it easier to read",
    "text": "6.1 Selecting data to make it easier to read\nSo now we have our Power Five list. What if we just wanted to see attendance from the most recent season and ignore all the rest? Select to the rescue.\n\nattendance %>% filter(Conference %in% powerfive) %>% select(Institution, Conference, `2018`)\n\n# A tibble: 65 × 3\n   Institution    Conference `2018`\n   <chr>          <chr>       <dbl>\n 1 Alabama        SEC        710931\n 2 Arizona        Pac-12     318051\n 3 Arizona St.    Pac-12     291091\n 4 Arkansas       SEC        367748\n 5 Auburn         SEC        591236\n 6 Baylor         Big 12     248017\n 7 Boston College ACC        263363\n 8 California     Pac-12     300061\n 9 Clemson        ACC        562799\n10 Colorado       Pac-12     274852\n# … with 55 more rows\n\n\nIf you have truly massive data, Select has tools to help you select fields that start_with the same things or ends with a certain word. The documentation will guide you if you need those someday. For 90 plus percent of what we do, just naming the fields will be sufficient."
  },
  {
    "objectID": "filtering.html#using-conditional-filters-to-set-limits",
    "href": "filtering.html#using-conditional-filters-to-set-limits",
    "title": "6  Filters and selections",
    "section": "6.2 Using conditional filters to set limits",
    "text": "6.2 Using conditional filters to set limits\nLet’s return to the problem of one-hit wonders in basketball mucking up our true shooting analysis. How can we set limits in something like a question of who had the best season? Let’s grab every player from last season.\nFor this walkthrough:\n   Download csv file\n\nLet’s get set up similar to the previous chapter.\n\nplayers <- read_csv(\"data/players21.csv\")\n\nRows: 5410 Columns: 58\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (9): Team, Player, Class, Pos, Height, Hometown, High School, Summary, ...\ndbl (49): #, Weight, Rk.x, G, GS, MP, FG, FGA, FG%, 2P, 2PA, 2P%, 3P, 3PA, 3...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nplayers %>%\n  mutate(trueshooting = (PTS/(2*(FGA + (.44*FTA))))*100) %>%\n  arrange(desc(trueshooting))\n\n# A tibble: 5,410 × 59\n   Team    Player   `#` Class Pos   Height Weight Hometown `High School` Summary\n   <chr>   <chr>  <dbl> <chr> <chr> <chr>   <dbl> <chr>    <chr>         <chr>  \n 1 Weber … Jake …    25 SO    F     6-7       185 Star, ID Eagle (ID)    3.0 Pt…\n 2 Utah S… Karso…    21 FR    G     6-4       175 Celina,… Celina HS     0.4 Pt…\n 3 UNLV R… Trey …     2 JR    G     5-11      175 Henders… Coronado (NV) 1.0 Pt…\n 4 Missis… Justi…    21 JR    G     6-5       215 Birming… Hoover (AL)   3.0 Pt…\n 5 Louisv… Hogan…     3 SO    C     6-8       235 Zionsvi… Zionsville HS 1.0 Pt…\n 6 Gonzag… Matth…    23 JR    G     6-3       185 Portlan… Jesuit HS     0.5 Pt…\n 7 Fresno… Alec …    20 JR    G     6-4       190 Riversi… Junipero Ser… 3.0 Pt…\n 8 ETSU B… Morre…    22 FR    G     6-2       210 Clevela… Cleveland HS  0.6 Pt…\n 9 UConn … Andre…    20 FR    G     6-1       175 Glaston… St. Anthony … 0.8 Pt…\n10 Bellar… Hunte…    23 <NA>  G     6-4       185 Mount W… Bullitt East… 0.8 Pt…\n# … with 5,400 more rows, and 49 more variables: Rk.x <dbl>, G <dbl>, GS <dbl>,\n#   MP <dbl>, FG <dbl>, FGA <dbl>, `FG%` <dbl>, `2P` <dbl>, `2PA` <dbl>,\n#   `2P%` <dbl>, `3P` <dbl>, `3PA` <dbl>, `3P%` <dbl>, FT <dbl>, FTA <dbl>,\n#   `FT%` <dbl>, ORB <dbl>, DRB <dbl>, TRB <dbl>, AST <dbl>, STL <dbl>,\n#   BLK <dbl>, TOV <dbl>, PF <dbl>, PTS <dbl>, Rk.y <dbl>, PER <dbl>,\n#   `TS%` <dbl>, `eFG%` <dbl>, `3PAr` <dbl>, FTr <dbl>, PProd <dbl>,\n#   `ORB%` <dbl>, `DRB%` <dbl>, `TRB%` <dbl>, `AST%` <dbl>, `STL%` <dbl>, …\n\n\nAnd ine the COVID season, Weber State’s Jake Furgerson is your One Shot One Three True Shooting champion.\nIn most contests, like the batting title in Major League Baseball, there’s a minimum number of X to qualify. In baseball, it’s at bats. In basketball, it attempts. So let’s set a floor and see how it changes. What if we said you had to have played 100 minutes in a season? The top players in college basketball play more than 1000 minutes in a season. So 100 is not that much. Let’s try it and see.\n\nplayers %>%\n  mutate(trueshooting = (PTS/(2*(FGA + (.44*FTA))))*100) %>%\n  arrange(desc(trueshooting)) %>%\n  filter(MP > 100)\n\n# A tibble: 3,490 × 59\n   Team    Player   `#` Class Pos   Height Weight Hometown `High School` Summary\n   <chr>   <chr>  <dbl> <chr> <chr> <chr>   <dbl> <chr>    <chr>         <chr>  \n 1 South … Natha…    14 JR    F     6-6       189 Murfree… Blackman HS   1.7 Pt…\n 2 Idaho … Emmit…     4 JR    G     6-4       195 Lapwai,… Lapwai (ID)   3.8 Pt…\n 3 Sacram… Spenc…    34 SR    F     6-6       195 Woodbri… Lodi (CA)     2.2 Pt…\n 4 LSU Fi… Mwani…     0 FR    F     6-5       215 Las Veg… Bishop Gorma… 3.6 Pt…\n 5 Sacred… Mike …     3 FR    G     6-0       170 Hicksvi… Holy Trinity… 8.0 Pt…\n 6 Northe… Bryce…    21 FR    F     6-7       205 Allen, … Allen HS      2.9 Pt…\n 7 Quinni… Seth …     4 SO    C     7-1       200 Warmins… Archbishop W… 8.0 Pt…\n 8 Utah U… Lahat…    32 SO    F     6-10      243 Dakar, … Florida Prep  1.4 Pt…\n 9 Colgat… Olive…    33 JR    G     6-2       190 Chapel … Oak Hill Aca… 3.7 Pt…\n10 Akron … Enriq…    25 SO    F     6-7       205 Clevela… St Martin De… 7.9 Pt…\n# … with 3,480 more rows, and 49 more variables: Rk.x <dbl>, G <dbl>, GS <dbl>,\n#   MP <dbl>, FG <dbl>, FGA <dbl>, `FG%` <dbl>, `2P` <dbl>, `2PA` <dbl>,\n#   `2P%` <dbl>, `3P` <dbl>, `3PA` <dbl>, `3P%` <dbl>, FT <dbl>, FTA <dbl>,\n#   `FT%` <dbl>, ORB <dbl>, DRB <dbl>, TRB <dbl>, AST <dbl>, STL <dbl>,\n#   BLK <dbl>, TOV <dbl>, PF <dbl>, PTS <dbl>, Rk.y <dbl>, PER <dbl>,\n#   `TS%` <dbl>, `eFG%` <dbl>, `3PAr` <dbl>, FTr <dbl>, PProd <dbl>,\n#   `ORB%` <dbl>, `DRB%` <dbl>, `TRB%` <dbl>, `AST%` <dbl>, `STL%` <dbl>, …\n\n\nNow you get South Carolina’s Nathan Nelson, who played in 15 games and was on the floor for 113 minutes. So he played regularly, but not a lot. But in that time, he only attempted 14 shots, and made 64 percent of them. In other words, when he shot, he probably scored. He just rarely shot.\nSo is 100 minutes our level? Here’s the truth – there’s not really an answer here. We’re picking a cutoff. If you can cite a reason for it and defend it, then it probably works."
  },
  {
    "objectID": "filtering.html#top-list",
    "href": "filtering.html#top-list",
    "title": "6  Filters and selections",
    "section": "6.3 Top list",
    "text": "6.3 Top list\nOne last little dplyr trick that’s nice to have in the toolbox is a shortcut for selecting only the top values for your dataset. Want to make a Top 10 List? Or Top 25? Or Top Whatever You Want? It’s easy.\nSo what are the top 10 Power Five schools by season attendance. All we’re doing here is chaining commands together with what we’ve already got. We’re filtering by our list of Power Five conferences, we’re selecting the three fields we need, now we’re going to arrange it by total attendance and then we’ll introduce the new function: top_n. The top_n function just takes a number. So we want a top 10 list? We do it like this:\n\nattendance %>% filter(Conference %in% powerfive) %>% select(Institution, Conference, `2018`) %>% arrange(desc(`2018`)) %>% top_n(10)\n\nSelecting by 2018\n\n\n# A tibble: 10 × 3\n   Institution Conference `2018`\n   <chr>       <chr>       <dbl>\n 1 Michigan    Big Ten    775156\n 2 Penn St.    Big Ten    738396\n 3 Ohio St.    Big Ten    713630\n 4 Alabama     SEC        710931\n 5 LSU         SEC        705733\n 6 Texas A&M   SEC        698908\n 7 Tennessee   SEC        650887\n 8 Georgia     SEC        649222\n 9 Nebraska    Big Ten    623240\n10 Oklahoma    Big 12     607146\n\n\nThat’s all there is to it. Just remember – for it to work correctly, you need to sort your data BEFORE you run top_n. Otherwise, you’re just getting the first 10 values in the list. The function doesn’t know what field you want the top values of. You have to do it."
  },
  {
    "objectID": "transforming.html",
    "href": "transforming.html",
    "title": "7  Transforming data",
    "section": "",
    "text": "Sometimes long data needs to be wide, and sometimes wide data needs to be long. I’ll explain.\nYou are soon going to discover that long before you can visualize data, you need to have it in a form that the visualization library can deal with. One of the ways that isn’t immediately obvious is how your data is cast. Most of the data you will encounter will be wide – each row will represent a single entity with multiple measures for that entity. So think of states. Your row of your dataset could have the state name, population, average life expectancy and other demographic data.\nBut what if your visualization library needs one row for each measure? So state, data type and the data. Nebraska, Population, 1,929,000. That’s one row. Then the next row is Nebraska, Average Life Expectancy, 76. That’s the next row. That’s where recasting your data comes in.\nWe can use a library called tidyr to pivot_longer or pivot_wider the data, depending on what we need. We’ll use a dataset of college football attendance to demonstrate.\nFirst we need some libraries.\nNow we’ll load the data.\nSo as you can see, each row represents a school, and then each column represents a year. This is great for calculating the percent change – we can subtract a column from a column and divide by that column. But later, when we want to chart each school’s attendance over the years, we have to have each row be one team for one year. Nebraska in 2013, then Nebraska in 2014, and Nebraska in 2015 and so on.\nTo do that, we use pivot_longer because we’re making wide data long. Since all of the columns we want to make rows start with 20, we can use that in our cols directive. Then we give that column a name – Year – and the values for each year need a name too. Those are the attendance figure. We can see right away how this works.\nWe’ve gone from 150 rows to 900, but that’s expected when we have 6 years for each team."
  },
  {
    "objectID": "transforming.html#making-long-data-wide",
    "href": "transforming.html#making-long-data-wide",
    "title": "7  Transforming data",
    "section": "7.1 Making long data wide",
    "text": "7.1 Making long data wide\nWe can reverse this process using pivot_wider, which makes long data wide.\nWhy do any of this?\nIn some cases, you’re going to be given long data and you need to calculate some metric using two of the years – a percent change for instance. So you’ll need to make the data wide to do that. You might then have to re-lengthen the data now with the percent change. Some project require you to do all kinds of flexing like this. It just depends on the data.\nSo let’s take what we made above and turn it back into wide data.\n\nlongdata <- attendance %>% pivot_longer(cols = starts_with(\"20\"), names_to = \"Year\", values_to = \"Attendance\")\n\nlongdata\n\n# A tibble: 900 × 4\n   Institution Conference Year  Attendance\n   <chr>       <chr>      <chr>      <dbl>\n 1 Air Force   MWC        2013      228562\n 2 Air Force   MWC        2014      168967\n 3 Air Force   MWC        2015      156158\n 4 Air Force   MWC        2016      177519\n 5 Air Force   MWC        2017      174924\n 6 Air Force   MWC        2018      166205\n 7 Akron       MAC        2013      107101\n 8 Akron       MAC        2014       55019\n 9 Akron       MAC        2015      108588\n10 Akron       MAC        2016       62021\n# … with 890 more rows\n\n\nTo pivot_wider, we just need to say where our column names are coming from – the Year – and where the data under it should come from – Attendance.\n\nlongdata %>% pivot_wider(names_from = Year, values_from = Attendance)\n\n# A tibble: 150 × 8\n   Institution     Conference      `2013` `2014` `2015` `2016` `2017` `2018`\n   <chr>           <chr>            <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>\n 1 Air Force       MWC             228562 168967 156158 177519 174924 166205\n 2 Akron           MAC             107101  55019 108588  62021 117416  92575\n 3 Alabama         SEC             710538 710736 707786 712747 712053 710931\n 4 Appalachian St. FBS Independent 149366     NA     NA     NA     NA     NA\n 5 Appalachian St. Sun Belt            NA 138995 128755 156916 154722 131716\n 6 Arizona         Pac-12          285713 354973 308355 338017 255791 318051\n 7 Arizona St.     Pac-12          501509 343073 368985 286417 359660 291091\n 8 Arkansas        SEC             431174 399124 471279 487067 442569 367748\n 9 Arkansas St.    Sun Belt        149477 149163 138043 136200 119538 119001\n10 Army West Point FBS Independent 169781 171310 185946 163267 185543 190156\n# … with 140 more rows\n\n\nAnd just like that, we’re back."
  },
  {
    "objectID": "transforming.html#why-this-matters",
    "href": "transforming.html#why-this-matters",
    "title": "7  Transforming data",
    "section": "7.2 Why this matters",
    "text": "7.2 Why this matters\nThis matters because certain visualization types need wide or long data. A significant hurdle you will face for the rest of the semester is getting the data in the right format for what you want to do.\nSo let me walk you through an example using this data.\nLet’s look at Nebraska’s attendance over the time period. In order to do that, I need long data because that’s what the charting library, ggplot2, needs. You’re going to learn a lot more about ggplot later.\n\nnebraska <- longdata %>% filter(Institution == \"Nebraska\")\n\nNow that we have long data for just Nebraska, we can chart it.\n\nggplot(nebraska, aes(x=Year, y=Attendance, group=1)) + \n  geom_line() + \n  scale_y_continuous(labels = scales::comma) + \n  labs(x=\"Year\", y=\"Attendance\", title=\"We'll all stick together?\", subtitle=\"It's not as bad as you think -- they widened the seats, cutting the number.\", caption=\"Source: NCAA | By Matt Waite\", color = \"Outcome\") +\n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 10),\n    axis.title.y = element_blank(),\n    axis.text = element_text(size = 7),\n    axis.ticks = element_blank(),\n    panel.grid.minor = element_blank(),\n    panel.grid.major.x = element_blank(),\n    legend.position=\"bottom\"\n  )"
  },
  {
    "objectID": "significancetests.html",
    "href": "significancetests.html",
    "title": "8  Significance tests",
    "section": "",
    "text": "Now that we’ve worked with data a little, it’s time to start asking more probing questions of our data. One of the most probing questions we can ask – one that so few sports journalists ask – is if the difference between this thing and the normal thing is real.\nWe have a perfect natural experiment going on in sports right now to show how significance tests work. The NBA, to salvage a season and get to the playoffs, put their players in a bubble – more accurately a hotel complex at Disney World in Orlando – and had them play games without fans.\nSo are the games different from other regular season games that had fans?\nTo answer this, we need to understand that a significance test is a way to determine if two numbers are significantly different from each other. Generally speaking, we’re asking if a subset of data – a sample – is different from the total data pool – the population. Typically, this relies on data being in a normal distribution.\nIf it is, then we know certain things about it. Like the mean – the average – will be a line right at the peak of cases. And that 66 percent of cases will be in that red area – the first standard deviation.\nA significance test will determine if a sample taken from that group is different from the total.\nSignificance testing involves stating a hypothesis. In our case, our hypothesis is that there is a difference between bubble games without people and regular games with people.\nIn statistics, the null hypothesis is the opposite of your hypothesis. In this case, that there is no difference between fans and no fans.\nWhat we’re driving toward is a metric called a p-value, which is the probability that you’d get your sample mean if the null hypothesis is true. So in our case, it’s the probability we’d see the numbers we get if there was no difference between fans and no fans. If that probability is below .05, then we consider the difference significant and we reject the null hypothesis.\nSo let’s see. We’ll need a log of every game last NBA season. In this data, there’s a field called COVID, which labels the game as a regular game or a bubble game.\nLoad the tidyverse.\nAnd import the data.\nFirst, let’s just look at scoring. Here’s a theory: fans make players nervous. The screaming makes players tense up, and tension makes for bad shooting. An alternative to this: screaming fans make you defend harder. So my hypothesis is that not only is the scoring different, it’s lower.\nFirst things first, let’s create a new field, called totalpoints and add the two scores together. We’ll need this, so we’re going to make this a new dataframe called points.\nTypically speaking, with significance tests, the process involves creating two different means and then running a bunch of formulas on them. R makes this easy by giving you a t.test function, which does all the work for you. What we have to tell it is what is the value we are testing, over which groups, and from what data. It looks like this:\nNow let’s talk about the output. I prefer to read these bottom up. So at the bottom, it says that the mean number of points score in an NBA game With Fans is 222.89. The mean scored in games Without Fans is 231.35. That means teams are scoring almost 8.5 points MORE without fans on average.\nBut, some games are defenseless track meets, some games are defensive slugfests. We learned that averages can be skewed by extremes. So the next thing we need to look at is the p-value. Remember, this is the probability that we’d get this sample mean – the without fans mean – if there was no difference between fans and no fans.\nThe probability? 4.099e-07 or 4.099 x 10 to the -7 power. Don’t remember your scientific notation? That’s .00000004099. The decimal, seven zeros and the number.\nRemember, if the probability is below .05, then we determine that this number is statistically significant. We’ll talk more about statistical significance soon, but in this case, statistical significance means that our hypothesis is correct: points are different without fans than with. And since our hypothesis is correct, we reject the null hypothesis and we can confidently say that bubble teams are scoring more than they were when fans packed arenas."
  },
  {
    "objectID": "significancetests.html#accepting-the-null-hypothesis",
    "href": "significancetests.html#accepting-the-null-hypothesis",
    "title": "8  Significance tests",
    "section": "8.1 Accepting the null hypothesis",
    "text": "8.1 Accepting the null hypothesis\nSo what does it look like when your hypothesis is wrong?\nLet’s test another thing that may have been impacted by bubble games: home court advantage. If you’re the home team, but you’re not at home, does it affect you? It has to, right? Your fans aren’t there. Home and away are just positions on the scoreboard. It can’t matter, can it?\nMy hypothesis is that home court is no longer an advantage, and the home team will score less relative to the away team.\nFirst things first: We need to make a dataframe where Team is the home team. And then we’ll create a differential between the home team and away team. If home court is an advantage, the differential should average out to be positive – the home team scores more than the away team.\n\nhomecourt <- logs %>% filter(is.na(HomeAway) == TRUE) %>% mutate(differential = TeamScore - OpponentScore)\n\nNow let’s test it.\n\nt.test(differential ~ COVID, data=homecourt)\n\n\n    Welch Two Sample t-test\n\ndata:  differential by COVID\nt = 0.36892, df = 107.84, p-value = 0.7129\nalternative hypothesis: true difference in means between group With Fans and group Without Fans is not equal to 0\n95 percent confidence interval:\n -2.301628  3.354268\nsample estimates:\n   mean in group With Fans mean in group Without Fans \n                  2.174047                   1.647727 \n\n\nSo again, start at the bottom. With Fans, the home team averages 2.17 more points than the away team. Without fans, they average 1.64 more.\nIf you are a bad sportswriter or a hack sports talk radio host, you look at this and scream “the bubble killed home court!”\nBut two things: first, the home team is STILL, on average, scoring more than the away team on the whole.\nAnd two: Look at the p-value. It’s .7129. Is that less than .05? No, no it is not. So that means we have to accept the null hypothesis that there is no difference between fans and no fans when it comes to the difference between the home team and the away team’s score.\nNow, does this mean that the bubble hasn’t impacted the magic of home court? Not necessarily. What it’s saying is that the variance between one and the other is too large to be able to say that they’re different. It could just be random noise that’s causing the difference, and so it’s not real. More to the point, it’s saying that this metric isn’t capable of telling you that there’s no home court in the bubble.\nWe’re going to be analyzing these bubble games for years trying to find the true impact of fans."
  },
  {
    "objectID": "correlations.html",
    "href": "correlations.html",
    "title": "9  Correlations and regression",
    "section": "",
    "text": "Throughout sports, you will find no shortage of opinions. From people yelling at their TV screens to an entire industry of people paid to have opinions, there are no shortage of reasons why this team sucks and that player is great. They may have their reasons, but a better question is, does that reason really matter?\nCan we put some numbers behind that? Can we prove it or not?\nThis is what we’re going to start to answer. And we’ll do it with correlations and regressions.\nFirst, we need data from the 2020 college football season.\nThen load the tidyverse.\nNow import the data.\nTo do this, we need all FBS college football teams and their season stats from last year. How much, over the course of a season, does a thing matter? That’s the question you’re going to answer.\nIn our case, we want to know how much does a team’s accumulated penalties influence the number of points they score in a season? How much difference can we explain in points with penalties?\nWe’re going to use two different methods here and they’re closely related. Correlations – specifically the Pearson Correlation Coefficient – is a measure of how related two numbers are in a linear fashion. In other words – if our X value goes up one, what happens to Y? If it also goes up 1, that’s a perfect correlation. X goes up 1, Y goes up 1. Every time. Correlation coefficients are a number between 0 and 1, with zero being no correlation and 1 being perfect correlation if our data is linear. We’ll soon go over scatterplots to visually determine if our data is linear, but for now, we have a hypothesis: More penalties are bad. Penalties hurt. So if a team gets lots of them, they should have worse outcomes than teams that get few of them. That is an argument for a linear relationship between them.\nBut is there one?\nWe’re going create a new dataframe called newcorrelations that takes our data that we imported and adds a column called differential because we don’t have separate offense and defense penalties, and then we’ll use correlations to see how related those two things are.\nIn R, there is a cor function, and it works much the same as mean or median. So we want to see if differential is correlated with TotalPenaltyYards, which is the yards of penalties a team gets in a game. We do that by referencing differential and TotalPenaltyYards and specifying we want a pearson correlation. The number we get back is the correlation coefficient.\nSo on a scale of -1 to 1, where 0 means there’s no relationship at all and 1 or -1 means a perfect relationship, penalty yards and whether or not the team scores more points than it give up are at -0.0068. You could say they’re .7 percent related toward the negative – more penalties, the lower your differential. Another way to say it? They’re 99.3 percent not related.\nWhat about the number of penalties instead of the yards?\nSo wait, what does this all mean?\nIt means that when you look at every game in college football, the number of penalties and penalty yards does have a negative impact on the score difference between your team and the other team. But the relationship between penalties, penalty yards and the difference between scores is barely anything at all. Like 99+ percent plus not related.\nNormally, at this point, you’d quit while you were ahead. A correlation coefficient that shows there’s no relationship between two things means stop. It’s pointless to go on. But let’s beat a dead horse a bit for the sake of talk radio callers who want to complain about undisciplined football teams.\nEnter regression. Regression is how we try to fit our data into a line that explains the relationship the best. Regressions will help us predict things as well – if we have a team that has so many penalties, what kind of point differential could we expect? So regressions are about prediction, correlations are about description. Correlations describe a relationship. Regressions help us predict what that relationship means and what it might look like in the real world. Specifically, it tells us how much of the change in a dependent variable can be explained by the independent variable.\nAnother thing regressions do is give us some other tools to evaluate if the relationship is real or not.\nHere’s an example of using linear modeling to look at penalty yards. Think of the ~ character as saying “is predicted by”. The output looks like a lot, but what we need is a small part of it.\nThere’s three things we need here:\nSo penalty yards are totally meaningless to the outcome of a game.\nYou can see the problem in a graph. On the X axis is penalty yards, on the y is aggregate score. If these elements had a strong relationship, we’d see a clear pattern moving from right to left, sloping down. On the left would be the teams with few penalties and a positive point differential. On right would be teams with high penalty yards and negative point differentials. Do you see that below?"
  },
  {
    "objectID": "correlations.html#a-more-predictive-example",
    "href": "correlations.html#a-more-predictive-example",
    "title": "9  Correlations and regression",
    "section": "9.1 A more predictive example",
    "text": "9.1 A more predictive example\nSo we’ve firmly established that penalties aren’t predictive. But what is?\nSo instead of looking at penalty yards, let’s make a new metric: Net Yards. Can we predict the score differential by looking at the yards a team gained minus the yards they gave up.\n\nregressions <- newcorrelations %>% mutate(NetYards = OffensiveYards - DefYards)\n\nFirst, let’s look at the correlation coefficent.\n\nregressions %>% \n  summarise(correlation = cor(differential, NetYards, method=\"pearson\"))\n\n# A tibble: 1 × 1\n  correlation\n        <dbl>\n1       0.801\n\n\nAnswer: 80 percent. Not a perfect relationship, but very good. But how meaningful is that relationship and how predictive is it?\n\nnet <- lm(differential ~ NetYards, data = regressions)\nsummary(net)\n\n\nCall:\nlm(formula = differential ~ NetYards, data = regressions)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-49.479  -8.593   0.128   8.551  48.857 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept) 0.311030   0.385651   0.807     0.42    \nNetYards    0.101704   0.002293  44.345   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 12.78 on 1098 degrees of freedom\nMultiple R-squared:  0.6417,    Adjusted R-squared:  0.6414 \nF-statistic:  1967 on 1 and 1098 DF,  p-value: < 2.2e-16\n\n\nFirst we check p-value. See that e-16? That means scientific notation. That means our number is 2.2 times 10 to the -16 power. So -.000000000000000022. That’s sixteen zeros between the decimal and 22. Is that less than .05? Uh, yeah. So this is really, really, really not random. But anyone who has watched a game of football knows this is true. It makes intuitive sense.\nSecond, Adjusted R-squared: 0.6414. So we can predict a whopping 64 percent of the difference in the score differential by simply looking at the net yards the team has.\nThird, the coefficients: In this case, our y=mx+b formula looks like y = 0.101704x + 0.311030. So if we were applying this, let’s look at Nebraska’s 26-20 loss to Iowa in 2020. Nebraska’s net yards that game? 16. That’s right – we outgained them.\n\n(0.101704*16)+0.311030 \n\n[1] 1.938294\n\n\nSo by our model, Nebraska should have won by 1.94 points. Some games are closer than others. But when you can explain 65 percent of the difference, this is the kind of result you get. What would improve the model? Using more data to start. And using more inputs."
  },
  {
    "objectID": "multipleregression.html",
    "href": "multipleregression.html",
    "title": "10  Multiple regression",
    "section": "",
    "text": "That presents it’s own problems. So let’s get set up. The dataset we’ll use is all college football games since the 2011 season.\nFor this walkthrough:\n   Download csv file\n\nWe need the tidyverse.\n\nlibrary(tidyverse)\n\nAnd the data.\n\nlogs <- read_csv(\"data/footballlogs1120.csv\")\n\nRows: 15637 Columns: 55\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): HomeAway, Opponent, Result, TeamFull, TeamURL, Outcome, Team, Con...\ndbl  (46): Game, PassingCmp, PassingAtt, PassingPct, PassingYds, PassingTD, ...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nOne way to show how successful a footballl team was for a game is to show the differential between the team’s score and the opponent’s score. Score a lot more than the opponent = good, score a lot less than the opponent = bad. And, relatively speaking, the more the better. So let’s create that differential. Let’s also get our net yardage stat back. And because we’ll need it later, let’s add the turnover margin.\n\nlogs <- logs %>% mutate(\n  Differential = TeamScore - OpponentScore, \n  NetYards = OffensiveYards - DefYards, \n  TurnoverMargin = DefTotalTurnovers - TotalTurnovers)\n\nThe linear model code we used before is pretty straight forward. Its field is predicted by field. Here’s a simple linear model that looks at predicting a team’s point differential by looking at their net yards.\n\nyards <- lm(Differential ~ NetYards, data=logs)\nsummary(yards)\n\n\nCall:\nlm(formula = Differential ~ NetYards, data = logs)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-52.037  -8.743  -0.002   8.750  64.480 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept) 0.491540   0.105212   4.672 3.01e-06 ***\nNetYards    0.104609   0.000588 177.899  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 13.12 on 15635 degrees of freedom\nMultiple R-squared:  0.6693,    Adjusted R-squared:  0.6693 \nF-statistic: 3.165e+04 on 1 and 15635 DF,  p-value: < 2.2e-16\n\n\nRemember: There’s a lot here, but only some of it we care about. What is the Adjusted R-squared value? What’s the p-value and is it less than .05? In this case, we can predict 67 percent of the difference in differential with the net yardage in the game.\nTo add more predictors to this mix, we merely add them. But it’s not that simple, as you’ll see in a moment. So first, let’s look at adding how well the other team shot to our prediction model:\n\nmodel1 <- lm(Differential ~ NetYards + TurnoverMargin, data=logs)\nsummary(model1)\n\n\nCall:\nlm(formula = Differential ~ NetYards + TurnoverMargin, data = logs)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-39.027  -6.995  -0.026   6.926  40.812 \n\nCoefficients:\n                Estimate Std. Error t value Pr(>|t|)    \n(Intercept)    0.4605936  0.0846094   5.444  5.3e-08 ***\nNetYards       0.0965770  0.0004808 200.872  < 2e-16 ***\nTurnoverMargin 4.1989070  0.0454293  92.427  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 10.55 on 15634 degrees of freedom\nMultiple R-squared:  0.7862,    Adjusted R-squared:  0.7861 \nF-statistic: 2.874e+04 on 2 and 15634 DF,  p-value: < 2.2e-16\n\n\nFirst things first: What is the adjusted R-squared?\nSecond: what is the p-value and is it less than .05?\nThird: Compare the residual standard error. We went from 13.12 to 10.55. The meaning of this is both really opaque and also simple – by adding data, we reduced the amount of error in our model. Residual standard error is the total distance between what our model would predict and what we actually have in the data. So lots of residual error means the distance between reality and our model is wider. So the width of our predictive range in this example shrank while we improved the amount of the difference we could predict. That’s good, and not always going to be the case.\nOne of the more difficult things to understand about multiple regression is the issue of multicollinearity. What that means is that there is significant correlation overlap between two variables – the two are related to each other as well as to the target output – and all you are doing by adding both of them is adding error with no real value to the R-squared. In pure statistics, we don’t want any multicollinearity at all. Violating that assumption limits the applicability of what you are doing. So if we have some multicollinearity, it limits our scope of application to college football We can’t say this will work for every football league and level everywhere. What we need to do is see how correlated each value is to each other and throw out ones that are highly co-correlated.\nSo to find those, we have to create a correlation matrix that shows us how each value is correlated to our outcome variable, but also with each other. We can do that in the Hmisc library. We install that in the console with install.packages(\"Hmisc\")\n\nlibrary(Hmisc)\n\nWe can pass in every numeric value to the Hmisc library and get a correlation matrix out of it, but since we have a large number of values – and many of them character values – we should strip that down and reorder them. So that’s what I’m doing here. I’m saying give me differential first, and then columns 9-24, and then 26-41. Why the skip? There’s a blank column in the middle of the data – a remnant of the scraper I used.\n\nsimplelogs <- logs %>% select_if(is.numeric) %>% select(-Game) %>% select(Differential, NetYards, TurnoverMargin, everything())\n\nBefore we proceed, what we’re looking to do is follow the Differential column down, looking for correlation values near 1 or -1. Correlations go from -1, meaning perfect negative correlation, to 0, meaning no correlation, to 1, meaning perfect positive correlation. So we’re looking for numbers near 1 or -1 for their predictive value. BUT: We then need to see if that value is also highly correlated with something else. If it is, we have a decision to make.\nWe get our correlation matrix like this:\n\ncormatrix <- rcorr(as.matrix(simplelogs))\n\ncormatrix$r\n\n                  Differential      NetYards TurnoverMargin  PassingCmp\nDifferential       1.000000000  0.8181275628   0.4840557093  0.03073777\nNetYards           0.818127563  1.0000000000   0.1807370954  0.19266394\nTurnoverMargin     0.484055709  0.1807370954   1.0000000000 -0.09282027\nPassingCmp         0.030737767  0.1926639446  -0.0928202705  1.00000000\nPassingAtt        -0.197299921 -0.0070622350  -0.1947038338  0.88591513\nPassingPct         0.424083501  0.4227014856   0.1571061824  0.50690125\nPassingYds         0.222843006  0.3660930734  -0.0261683457  0.80648042\nPassingTD          0.415721757  0.3777901574   0.1460542252  0.42193664\nRushingAtt         0.366147066  0.4164286631   0.1949661739 -0.36957114\nRushingYds         0.529414027  0.5514994757   0.1964807729 -0.32698768\nRushingAvg         0.493052056  0.4889672815   0.1515509720 -0.19481231\nRushingTD          0.575447906  0.4726991812   0.2628640231 -0.13360363\nOffensivePlays     0.148784802  0.3853154462  -0.0099116497  0.53269592\nOffensiveYards     0.589358113  0.7222177436   0.1307277553  0.39910909\nOffenseAvg         0.612777821  0.6272790895   0.1638749970  0.15122077\nFirstDownPass      0.176883748  0.3295436697  -0.0525717793  0.85819221\nFirstDownRush      0.461030176  0.5134412933   0.1445016590 -0.24630019\nFirstDownPen      -0.005804627 -0.0143821648  -0.0209905463  0.15735051\nFirstDownTotal     0.465369351  0.6158283311   0.0606623859  0.48945804\nPenalties         -0.014256447  0.0643018743   0.0251221670  0.13399082\nPenaltyYds         0.017823806  0.0925787516   0.0380337438  0.12543433\nFumbles           -0.144016227 -0.0001408652  -0.4542268044  0.01729726\nInterceptions     -0.347760026 -0.1826426810  -0.5660989685  0.09967713\nTotalTurnovers    -0.352523780 -0.1356792148  -0.7178615994  0.08532972\nTeamScore          0.781082750  0.6370391683   0.3772962403  0.18279290\nOpponentScore     -0.769676830 -0.6317245372  -0.3733755376  0.13868761\nDefPassingCmp     -0.064368101 -0.2225621593   0.0832963630  0.08362273\nDefPassingAtt      0.150903703 -0.0348030417   0.1826650975  0.07570845\nDefPassingPct     -0.420540317 -0.4218804949  -0.1551631995  0.03771812\nDefPassingYds     -0.257008122 -0.3977892433   0.0176164754  0.12705236\nDefPassingTD      -0.419326071 -0.3806220291  -0.1482026365  0.11209162\nDefRushingAtt     -0.364679806 -0.4151045731  -0.1934738938 -0.03529580\nDefRushingYds     -0.523353173 -0.5475061467  -0.1947469290  0.01889179\nDefRushingAvg     -0.486174349 -0.4868837846  -0.1472444819  0.04932196\nDefRushingTD      -0.561206330 -0.4637324675  -0.2585300201  0.06209874\nDefPlays          -0.190441765 -0.4206279645   0.0002203222  0.04186685\nDefYards          -0.598650533 -0.7299107656  -0.1317280381  0.11628312\nDefAvg            -0.618524672 -0.6394885894  -0.1614519054  0.10891950\nDefFirstDownPass  -0.216613706 -0.3658024956   0.0432422149  0.09125740\nDefFirstDownRush  -0.458561561 -0.5132897068  -0.1448412511 -0.01936969\nDefFirstDownPen   -0.021033906 -0.0094405902   0.0143978565  0.05194686\nDefFirstDownTotal -0.486573031 -0.6326931830  -0.0664564117  0.06456859\nDefPenalties       0.012883784 -0.0645926626  -0.0308257058  0.09792526\nDefPenaltyYds     -0.029196596 -0.1012747086  -0.0466939529  0.10848364\nDefFumbles         0.150569794  0.0017932206   0.4609183161 -0.04082950\nDefInterceptions   0.332705732  0.1663340665   0.5703875962 -0.02976917\nDefTotalTurnovers  0.345532435  0.1249995913   0.7241396459 -0.04869267\nSeason            -0.003878385 -0.0017905921  -0.0029299671 -0.02961025\n                    PassingAtt  PassingPct   PassingYds    PassingTD\nDifferential      -0.197299921  0.42408350  0.222843006  0.415721757\nNetYards          -0.007062235  0.42270149  0.366093073  0.377790157\nTurnoverMargin    -0.194703834  0.15710618 -0.026168346  0.146054225\nPassingCmp         0.885915129  0.50690125  0.806480418  0.421936640\nPassingAtt         1.000000000  0.09284450  0.687316800  0.272470208\nPassingPct         0.092844501  1.00000000  0.474237807  0.394851959\nPassingYds         0.687316800  0.47423781  1.000000000  0.627995863\nPassingTD          0.272470208  0.39485196  0.627995863  1.000000000\nRushingAtt        -0.467721623  0.03584624 -0.263550556 -0.059372629\nRushingYds        -0.450048289  0.10423452 -0.200749749  0.066534624\nRushingAvg        -0.303601875  0.13429002 -0.082915406  0.150662902\nRushingTD         -0.292721685  0.24141021  0.010666008 -0.029752708\nOffensivePlays     0.553660940  0.12603088  0.435111936  0.214985872\nOffensiveYards     0.207664639  0.46374173  0.653110800  0.559034001\nOffenseAvg        -0.083467058  0.47870518  0.504628728  0.524498271\nFirstDownPass      0.746264311  0.47014196  0.883628794  0.521347879\nFirstDownRush     -0.367223327  0.12262166 -0.161794624  0.067316306\nFirstDownPen       0.196989487 -0.01293930  0.128752737  0.102509961\nFirstDownTotal     0.327548464  0.43305347  0.563278812  0.456785235\nPenalties          0.141719302  0.03476302  0.151532040  0.082566511\nPenaltyYds         0.119437753  0.05617415  0.151137509  0.100407689\nFumbles            0.027288146 -0.01805908  0.008760696 -0.048224087\nInterceptions      0.255312890 -0.23653595  0.018058261 -0.114595347\nTotalTurnovers     0.207413810 -0.18742681  0.019145808 -0.116667828\nTeamScore         -0.036371904  0.44813841  0.430680364  0.618452463\nOpponentScore      0.272233697 -0.20691564  0.090860563 -0.019643341\nDefPassingCmp      0.083282335  0.02282149  0.126240421  0.091787361\nDefPassingAtt      0.057197756  0.05759184  0.144626108  0.144168720\nDefPassingPct      0.078046303 -0.07302812 -0.001592122 -0.081479268\nDefPassingYds      0.156063755 -0.02148430  0.154868859  0.075356141\nDefPassingTD       0.171041258 -0.08319470  0.097949467  0.034306947\nDefRushingAtt      0.084456819 -0.21399772 -0.036681379 -0.050879469\nDefRushingYds      0.120099976 -0.17973763 -0.010091544 -0.071419629\nDefRushingAvg      0.114820128 -0.11525287  0.008788627 -0.065807440\nDefRushingTD       0.156005806 -0.15523374  0.028539434 -0.033296697\nDefPlays           0.135037741 -0.14233101  0.108588070  0.094924415\nDefYards           0.215421076 -0.15193326  0.116931355  0.007072996\nDefAvg             0.175803966 -0.10697922  0.065890684 -0.058980036\nDefFirstDownPass   0.108808477 -0.01049305  0.122699748  0.065231601\nDefFirstDownRush   0.062733115 -0.15464608 -0.034057239 -0.067986273\nDefFirstDownPen    0.049652307  0.02705658  0.079021185  0.073129558\nDefFirstDownTotal  0.134220950 -0.10994466  0.083154570  0.016271698\nDefPenalties       0.144504901 -0.04312251  0.092384684  0.087036309\nDefPenaltyYds      0.163061597 -0.05395524  0.092101718  0.087050251\nDefFumbles        -0.035257824 -0.01766087 -0.037626266  0.043608120\nDefInterceptions  -0.068603306  0.06891426  0.007865801  0.088272589\nDefTotalTurnovers -0.073984074  0.03983035 -0.018592363  0.094053467\nSeason            -0.041775426  0.01257247 -0.005156032  0.007905151\n                    RushingAtt   RushingYds   RushingAvg     RushingTD\nDifferential       0.366147066  0.529414027  0.493052056  0.5754479058\nNetYards           0.416428663  0.551499476  0.488967281  0.4726991812\nTurnoverMargin     0.194966174  0.196480773  0.151550972  0.2628640231\nPassingCmp        -0.369571144 -0.326987677 -0.194812315 -0.1336036277\nPassingAtt        -0.467721623 -0.450048289 -0.303601875 -0.2927216853\nPassingPct         0.035846245  0.104234516  0.134290025  0.2414102074\nPassingYds        -0.263550556 -0.200749749 -0.082915406  0.0106660076\nPassingTD         -0.059372629  0.066534624  0.150662902 -0.0297527078\nRushingAtt         1.000000000  0.736306305  0.363907545  0.4905949788\nRushingYds         0.736306305  1.000000000  0.871582822  0.6954129998\nRushingAvg         0.363907545  0.871582822  1.000000000  0.6069527694\nRushingTD          0.490594979  0.695413000  0.606952769  1.0000000000\nOffensivePlays     0.477081505  0.246215936  0.040976244  0.1711530409\nOffensiveYards     0.356138469  0.610734606  0.606712634  0.5461745292\nOffenseAvg         0.137726057  0.576803443  0.708145937  0.5446857223\nFirstDownPass     -0.235462443 -0.195913314 -0.092668213 -0.0036037221\nFirstDownRush      0.788585331  0.868855405  0.659384817  0.5950676324\nFirstDownPen      -0.002610866 -0.066896523 -0.081029439 -0.0008771748\nFirstDownTotal     0.404462488  0.474548072  0.392289028  0.4319428611\nPenalties         -0.025070945 -0.003616931  0.018103053 -0.0256747928\nPenaltyYds        -0.002371028  0.033291751  0.054543977  0.0088896048\nFumbles            0.025073245 -0.027999174 -0.057804419 -0.0585646763\nInterceptions     -0.194010111 -0.216607533 -0.172826484 -0.2331549445\nTotalTurnovers    -0.127597560 -0.179146307 -0.166173466 -0.2114571250\nTeamScore          0.343515192  0.571464139  0.560294996  0.6983293091\nOpponentScore     -0.223000591 -0.245986897 -0.200380832 -0.1884700826\nDefPassingCmp     -0.044444025  0.002547929  0.033539228  0.0431451577\nDefPassingAtt      0.074067555  0.099274619  0.093839056  0.1309836648\nDefPassingPct     -0.216525965 -0.181038883 -0.115973736 -0.1529595683\nDefPassingYds     -0.049850048 -0.030243336 -0.009960610  0.0054702203\nDefPassingTD      -0.058851496 -0.078558079 -0.070930632 -0.0440736028\nDefRushingAtt     -0.410601794 -0.276558525 -0.117527616 -0.1963830525\nDefRushingYds     -0.279191271 -0.224659772 -0.131223074 -0.1962937077\nDefRushingAvg     -0.121473758 -0.133636020 -0.107575642 -0.1510025421\nDefRushingTD      -0.194642061 -0.192161132 -0.145173638 -0.1571341498\nDefPlays          -0.309000147 -0.159388487 -0.016763451 -0.0534880654\nDefYards          -0.249219953 -0.192608428 -0.106308789 -0.1426505149\nDefAvg            -0.119327650 -0.146094396 -0.126851539 -0.1516926770\nDefFirstDownPass  -0.089637192 -0.047185560 -0.008268549 -0.0067868508\nDefFirstDownRush  -0.317393880 -0.219849854 -0.099857008 -0.1738702217\nDefFirstDownPen   -0.047875380 -0.006920788  0.026459465  0.0113604598\nDefFirstDownTotal -0.301802428 -0.193740061 -0.073461199 -0.1260218576\nDefPenalties      -0.044358538 -0.066428568 -0.057532616  0.0015101936\nDefPenaltyYds     -0.060502619 -0.088477801 -0.076887164 -0.0232505609\nDefFumbles         0.071526298  0.023852046 -0.006854675  0.0815729450\nDefInterceptions   0.143658098  0.119596138  0.077039894  0.1542031901\nDefTotalTurnovers  0.153427918  0.104536716  0.052901642  0.1678066591\nSeason            -0.007214300  0.014375807  0.028912307  0.0107538721\n                  OffensivePlays OffensiveYards  OffenseAvg FirstDownPass\nDifferential        0.1487848016    0.589358113  0.61277782   0.176883748\nNetYards            0.3853154462    0.722217744  0.62727909   0.329543670\nTurnoverMargin     -0.0099116497    0.130727755  0.16387500  -0.052571779\nPassingCmp          0.5326959178    0.399109095  0.15122077   0.858192210\nPassingAtt          0.5536609399    0.207664639 -0.08346706   0.746264311\nPassingPct          0.1260308782    0.463741727  0.47870518   0.470141964\nPassingYds          0.4351119365    0.653110800  0.50462873   0.883628794\nPassingTD           0.2149858720    0.559034001  0.52449827   0.521347879\nRushingAtt          0.4770815054    0.356138469  0.13772606  -0.235462443\nRushingYds          0.2462159365    0.610734606  0.57680344  -0.195913314\nRushingAvg          0.0409762435    0.606712634  0.70814594  -0.092668213\nRushingTD           0.1711530409    0.546174529  0.54468572  -0.003603722\nOffensivePlays      1.0000000000    0.542021246  0.04676508   0.520188039\nOffensiveYards      0.5420212464    1.000000000  0.85375467   0.562787666\nOffenseAvg          0.0467650750    0.853754671  1.00000000   0.349866912\nFirstDownPass       0.5201880394    0.562787666  0.34986691   1.000000000\nFirstDownRush       0.3778253944    0.540847053  0.41345444  -0.176523843\nFirstDownPen        0.1934115743    0.052358639 -0.04850825   0.127557487\nFirstDownTotal      0.7067530216    0.822117691  0.54732219   0.632564456\nPenalties           0.1172943693    0.119685962  0.06692599   0.095784956\nPenaltyYds          0.1165259788    0.147897427  0.10182225   0.096127752\nFumbles             0.0507559795   -0.014562140 -0.04861711  -0.002757013\nInterceptions       0.0710774491   -0.152841015 -0.22079174   0.048407099\nTotalTurnovers      0.0860207172   -0.123004485 -0.19576146   0.034129166\nTeamScore           0.2874768258    0.789855667  0.76082031   0.347919945\nOpponentScore       0.0605888810   -0.116705845 -0.18312113   0.078320759\nDefPassingCmp       0.0409367670    0.104008426  0.09430449   0.091479428\nDefPassingAtt       0.1266557361    0.193638994  0.15023552   0.098615011\nDefPassingPct      -0.1264265905   -0.141251239 -0.09631370   0.008891843\nDefPassingYds       0.1082118124    0.101800906  0.04800482   0.124829238\nDefPassingTD        0.1146236054    0.018446294 -0.05356083   0.090411566\nDefRushingAtt      -0.3028703700   -0.243428558 -0.10790049  -0.078374674\nDefRushingYds      -0.1436213054   -0.181818592 -0.13406393  -0.026578333\nDefRushingAvg      -0.0002813871   -0.096198143 -0.11815845   0.012220090\nDefRushingTD       -0.0282613699   -0.125472152 -0.13806324   0.018812829\nDefPlays           -0.1568527102   -0.035436423  0.04784943   0.024384116\nDefYards           -0.0206038075   -0.054371598 -0.06184149   0.080433442\nDefAvg              0.0623776236   -0.059674311 -0.11514865   0.073395293\nDefFirstDownPass    0.0237393570    0.062702616  0.05343053   0.094488113\nDefFirstDownRush   -0.2366550850   -0.197471767 -0.09582167  -0.047869961\nDefFirstDownPen     0.0042647737    0.058522280  0.06490374   0.059860743\nDefFirstDownTotal  -0.1508835454   -0.082547789 -0.01541490   0.043901206\nDefPenalties        0.1018923824    0.023324431 -0.02935120   0.074798276\nDefPenaltyYds       0.1051336326    0.006051685 -0.05191966   0.077240030\nDefFumbles          0.0323306822   -0.011975338 -0.02866508  -0.048478203\nDefInterceptions    0.0671333246    0.098805501  0.08046452  -0.013627929\nDefTotalTurnovers   0.0709877178    0.065778716  0.04127952  -0.041645531\nSeason             -0.0483352540    0.006944910  0.03865811  -0.020261494\n                  FirstDownRush  FirstDownPen FirstDownTotal    Penalties\nDifferential        0.461030176 -0.0058046267    0.465369351 -0.014256447\nNetYards            0.513441293 -0.0143821648    0.615828331  0.064301874\nTurnoverMargin      0.144501659 -0.0209905463    0.060662386  0.025122167\nPassingCmp         -0.246300190  0.1573505122    0.489458037  0.133990822\nPassingAtt         -0.367223327  0.1969894869    0.327548464  0.141719302\nPassingPct          0.122621659 -0.0129393017    0.433053465  0.034763023\nPassingYds         -0.161794624  0.1287527369    0.563278812  0.151532040\nPassingTD           0.067316306  0.1025099605    0.456785235  0.082566511\nRushingAtt          0.788585331 -0.0026108661    0.404462488 -0.025070945\nRushingYds          0.868855405 -0.0668965229    0.474548072 -0.003616931\nRushingAvg          0.659384817 -0.0810294393    0.392289028  0.018103053\nRushingTD           0.595067632 -0.0008771748    0.431942861 -0.025674793\nOffensivePlays      0.377825394  0.1934115743    0.706753022  0.117294369\nOffensiveYards      0.540847053  0.0523586393    0.822117691  0.119685962\nOffenseAvg          0.413454436 -0.0485082548    0.547322187  0.066925991\nFirstDownPass      -0.176523843  0.1275574870    0.632564456  0.095784956\nFirstDownRush       1.000000000 -0.0641318871    0.578322414 -0.036954794\nFirstDownPen       -0.064131887  1.0000000000    0.270852432  0.131866046\nFirstDownTotal      0.578322414  0.2708524323    1.000000000  0.073158288\nPenalties          -0.036954794  0.1318660457    0.073158288  1.000000000\nPenaltyYds         -0.003914431  0.1332759144    0.098075714  0.903285428\nFumbles            -0.012883931 -0.0005970883   -0.010768846 -0.005811086\nInterceptions      -0.182588128  0.0214785180   -0.091296852  0.027221860\nTotalTurnovers     -0.143988031  0.0155536128   -0.074831076  0.016401015\nTeamScore           0.492276701  0.0696128982    0.632633399  0.045537547\nOpponentScore      -0.219705545  0.0802776212   -0.083005629  0.068917067\nDefPassingCmp      -0.034992273  0.0554175061    0.054894754  0.102277348\nDefPassingAtt       0.042935592  0.0507587613    0.115203249  0.148355604\nDefPassingPct      -0.156712150  0.0363078343   -0.098245000 -0.036921573\nDefPassingYds      -0.052773711  0.0859542906    0.073330039  0.096552884\nDefPassingTD       -0.072355990  0.0824503851    0.033483811  0.089465447\nDefRushingAtt      -0.315396095 -0.0442323619   -0.299783148 -0.045486469\nDefRushingYds      -0.219337776  0.0045549623   -0.180908454 -0.069631984\nDefRushingAvg      -0.102028419  0.0399737370   -0.058749721 -0.060058013\nDefRushingTD       -0.169326396  0.0293993556   -0.103441861  0.001818613\nDefPlays           -0.251126994  0.0089294743   -0.165281594  0.104074746\nDefYards           -0.206732624  0.0725064694   -0.076576066  0.025451134\nDefAvg             -0.107389497  0.0814999118   -0.006508286 -0.026730436\nDefFirstDownPass   -0.068035944  0.0654406197    0.030363996  0.078611359\nDefFirstDownRush   -0.224486076 -0.0169325853   -0.212823800 -0.080300783\nDefFirstDownPen    -0.027665937  0.0714879140    0.034910335  0.544576802\nDefFirstDownTotal  -0.224068251  0.0465297619   -0.122623874  0.124876699\nDefPenalties       -0.077839183  0.5419393396    0.124142352  0.190229864\nDefPenaltyYds      -0.098039476  0.6579654799    0.137890520  0.193152980\nDefFumbles          0.001209747 -0.0221372452   -0.039128209  0.017532852\nDefInterceptions    0.085931345 -0.0004502855    0.051527754  0.054952612\nDefTotalTurnovers   0.064761271 -0.0147193348    0.012937703  0.052304098\nSeason              0.007784693  0.0673425838    0.004102951  0.030216760\n                    PenaltyYds       Fumbles Interceptions TotalTurnovers\nDifferential       0.017823806 -0.1440162271 -0.3477600256   -0.352523780\nNetYards           0.092578752 -0.0001408652 -0.1826426810   -0.135679215\nTurnoverMargin     0.038033744 -0.4542268044 -0.5660989685   -0.717861599\nPassingCmp         0.125434327  0.0172972617  0.0996771292    0.085329720\nPassingAtt         0.119437753  0.0272881459  0.2553128896    0.207413810\nPassingPct         0.056174147 -0.0180590785 -0.2365359526   -0.187426813\nPassingYds         0.151137509  0.0087606959  0.0180582613    0.019145808\nPassingTD          0.100407689 -0.0482240874 -0.1145953471   -0.116667828\nRushingAtt        -0.002371028  0.0250732455 -0.1940101106   -0.127597560\nRushingYds         0.033291751 -0.0279991738 -0.2166075334   -0.179146307\nRushingAvg         0.054543977 -0.0578044186 -0.1728264839   -0.166173466\nRushingTD          0.008889605 -0.0585646763 -0.2331549445   -0.211457125\nOffensivePlays     0.116525979  0.0507559795  0.0710774491    0.086020717\nOffensiveYards     0.147897427 -0.0145621396 -0.1528410146   -0.123004485\nOffenseAvg         0.101822250 -0.0486171080 -0.2207917361   -0.195761462\nFirstDownPass      0.096127752 -0.0027570132  0.0484070993    0.034129166\nFirstDownRush     -0.003914431 -0.0128839307 -0.1825881284   -0.143988031\nFirstDownPen       0.133275914 -0.0005970883  0.0214785180    0.015553613\nFirstDownTotal     0.098075714 -0.0107688456 -0.0912968519   -0.074831076\nPenalties          0.903285428 -0.0058110858  0.0272218603    0.016401015\nPenaltyYds         1.000000000 -0.0144163014  0.0153355568    0.001938904\nFumbles           -0.014416301  1.0000000000  0.0201545303    0.670166444\nInterceptions      0.015335557  0.0201545303  1.0000000000    0.755566974\nTotalTurnovers     0.001938904  0.6701664437  0.7555669742    1.000000000\nTeamScore          0.081410971 -0.0921161959 -0.2770189389   -0.266003178\nOpponentScore      0.055284341  0.1316753089  0.2621523615    0.280886110\nDefPassingCmp      0.111824300 -0.0396516151 -0.0184488090   -0.039675604\nDefPassingAtt      0.163084881 -0.0310875854 -0.0594734620   -0.064519542\nDefPassingPct     -0.043214101 -0.0228701976  0.0795143505    0.044036301\nDefPassingYds      0.096448222 -0.0380174026  0.0223809719   -0.008294398\nDefPassingTD       0.092652431  0.0393486809  0.0992006245    0.099424170\nDefRushingAtt     -0.059538323  0.0712060666  0.1459827853    0.155026554\nDefRushingYds     -0.086795492  0.0218555987  0.1263274699    0.108100554\nDefRushingAvg     -0.074107080 -0.0099713949  0.0845291086    0.056210433\nDefRushingTD      -0.016763007  0.0762748212  0.1619374893    0.170191785\nDefPlays           0.105533957  0.0355836593  0.0771562026    0.080592378\nDefYards           0.012509457 -0.0141877540  0.1126254813    0.074312956\nDefAvg            -0.043503720 -0.0339135825  0.0944826173    0.047911401\nDefFirstDownPass   0.080400150 -0.0495977245  0.0003453417   -0.032240284\nDefFirstDownRush  -0.095330353  0.0016592286  0.0925101726    0.069763137\nDefFirstDownPen    0.655817268 -0.0192548816  0.0058728967   -0.008256072\nDefFirstDownTotal  0.140712772 -0.0383893820  0.0659276055    0.023789229\nDefPenalties       0.193026624  0.0220735263  0.0534219028    0.054121045\nDefPenaltyYds      0.197397916  0.0219713528  0.0641562618    0.062022877\nDefFumbles         0.016166609  0.0241064421 -0.0126596565    0.006396606\nDefInterceptions   0.061793344 -0.0049987283 -0.0749491840   -0.058914588\nDefTotalTurnovers  0.056509226  0.0119421103 -0.0640249366   -0.039705132\nSeason             0.044437631 -0.0772525165 -0.0412647622   -0.081249572\n                     TeamScore OpponentScore DefPassingCmp DefPassingAtt\nDifferential       0.781082750  -0.769676830  -0.064368101   0.150903703\nNetYards           0.637039168  -0.631724537  -0.222562159  -0.034803042\nTurnoverMargin     0.377296240  -0.373375538   0.083296363   0.182665098\nPassingCmp         0.182792900   0.138687606   0.083622727   0.075708445\nPassingAtt        -0.036371904   0.272233697   0.083282335   0.057197756\nPassingPct         0.448138414  -0.206915640   0.022821493   0.057591843\nPassingYds         0.430680364   0.090860563   0.126240421   0.144626108\nPassingTD          0.618452463  -0.019643341   0.091787361   0.144168720\nRushingAtt         0.343515192  -0.223000591  -0.044444025   0.074067555\nRushingYds         0.571464139  -0.245986897   0.002547929   0.099274619\nRushingAvg         0.560294996  -0.200380832   0.033539228   0.093839056\nRushingTD          0.698329309  -0.188470083   0.043145158   0.130983665\nOffensivePlays     0.287476826   0.060588881   0.040936767   0.126655736\nOffensiveYards     0.789855667  -0.116705845   0.104008426   0.193638994\nOffenseAvg         0.760820308  -0.183121129   0.094304486   0.150235522\nFirstDownPass      0.347919945   0.078320759   0.091479428   0.098615011\nFirstDownRush      0.492276701  -0.219705545  -0.034992273   0.042935592\nFirstDownPen       0.069612898   0.080277621   0.055417506   0.050758761\nFirstDownTotal     0.632633399  -0.083005629   0.054894754   0.115203249\nPenalties          0.045537547   0.068917067   0.102277348   0.148355604\nPenaltyYds         0.081410971   0.055284341   0.111824300   0.163084881\nFumbles           -0.092116196   0.131675309  -0.039651615  -0.031087585\nInterceptions     -0.277018939   0.262152361  -0.018448809  -0.059473462\nTotalTurnovers    -0.266003178   0.280886110  -0.039675604  -0.064519542\nTeamScore          1.000000000  -0.202525723   0.110705692   0.235782140\nOpponentScore     -0.202525723   1.000000000   0.214136044   0.004411633\nDefPassingCmp      0.110705692   0.214136044   1.000000000   0.888543487\nDefPassingAtt      0.235782140   0.004411633   0.888543487   1.000000000\nDefPassingPct     -0.205498355   0.449432186   0.527671053   0.123692569\nDefPassingYds      0.056556533   0.460885709   0.810942021   0.696149740\nDefPassingTD      -0.027035642   0.629978452   0.431620334   0.288631775\nDefRushingAtt     -0.220177461   0.346803764  -0.358119934  -0.457251512\nDefRushingYds     -0.246346085   0.568892367  -0.304072102  -0.424485541\nDefRushingAvg     -0.202750810   0.555158533  -0.170796334  -0.274757828\nDefRushingTD      -0.184227178   0.691768961  -0.108176871  -0.261057894\nDefPlays           0.027788773   0.327078018   0.543593841   0.561334735\nDefYards          -0.139080134   0.796651650   0.424087944   0.241608071\nDefAvg            -0.199605451   0.765936783   0.189854658  -0.036469447\nDefFirstDownPass   0.040991911   0.381622228   0.858384763   0.750459859\nDefFirstDownRush  -0.221902704   0.492272660  -0.220411172  -0.338791429\nDefFirstDownPen    0.060090496   0.094425396   0.166428218   0.201877092\nDefFirstDownTotal -0.112644611   0.647911274   0.507516311   0.352988503\nDefPenalties       0.066541317   0.047828490   0.129287516   0.138517178\nDefPenaltyYds      0.044784232   0.091577186   0.124971742   0.119771459\nDefFumbles         0.141038879  -0.091933095   0.015619722   0.025595221\nDefInterceptions   0.250332113  -0.265828443   0.094157944   0.243961951\nDefTotalTurnovers  0.278013024  -0.257642494   0.080249068   0.198258751\nSeason             0.005977688   0.012194161  -0.026955739  -0.040678279\n                  DefPassingPct DefPassingYds DefPassingTD DefRushingAtt\nDifferential       -0.420540317  -0.257008122  -0.41932607 -0.3646798064\nNetYards           -0.421880495  -0.397789243  -0.38062203 -0.4151045731\nTurnoverMargin     -0.155163199   0.017616475  -0.14820264 -0.1934738938\nPassingCmp          0.037718119   0.127052362   0.11209162 -0.0352958037\nPassingAtt          0.078046303   0.156063755   0.17104126  0.0844568187\nPassingPct         -0.073028119  -0.021484298  -0.08319470 -0.2139977160\nPassingYds         -0.001592122   0.154868859   0.09794947 -0.0366813791\nPassingTD          -0.081479268   0.075356141   0.03430695 -0.0508794692\nRushingAtt         -0.216525965  -0.049850048  -0.05885150 -0.4106017942\nRushingYds         -0.181038883  -0.030243336  -0.07855808 -0.2765585249\nRushingAvg         -0.115973736  -0.009960610  -0.07093063 -0.1175276158\nRushingTD          -0.152959568   0.005470220  -0.04407360 -0.1963830525\nOffensivePlays     -0.126426591   0.108211812   0.11462361 -0.3028703700\nOffensiveYards     -0.141251239   0.101800906   0.01844629 -0.2434285578\nOffenseAvg         -0.096313705   0.048004815  -0.05356083 -0.1079004931\nFirstDownPass       0.008891843   0.124829238   0.09041157 -0.0783746739\nFirstDownRush      -0.156712150  -0.052773711  -0.07235599 -0.3153960952\nFirstDownPen        0.036307834   0.085954291   0.08245039 -0.0442323619\nFirstDownTotal     -0.098245000   0.073330039   0.03348381 -0.2997831484\nPenalties          -0.036921573   0.096552884   0.08946545 -0.0454864693\nPenaltyYds         -0.043214101   0.096448222   0.09265243 -0.0595383233\nFumbles            -0.022870198  -0.038017403   0.03934868  0.0712060666\nInterceptions       0.079514351   0.022380972   0.09920062  0.1459827853\nTotalTurnovers      0.044036301  -0.008294398   0.09942417  0.1550265541\nTeamScore          -0.205498355   0.056556533  -0.02703564 -0.2201774606\nOpponentScore       0.449432186   0.460885709   0.62997845  0.3468037640\nDefPassingCmp       0.527671053   0.810942021   0.43162033 -0.3581199341\nDefPassingAtt       0.123692569   0.696149740   0.28863177 -0.4572515121\nDefPassingPct       1.000000000   0.488760837   0.39639354  0.0331292932\nDefPassingYds       0.488760837   1.000000000   0.63367353 -0.2423595169\nDefPassingTD        0.396393545   0.633673530   1.00000000 -0.0474443539\nDefRushingAtt       0.033129293  -0.242359517  -0.04744435  1.0000000000\nDefRushingYds       0.102409466  -0.172170419   0.07787202  0.7388859674\nDefRushingAvg       0.132925774  -0.057537780   0.15745657  0.3716123675\nDefRushingTD        0.238512223   0.037663032  -0.01494787  0.4882259368\nDefPlays            0.152972481   0.461455249   0.24068270  0.4793345862\nDefYards            0.469533439   0.674872294   0.56771326  0.3586946169\nDefAvg              0.483634897   0.534826925   0.53426029  0.1511943269\nDefFirstDownPass    0.485612024   0.888573817   0.53252654 -0.2154397342\nDefFirstDownRush    0.123723099  -0.130107645   0.08005769  0.7886334156\nDefFirstDownPen     0.004343323   0.140761571   0.11532478  0.0003786557\nDefFirstDownTotal   0.442339376   0.587351491   0.47035076  0.4030160447\nDefPenalties        0.034741735   0.147217214   0.08072124 -0.0239812874\nDefPenaltyYds       0.059174472   0.152588988   0.10343742  0.0023722250\nDefFumbles         -0.018411263   0.006937136  -0.05044492  0.0258540797\nDefInterceptions   -0.224465746   0.016870842  -0.10939176 -0.1892748746\nDefTotalTurnovers  -0.179078808   0.017067747  -0.11421886 -0.1241144783\nSeason              0.018608445  -0.002118751   0.01139349 -0.0071839390\n                  DefRushingYds DefRushingAvg DefRushingTD      DefPlays\nDifferential       -0.523353173 -0.4861743491 -0.561206330 -0.1904417647\nNetYards           -0.547506147 -0.4868837846 -0.463732467 -0.4206279645\nTurnoverMargin     -0.194746929 -0.1472444819 -0.258530020  0.0002203222\nPassingCmp          0.018891792  0.0493219599  0.062098744  0.0418668527\nPassingAtt          0.120099976  0.1148201277  0.156005806  0.1350377412\nPassingPct         -0.179737625 -0.1152528734 -0.155233737 -0.1423310092\nPassingYds         -0.010091544  0.0087886271  0.028539434  0.1085880702\nPassingTD          -0.071419629 -0.0658074401 -0.033296697  0.0949244153\nRushingAtt         -0.279191271 -0.1214737584 -0.194642061 -0.3090001473\nRushingYds         -0.224659772 -0.1336360205 -0.192161132 -0.1593884873\nRushingAvg         -0.131223074 -0.1075756416 -0.145173638 -0.0167634507\nRushingTD          -0.196293708 -0.1510025421 -0.157134150 -0.0534880654\nOffensivePlays     -0.143621305 -0.0002813871 -0.028261370 -0.1568527102\nOffensiveYards     -0.181818592 -0.0961981429 -0.125472152 -0.0354364232\nOffenseAvg         -0.134063926 -0.1181584507 -0.138063242  0.0478494345\nFirstDownPass      -0.026578333  0.0122200897  0.018812829  0.0243841160\nFirstDownRush      -0.219337776 -0.1020284187 -0.169326396 -0.2511269941\nFirstDownPen        0.004554962  0.0399737370  0.029399356  0.0089294743\nFirstDownTotal     -0.180908454 -0.0587497213 -0.103441861 -0.1652815943\nPenalties          -0.069631984 -0.0600580126  0.001818613  0.1040747460\nPenaltyYds         -0.086795492 -0.0741070803 -0.016763007  0.1055339566\nFumbles             0.021855599 -0.0099713949  0.076274821  0.0355836593\nInterceptions       0.126327470  0.0845291086  0.161937489  0.0771562026\nTotalTurnovers      0.108100554  0.0562104328  0.170191785  0.0805923783\nTeamScore          -0.246346085 -0.2027508097 -0.184227178  0.0277887731\nOpponentScore       0.568892367  0.5551585335  0.691768961  0.3270780177\nDefPassingCmp      -0.304072102 -0.1707963335 -0.108176871  0.5435938415\nDefPassingAtt      -0.424485541 -0.2747578276 -0.261057894  0.5613347347\nDefPassingPct       0.102409466  0.1329257742  0.238512223  0.1529724814\nDefPassingYds      -0.172170419 -0.0575377802  0.037663032  0.4614552492\nDefPassingTD        0.077872022  0.1574565677 -0.014947867  0.2406827012\nDefRushingAtt       0.738885967  0.3716123675  0.488225937  0.4793345862\nDefRushingYds       1.000000000  0.8731067878  0.687728357  0.2686849660\nDefRushingAvg       0.873106788  1.0000000000  0.599341514  0.0746846902\nDefRushingTD        0.687728357  0.5993415139  1.000000000  0.1967054519\nDefPlays            0.268684966  0.0746846902  0.196705452  1.0000000000\nDefYards            0.610722051  0.6079490956  0.545467158  0.5722177961\nDefAvg              0.579784008  0.7047983062  0.542409453  0.1047905677\nDefFirstDownPass   -0.165825447 -0.0638229969  0.024875930  0.5401012405\nDefFirstDownRush    0.868275113  0.6624259285  0.587140211  0.3995445768\nDefFirstDownPen    -0.055648126 -0.0666170942  0.015985345  0.1995724141\nDefFirstDownTotal   0.480116194  0.4045866279  0.437004237  0.7233763713\nDefPenalties       -0.002724418  0.0191494801 -0.021159642  0.1143778424\nDefPenaltyYds       0.039415533  0.0605326372  0.018381317  0.1204025813\nDefFumbles         -0.026697792 -0.0543553971 -0.054016684  0.0493173209\nDefInterceptions   -0.208302928 -0.1616164572 -0.224805549  0.0646178779\nDefTotalTurnovers  -0.172427305 -0.1556441080 -0.202464353  0.0801523826\nSeason              0.014886088  0.0290101906  0.016506584 -0.0468280272\n                      DefYards       DefAvg DefFirstDownPass DefFirstDownRush\nDifferential      -0.598650533 -0.618524672    -0.2166137055     -0.458561561\nNetYards          -0.729910766 -0.639488589    -0.3658024956     -0.513289707\nTurnoverMargin    -0.131728038 -0.161451905     0.0432422149     -0.144841251\nPassingCmp         0.116283124  0.108919498     0.0912573991     -0.019369695\nPassingAtt         0.215421076  0.175803966     0.1088084774      0.062733115\nPassingPct        -0.151933256 -0.106979219    -0.0104930514     -0.154646080\nPassingYds         0.116931355  0.065890684     0.1226997484     -0.034057239\nPassingTD          0.007072996 -0.058980036     0.0652316014     -0.067986273\nRushingAtt        -0.249219953 -0.119327650    -0.0896371915     -0.317393880\nRushingYds        -0.192608428 -0.146094396    -0.0471855598     -0.219849854\nRushingAvg        -0.106308789 -0.126851539    -0.0082685486     -0.099857008\nRushingTD         -0.142650515 -0.151692677    -0.0067868508     -0.173870222\nOffensivePlays    -0.020603807  0.062377624     0.0237393570     -0.236655085\nOffensiveYards    -0.054371598 -0.059674311     0.0627026163     -0.197471767\nOffenseAvg        -0.061841494 -0.115148654     0.0534305279     -0.095821670\nFirstDownPass      0.080433442  0.073395293     0.0944881127     -0.047869961\nFirstDownRush     -0.206732624 -0.107389497    -0.0680359441     -0.224486076\nFirstDownPen       0.072506469  0.081499912     0.0654406197     -0.016932585\nFirstDownTotal    -0.076576066 -0.006508286     0.0303639958     -0.212823800\nPenalties          0.025451134 -0.026730436     0.0786113587     -0.080300783\nPenaltyYds         0.012509457 -0.043503720     0.0804001497     -0.095330353\nFumbles           -0.014187754 -0.033913583    -0.0495977245      0.001659229\nInterceptions      0.112625481  0.094482617     0.0003453417      0.092510173\nTotalTurnovers     0.074312956  0.047911401    -0.0322402835      0.069763137\nTeamScore         -0.139080134 -0.199605451     0.0409919112     -0.221902704\nOpponentScore      0.796651650  0.765936783     0.3816222280      0.492272660\nDefPassingCmp      0.424087944  0.189854658     0.8583847630     -0.220411172\nDefPassingAtt      0.241608071 -0.036469447     0.7504598590     -0.338791429\nDefPassingPct      0.469533439  0.483634897     0.4856120243      0.123723099\nDefPassingYds      0.674872294  0.534826925     0.8885738173     -0.130107645\nDefPassingTD       0.567713261  0.534260295     0.5325265422      0.080057690\nDefRushingAtt      0.358694617  0.151194327    -0.2154397342      0.788633416\nDefRushingYds      0.610722051  0.579784008    -0.1658254475      0.868275113\nDefRushingAvg      0.607949096  0.704798306    -0.0638229969      0.662425929\nDefRushingTD       0.545467158  0.542409453     0.0248759302      0.587140211\nDefPlays           0.572217796  0.104790568     0.5401012405      0.399544577\nDefYards           1.000000000  0.864412450     0.5900556453      0.545856277\nDefAvg             0.864412450  1.000000000     0.3897732165      0.423144636\nDefFirstDownPass   0.590055645  0.389773216     1.0000000000     -0.142358418\nDefFirstDownRush   0.545856277  0.423144636    -0.1423584180      1.000000000\nDefFirstDownPen    0.071463835 -0.025898592     0.1370785878     -0.052075270\nDefFirstDownTotal  0.831806916  0.575937633     0.6536349261      0.584292108\nDefPenalties       0.116299459  0.068348840     0.0919293080     -0.036048119\nDefPenaltyYds      0.152185476  0.109779006     0.0989940993      0.001915398\nDefFumbles        -0.014423469 -0.047271438    -0.0029199677     -0.011513894\nDefInterceptions  -0.142482499 -0.206229864     0.0430140097     -0.176356086\nDefTotalTurnovers -0.115449033 -0.184256082     0.0301262887     -0.138777101\nSeason             0.009448327  0.041806773    -0.0184299221      0.008887878\n                  DefFirstDownPen DefFirstDownTotal DefPenalties DefPenaltyYds\nDifferential        -0.0210339059      -0.486573031  0.012883784  -0.029196596\nNetYards            -0.0094405902      -0.632693183 -0.064592663  -0.101274709\nTurnoverMargin       0.0143978565      -0.066456412 -0.030825706  -0.046693953\nPassingCmp           0.0519468575       0.064568592  0.097925257   0.108483644\nPassingAtt           0.0496523070       0.134220950  0.144504901   0.163061597\nPassingPct           0.0270565789      -0.109944660 -0.043122514  -0.053955236\nPassingYds           0.0790211848       0.083154570  0.092384684   0.092101718\nPassingTD            0.0731295577       0.016271698  0.087036309   0.087050251\nRushingAtt          -0.0478753802      -0.301802428 -0.044358538  -0.060502619\nRushingYds          -0.0069207881      -0.193740061 -0.066428568  -0.088477801\nRushingAvg           0.0264594652      -0.073461199 -0.057532616  -0.076887164\nRushingTD            0.0113604598      -0.126021858  0.001510194  -0.023250561\nOffensivePlays       0.0042647737      -0.150883545  0.101892382   0.105133633\nOffensiveYards       0.0585222802      -0.082547789  0.023324431   0.006051685\nOffenseAvg           0.0649037363      -0.015414902 -0.029351199  -0.051919665\nFirstDownPass        0.0598607428       0.043901206  0.074798276   0.077240030\nFirstDownRush       -0.0276659372      -0.224068251 -0.077839183  -0.098039476\nFirstDownPen         0.0714879140       0.046529762  0.541939340   0.657965480\nFirstDownTotal       0.0349103351      -0.122623874  0.124142352   0.137890520\nPenalties            0.5445768017       0.124876699  0.190229864   0.193152980\nPenaltyYds           0.6558172682       0.140712772  0.193026624   0.197397916\nFumbles             -0.0192548816      -0.038389382  0.022073526   0.021971353\nInterceptions        0.0058728967       0.065927605  0.053421903   0.064156262\nTotalTurnovers      -0.0082560718       0.023789229  0.054121045   0.062022877\nTeamScore            0.0600904963      -0.112644611  0.066541317   0.044784232\nOpponentScore        0.0944253956       0.647911274  0.047828490   0.091577186\nDefPassingCmp        0.1664282181       0.507516311  0.129287516   0.124971742\nDefPassingAtt        0.2018770925       0.352988503  0.138517178   0.119771459\nDefPassingPct        0.0043433232       0.442339376  0.034741735   0.059174472\nDefPassingYds        0.1407615708       0.587351491  0.147217214   0.152588988\nDefPassingTD         0.1153247810       0.470350761  0.080721243   0.103437420\nDefRushingAtt        0.0003786557       0.403016045 -0.023981287   0.002372225\nDefRushingYds       -0.0556481262       0.480116194 -0.002724418   0.039415533\nDefRushingAvg       -0.0666170942       0.404586628  0.019149480   0.060532637\nDefRushingTD         0.0159853449       0.437004237 -0.021159642   0.018381317\nDefPlays             0.1995724141       0.723376371  0.114377842   0.120402581\nDefYards             0.0714638347       0.831806916  0.116299459   0.152185476\nDefAvg              -0.0258985916       0.575937633  0.068348840   0.109779006\nDefFirstDownPass     0.1370785878       0.653634926  0.091929308   0.098994099\nDefFirstDownRush    -0.0520752700       0.584292108 -0.036048119   0.001915398\nDefFirstDownPen      1.0000000000       0.282830498  0.131332338   0.134294140\nDefFirstDownTotal    0.2828304978       1.000000000  0.070174238   0.103037190\nDefPenalties         0.1313323378       0.070174238  1.000000000   0.900787598\nDefPenaltyYds        0.1342941401       0.103037190  0.900787598   1.000000000\nDefFumbles          -0.0030186847      -0.010305398 -0.008854950  -0.017511146\nDefInterceptions     0.0194059666      -0.087469619  0.020314277   0.007791742\nDefTotalTurnovers    0.0124861420      -0.071816578  0.009370146  -0.005577312\nSeason               0.0689030833       0.006320333  0.027973821   0.042484690\n                    DefFumbles DefInterceptions DefTotalTurnovers       Season\nDifferential       0.150569794     0.3327057321       0.345532435 -0.003878385\nNetYards           0.001793221     0.1663340665       0.124999591 -0.001790592\nTurnoverMargin     0.460918316     0.5703875962       0.724139646 -0.002929967\nPassingCmp        -0.040829500    -0.0297691725      -0.048692669 -0.029610254\nPassingAtt        -0.035257824    -0.0686033059      -0.073984074 -0.041775426\nPassingPct        -0.017660867     0.0689142577       0.039830347  0.012572467\nPassingYds        -0.037626266     0.0078658014      -0.018592363 -0.005156032\nPassingTD          0.043608120     0.0882725890       0.094053467  0.007905151\nRushingAtt         0.071526298     0.1436580977       0.153427918 -0.007214300\nRushingYds         0.023852046     0.1195961383       0.104536716  0.014375807\nRushingAvg        -0.006854675     0.0770398937       0.052901642  0.028912307\nRushingTD          0.081572945     0.1542031901       0.167806659  0.010753872\nOffensivePlays     0.032330682     0.0671333246       0.070987718 -0.048335254\nOffensiveYards    -0.011975338     0.0988055011       0.065778716  0.006944910\nOffenseAvg        -0.028665079     0.0804645249       0.041279523  0.038658107\nFirstDownPass     -0.048478203    -0.0136279287      -0.041645531 -0.020261494\nFirstDownRush      0.001209747     0.0859313452       0.064761271  0.007784693\nFirstDownPen      -0.022137245    -0.0004502855      -0.014719335  0.067342584\nFirstDownTotal    -0.039128209     0.0515277542       0.012937703  0.004102951\nPenalties          0.017532852     0.0549526117       0.052304098  0.030216760\nPenaltyYds         0.016166609     0.0617933436       0.056509226  0.044437631\nFumbles            0.024106442    -0.0049987283       0.011942110 -0.077252517\nInterceptions     -0.012659656    -0.0749491840      -0.064024937 -0.041264762\nTotalTurnovers     0.006396606    -0.0589145881      -0.039705132 -0.081249572\nTeamScore          0.141038879     0.2503321129       0.278013024  0.005977688\nOpponentScore     -0.091933095    -0.2658284429      -0.257642494  0.012194161\nDefPassingCmp      0.015619722     0.0941579438       0.080249068 -0.026955739\nDefPassingAtt      0.025595221     0.2439619508       0.198258751 -0.040678279\nDefPassingPct     -0.018411263    -0.2244657460      -0.179078808  0.018608445\nDefPassingYds      0.006937136     0.0168708421       0.017067747 -0.002118751\nDefPassingTD      -0.050444915    -0.1093917599      -0.114218864  0.011393488\nDefRushingAtt      0.025854080    -0.1892748746      -0.124114478 -0.007183939\nDefRushingYds     -0.026697792    -0.2083029281      -0.172427305  0.014886088\nDefRushingAvg     -0.054355397    -0.1616164572      -0.155644108  0.029010191\nDefRushingTD      -0.054016684    -0.2248055487      -0.202464353  0.016506584\nDefPlays           0.049317321     0.0646178779       0.080152383 -0.046828027\nDefYards          -0.014423469    -0.1424824986      -0.115449033  0.009448327\nDefAvg            -0.047271438    -0.2062298639      -0.184256082  0.041806773\nDefFirstDownPass  -0.002919968     0.0430140097       0.030126289 -0.018429922\nDefFirstDownRush  -0.011513894    -0.1763560858      -0.138777101  0.008887878\nDefFirstDownPen   -0.003018685     0.0194059666       0.012486142  0.068903083\nDefFirstDownTotal -0.010305398    -0.0874696190      -0.071816578  0.006320333\nDefPenalties      -0.008854950     0.0203142773       0.009370146  0.027973821\nDefPenaltyYds     -0.017511146     0.0077917423      -0.005577312  0.042484690\nDefFumbles         1.000000000     0.0243218903       0.667876691 -0.077776623\nDefInterceptions   0.024321890     1.0000000000       0.760295796 -0.045877732\nDefTotalTurnovers  0.667876691     0.7602957956       1.000000000 -0.084692470\nSeason            -0.077776623    -0.0458777320      -0.084692470  1.000000000\n\n\nNotice right away – NetYards is highly correlated. But NetYards’s also highly correlated with RushingYards, OffensiveYards and DefYards. And that makes sense: those things all feed into NetYards. Including all of these measures would be pointless – they would add error without adding much in the way of predictive power.\n\nYour turn: What else do you see? What other values have predictive power and aren’t co-correlated?\n\nWe can add more just by simply adding them. Let’s add the average yard per play for both offense and defense. They’re correlated to NetYards, but not as much as you might expect.\n\nmodel2 <- lm(Differential ~ NetYards + TurnoverMargin + DefAvg + OffenseAvg, data=logs)\nsummary(model2)\n\n\nCall:\nlm(formula = Differential ~ NetYards + TurnoverMargin + DefAvg + \n    OffenseAvg, data = logs)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-38.259  -6.265   0.002   6.231  37.511 \n\nCoefficients:\n                 Estimate Std. Error t value Pr(>|t|)    \n(Intercept)     0.4971325  0.4288921   1.159    0.246    \nNetYards        0.0547248  0.0008001  68.400   <2e-16 ***\nTurnoverMargin  3.8835518  0.0410088  94.700   <2e-16 ***\nDefAvg         -3.9332431  0.0737944 -53.300   <2e-16 ***\nOffenseAvg      3.9108710  0.0728810  53.661   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 9.452 on 15631 degrees of freedom\n  (1 observation deleted due to missingness)\nMultiple R-squared:  0.8285,    Adjusted R-squared:  0.8285 \nF-statistic: 1.888e+04 on 4 and 15631 DF,  p-value: < 2.2e-16\n\n\nGo down the list:\nWhat is the Adjusted R-squared now? What is the p-value and is it less than .05? What is the Residual standard error?\nThe final thing we can do with this is predict things. Look at our coefficients table. See the Estimates? We can build a formula from that, same as we did with linear regressions.\nHow does this apply in the real world? Let’s pretend for a minute that you are Scott Frost, and you have a mess on your hands. Your job is to win conference titles. To do that, we need to know what attributes of a team should we emphasize. We can do that by looking at what previous Big Ten conference champions looked like.\nSo if our goal is to predict a conference champion team, we need to know what those teams did. Here’s the regular season conference champions in this dataset.\n\nlogs %>% \n  filter(Team == \"Ohio State\" & Season == 2020 | Team == \"Ohio State\" & Season == 2019 | Team == \"Ohio State\" & Season == 2018) %>% \n  summarise(\n    meanNetYards = mean(NetYards),\n    meanTurnoverMargin = mean(TurnoverMargin),\n    meanDefAvg = mean(DefAvg),\n    meanOffenseAvg = mean(OffenseAvg)\n  )\n\n# A tibble: 1 × 4\n  meanNetYards meanTurnoverMargin meanDefAvg meanOffenseAvg\n         <dbl>              <dbl>      <dbl>          <dbl>\n1         196.              0.686       5.08           6.97\n\n\nNow it’s just plug and chug.\n\n(0.0547465*195.8824) + (3.8806793*0.6764706) + (-3.9374905*5.044118 ) + (3.9152803*6.908824) + 0.4960303\n\n[1] 21.03389\n\n\nSo a team with those numbers is going to average scoring 21 more points per game than their opponent. Sound like Ohio State in the last three years?\nHow does that compare to Nebraska this season?\n\nlogs %>% \n  filter(\n    Team == \"Nebraska\" & Season == 2020\n    ) %>% \n  summarise(\n    meanNetYards = mean(NetYards),\n    meanTurnoverMargin = mean(TurnoverMargin),\n    meanDefAvg = mean(DefAvg),\n    meanOffenseAvg = mean(OffenseAvg)\n  )\n\n# A tibble: 1 × 4\n  meanNetYards meanTurnoverMargin meanDefAvg meanOffenseAvg\n         <dbl>              <dbl>      <dbl>          <dbl>\n1            5              -1.38       5.44           5.54\n\n\n\n(0.0547465*5) + (3.8806793*-1.375) + (-3.9374905*5.4375) + (3.9152803*5.5375) + 0.4960303\n\n[1] -4.295411\n\n\nBy this model, it predicted we would average being outscored by our opponents by 4.3 points over the season. Reality? We were outscored by 6.25 on average."
  },
  {
    "objectID": "residuals.html",
    "href": "residuals.html",
    "title": "11  Residuals",
    "section": "",
    "text": "When looking at a linear model of your data, there’s a measure you need to be aware of called residuals. The residual is the distance between what the model predicted and what the real outcome is. Take our model at the end of the correlation and regression chapter. Our model predicted Nebraska, given a 5 net yardage margin would beat Iowa by 1.96 points. They lost by 6. So our residual is -7.96.\nResiduals can tell you several things, but most important is if a linear model the right model for your data. If the residuals appear to be random, then a linear model is appropriate. If they have a pattern, it means something else is going on in your data and a linear model isn’t appropriate.\nResiduals can also tell you who is underperforming and overperforming the model. And the more robust the model – the better your r-squared value is – the more meaningful that label of under or overperforming is.\nLet’s go back to our net yards model.\nThen load the tidyverse.\nFirst, let’s make the columns we’ll need.\nNow let’s create our model.\nWe’ve seen this output before, but let’s review because if you are using scatterplots to make a point, you should do this. First, note the Min and Max residual at the top. A team has underperformed the model by nearly 50 points (!), and a team has overperformed it by 49 points (!!). The median residual, where half are above and half are below, is just slightly above the fit line. Close here is good.\nNext: Look at the Adjusted R-squared value. What that says is that 64 percent of a team’s scoring output can be predicted by their net yards.\nLast: Look at the p-value. We are looking for a p-value smaller than .05. At .05, we can say that our correlation didn’t happen at random. And, in this case, it REALLY didn’t happen at random. But if you know a little bit about football, it doesn’t surprise you that the more you outgain your opponent, the more you win by. It’s an intuitive result.\nWhat we want to do now is look at those residuals. We want to add them to our individual game records. We can do that by creating two new fields – predicted and residuals – to our dataframe like this:\nNow we can sort our data by those residuals. Sorting in descending order gives us the games where teams overperformed the model. To make it easier to read, I’m going to use select to give us just the columns we need to see.\nSo looking at this table, what you see here are the teams who scored more than their net yards would indicate. One of them should jump off the page at you.\nRemember Nebraska vs Rutgers? We won and everyone was happy and relieved the season was over? We outgained Rutgers by 368 yards in that game and won by 7. Our model predicted Nebraska should have won that game by 37 points. We should have blown Rutgers out of their own barn. But Rutgers isn’t as hard done as Arizona, which should have lost by 48, but ended up losing by 63.\nBut, before we can bestow any validity on this model, we need to see if this linear model is appropriate. We’ve done that some looking at our p-values and R-squared values. But one more check is to look at the residuals themselves. We do that by plotting the residuals with the predictor. We’ll get into plotting soon, but for now just seeing it is enough.\nThe lack of a shape here – the seemingly random nature – is a good sign that a linear model works for our data. If there was a pattern, that would indicate something else was going on in our data and we needed a different model.\nAnother way to view your residuals is by connecting the predicted value with the actual value.\nThe blue line here separates underperformers from overperformers."
  },
  {
    "objectID": "residuals.html#penalties",
    "href": "residuals.html#penalties",
    "title": "11  Residuals",
    "section": "11.1 Penalties",
    "text": "11.1 Penalties\nNow let’s look at it where it doesn’t work: Penalties.\n\npenalties <- logs %>% \n  mutate(\n    differential = TeamScore - OpponentScore, \n    TotalPenalties = Penalties+DefPenalties,\n    TotalPenaltyYards = PenaltyYds+DefPenaltyYds\n  )\n\n\npfit <- lm(differential ~ TotalPenaltyYards, data = penalties)\nsummary(pfit)\n\n\nCall:\nlm(formula = differential ~ TotalPenaltyYards, data = penalties)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-67.007 -14.699   0.265  14.047  64.993 \n\nCoefficients:\n                  Estimate Std. Error t value Pr(>|t|)\n(Intercept)        1.21614    1.79282   0.678    0.498\nTotalPenaltyYards -0.00349    0.01556  -0.224    0.823\n\nResidual standard error: 21.36 on 1098 degrees of freedom\nMultiple R-squared:  4.58e-05,  Adjusted R-squared:  -0.0008649 \nF-statistic: 0.05029 on 1 and 1098 DF,  p-value: 0.8226\n\n\nSo from top to bottom:\n\nOur min and max go from -67 to positive 65\nOur adjusted R-squared is … -0.0008935. Not much at all.\nOur p-value is … 0.8307, which is more than than .05.\n\nSo what we can say about this model is that it’s statistically insignificant and utterly meaningless. Normally, we’d stop right here – why bother going forward with a predictive model that isn’t predictive? But let’s do it anyway.\n\npenalties$predicted <- predict(pfit)\npenalties$residuals <- residuals(pfit)\n\n\npenalties %>% arrange(desc(residuals)) %>% select(Team, Opponent, Result, TotalPenaltyYards, residuals)\n\n# A tibble: 1,100 × 5\n   Team          Opponent         Result    TotalPenaltyYards residuals\n   <chr>         <chr>            <chr>                 <dbl>     <dbl>\n 1 Clemson       Georgia Tech     W (73-7)                 60      65.0\n 2 Arizona State Arizona          W (70-7)                119      62.2\n 3 Alabama       Kentucky         W (63-3)                 99      59.1\n 4 Marshall      Eastern Kentucky W (59-0)                 55      58.0\n 5 Texas         Texas-El Paso    W (59-3)                 85      55.1\n 6 Pitt          Austin Peay      W (55-0)                 57      54.0\n 7 Oklahoma      Kansas           W (62-9)                100      52.1\n 8 Wake Forest   Campbell         W (66-14)                82      51.1\n 9 BYU           North Alabama    W (66-14)                74      51.0\n10 Notre Dame    South Florida    W (52-0)                 65      51.0\n# … with 1,090 more rows\n\n\nFirst, note all of the biggest misses here are all blowout games. The worst games of the season, the worst being Clemson vs Georgia Tech. The model missed that differential by … 65 points. The margin of victory? 66 points. In other words, this model is terrible. But let’s look at it anyway.\n\n\n\n\n\nWell … it actually says that a linear model is appropriate. Which an important lesson – just because your residual plot says a linear model works here, that doesn’t say your linear model is good. There are other measures for that, and you need to use them.\nHere’s the segment plot of residuals – you’ll see some really long lines. That’s a bad sign. Another bad sign? A flat fit line. It means there’s no relationship between these two things. Which we already know.\n\n\n`geom_smooth()` using formula 'y ~ x'"
  },
  {
    "objectID": "zscores.html",
    "href": "zscores.html",
    "title": "12  Z-scores",
    "section": "",
    "text": "Z-scores are a handy way to standardize numbers so you can compare things across groupings or time. In this class, we may want to compare teams by year, or era. We can use z-scores to answer questions like who was the greatest X of all time, because a z-score can put them in context to their era.\nA z-score is a measure of how a particular stat is from the mean. It’s measured in standard deviations from that mean. A standard deviation is a measure of how much variation – how spread out – numbers are in a data set. What it means here, with regards to z-scores, is that zero is perfectly average. If it’s 1, it’s one standard deviation above the mean, and 34 percent of all cases are between 0 and 1.\nIf you think of the normal distribution, it means that 84.3 percent of all case are below that 1. If it were -1, it would mean the number is one standard deviation below the mean, and 84.3 percent of cases would be above that -1. So if you have numbers with z-scores of 3 or even 4, that means that number is waaaaaay above the mean.\nSo let’s use last year’s Nebraska basketball team, which if haven’t been paying attention to current events, was not good at basketball."
  },
  {
    "objectID": "zscores.html#calculating-a-z-score-in-r",
    "href": "zscores.html#calculating-a-z-score-in-r",
    "title": "12  Z-scores",
    "section": "12.1 Calculating a Z score in R",
    "text": "12.1 Calculating a Z score in R\nFor this we’ll need the logs of all college basketball games last season.\nFor this walkthrough:\n   Download csv file\n\nLoad the tidyverse.\n\nlibrary(tidyverse)\n\nAnd load the data.\n\ngamelogs <- read_csv(\"data/logs20.csv\")\n\nRows: 11097 Columns: 43\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (6): HomeAway, Opponent, W_L, Team, Conference, season\ndbl  (35): Game, TeamScore, OpponentScore, TeamFG, TeamFGA, TeamFGPCT, Team3...\nlgl   (1): Blank\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nThe first thing we need to do is select some fields we think represent team quality and a few things to help us keep things straight. So I’m going to pick shooting percentage, rebounding and the opponent version of the same two:\n\nteamquality <- gamelogs %>% \n  select(Conference, Team, TeamFGPCT, TeamTotalRebounds, OpponentFGPCT, OpponentTotalRebounds)\n\nAnd since we have individual game data, we need to collapse this into one record for each team. We do that with … group by.\n\nteamtotals <- teamquality %>% \n  group_by(Conference, Team) %>% \n  summarise(\n    FGAvg = mean(TeamFGPCT), \n    ReboundAvg = mean(TeamTotalRebounds), \n    OppFGAvg = mean(OpponentFGPCT),\n    OffRebAvg = mean(OpponentTotalRebounds)\n    ) \n\n`summarise()` has grouped output by 'Conference'. You can override using the\n`.groups` argument.\n\n\nTo calculate a z-score in R, the easiest way is to use the scale function in base R. To use it, you use scale(FieldName, center=TRUE, scale=TRUE). The center and scale indicate if you want to subtract from the mean and if you want to divide by the standard deviation, respectively. We do.\nWhen we have multiple z-scores, it’s pretty standard practice to add them together into a composite score. That’s what we’re doing at the end here with TotalZscore. Note: We have to invert OppZscore and OppRebZScore by multiplying it by a negative 1 because the lower someone’s opponent number is, the better.\n\nteamzscore <- teamtotals %>% \n  mutate(\n    FGzscore = as.numeric(scale(FGAvg, center = TRUE, scale = TRUE)),\n    RebZscore = as.numeric(scale(ReboundAvg, center = TRUE, scale = TRUE)),\n    OppZscore = as.numeric(scale(OppFGAvg, center = TRUE, scale = TRUE)) * -1,\n    OppRebZScore = as.numeric(scale(OffRebAvg, center = TRUE, scale = TRUE)) * -1,\n    TotalZscore = FGzscore + RebZscore + OppZscore + OppRebZScore\n  )  \n\nSo now we have a dataframe called teamzscore that has 353 basketball teams with Z scores. What does it look like?\n\nhead(teamzscore)\n\n# A tibble: 6 × 11\n# Groups:   Conference [1]\n  Conference Team         FGAvg ReboundAvg OppFGAvg OffRebAvg FGzscore RebZscore\n  <chr>      <chr>        <dbl>      <dbl>    <dbl>     <dbl>    <dbl>     <dbl>\n1 A-10       Davidson Wi… 0.454       31.1    0.437      30.4    0.505   -0.619 \n2 A-10       Dayton Flye… 0.525       32.5    0.413      29.0    2.59     0.0352\n3 A-10       Duquesne Du… 0.444       32.4    0.427      32.4    0.216   -0.0168\n4 A-10       Fordham Rams 0.384       30.0    0.402      33.9   -1.53    -1.13  \n5 A-10       George Maso… 0.424       33.8    0.440      30.5   -0.358    0.620 \n6 A-10       George Wash… 0.422       30.5    0.452      32.7   -0.410   -0.904 \n# … with 3 more variables: OppZscore <dbl>, OppRebZScore <dbl>,\n#   TotalZscore <dbl>\n\n\nA way to read this – a team at zero is precisely average. The larger the positive number, the more exceptional they are. The larger the negative number, the more truly terrible they are.\nSo who are the best teams in the country?\n\nteamzscore %>% arrange(desc(TotalZscore))\n\n# A tibble: 353 × 11\n# Groups:   Conference [32]\n   Conference Team        FGAvg ReboundAvg OppFGAvg OffRebAvg FGzscore RebZscore\n   <chr>      <chr>       <dbl>      <dbl>    <dbl>     <dbl>    <dbl>     <dbl>\n 1 Big West   UC-Irvine … 0.473       36.6    0.390      27.1    1.60     2.23  \n 2 Big 12     Kansas Jay… 0.482       35.9    0.378      29.0    2.36     1.13  \n 3 WCC        Gonzaga Bu… 0.517       37.4    0.424      28.2    1.73     1.90  \n 4 Southland  Stephen F.… 0.490       34.2    0.427      26.6    1.76     1.05  \n 5 Big Ten    Michigan S… 0.460       37.7    0.382      29.6    1.38     1.55  \n 6 OVC        Murray Sta… 0.477       35.3    0.401      29.2    1.31     1.36  \n 7 Summit     South Dako… 0.492       35.5    0.423      31.3    1.58     1.52  \n 8 A-10       Dayton Fly… 0.525       32.5    0.413      29.0    2.59     0.0352\n 9 A-10       Saint Loui… 0.457       37.4    0.403      30.5    0.598    2.21  \n10 ACC        Louisville… 0.457       36.6    0.392      29.8    1.11     1.37  \n# … with 343 more rows, and 3 more variables: OppZscore <dbl>,\n#   OppRebZScore <dbl>, TotalZscore <dbl>\n\n\nDon’t sleep on the Anteaters! Would have been a tough out at the tournament that never happened.\nBut closer to home, how is Nebraska doing.\n\nteamzscore %>% \n  filter(Conference == \"Big Ten\") %>% \n  arrange(desc(TotalZscore)) %>%\n  select(Team, TotalZscore)\n\nAdding missing grouping variables: `Conference`\n\n\n# A tibble: 14 × 3\n# Groups:   Conference [1]\n   Conference Team                     TotalZscore\n   <chr>      <chr>                          <dbl>\n 1 Big Ten    Michigan State Spartans        5.36 \n 2 Big Ten    Rutgers Scarlet Knights        3.73 \n 3 Big Ten    Ohio State Buckeyes            1.99 \n 4 Big Ten    Illinois Fighting Illini       1.77 \n 5 Big Ten    Indiana Hoosiers               1.19 \n 6 Big Ten    Maryland Terrapins             0.544\n 7 Big Ten    Michigan Wolverines            0.127\n 8 Big Ten    Penn State Nittany Lions      -0.182\n 9 Big Ten    Minnesota Golden Gophers      -0.196\n10 Big Ten    Iowa Hawkeyes                 -0.239\n11 Big Ten    Purdue Boilermakers           -0.346\n12 Big Ten    Wisconsin Badgers             -1.88 \n13 Big Ten    Northwestern Wildcats         -4.22 \n14 Big Ten    Nebraska Cornhuskers          -7.64 \n\n\nSo, as we can see, with our composite Z Score, Nebraska is … not good. Not good at all."
  },
  {
    "objectID": "zscores.html#writing-about-z-scores",
    "href": "zscores.html#writing-about-z-scores",
    "title": "12  Z-scores",
    "section": "12.2 Writing about z-scores",
    "text": "12.2 Writing about z-scores\nThe great thing about z-scores is that they make it very easy for you, the sports analyst, to create your own measures of who is better than who. The downside: Only a small handful of sports fans know what the hell a z-score is.\nAs such, you should try as hard as you can to avoid writing about them.\nIf the word z-score appears in your story or in a chart, you need to explain what it is. “The ranking uses a statistical measure of the distance from the mean called a z-score” is a good way to go about it. You don’t need a full stats textbook definition, just a quick explanation. And keep it simple.\nNever use z-score in a headline. Write around it. Away from it. Z-score in a headline is attention repellent. You won’t get anyone to look at it. So “Tottenham tops in z-score” bad, “Tottenham tops in the Premiere League” good."
  },
  {
    "objectID": "clustering.html",
    "href": "clustering.html",
    "title": "13  Clustering",
    "section": "",
    "text": "One common effort in sports is to classify teams and players – who are this players peers? What teams are like this one? Who should we compare a player to? Truth is, most sports commentators use nothing more sophisticated that looking at a couple of stats or use the “eye test” to say a player is like this or that.\nThere’s better ways.\nIn this chapter, we’re going to use a method that sounds advanced but it really quite simple called k-means clustering. It’s based on the concept of the k-nearest neighbor algorithm. You’re probably already scared. Don’t be.\nImagine two dots on a scatterplot. If you took a ruler out and measured the distance between those dots, you’d know how far apart they are. In math, that’s called the Euclidean distance. It’s just the space between them in numbers. Where k-nearest neighbor comes in, you have lots of dots and you want measure the distance between all of them. What does k-means clustering do? It lumps them into groups based on the average distance between them. Players who are good on offense but bad on defense are over here, good offense good defense are over here. And using the Euclidean distance between them, we can decide who is in and who is out of those groups.\nFor this exercise, I want to look at Cam Mack, Nebraska’s point guard and probably the most interesting player on Fred Hoiberg’s first team. This was Mack’s first – only? – year in major college basketball. I believe Mack could have been one of the best players Nebraska ever had, but it didn’t work out. So who does Cam Mack compare to?\nTo answer this, we’ll use k-means clustering.\nFirst thing we do is load some libraries and set a seed, so if we run this repeatedly, our random numbers are generated from the same base. If you don’t have the cluster library, just add it on the console with install.packages(\"cluster\")\nI’ve gone and scraped stats for every player in that season.\nNow load that data.\nTo cluster this data properly, we have some work to do.\nFirst, it won’t do to have players who haven’t played, so we can use filter to find anyone with greater than 0 minutes played. Next, Cam Mack is a guard, so let’s just look at guards. Third, we want to limit the data to things that make sense to look at for Cam Mack – things like shooting, three point shooting, assists, turnovers and points.\nNow, k-means clustering doesn’t work as well with data that can be on different scales. So comparing a percentage to a count metric – shooting percentage to points – would create chaos because shooting percentages are a fraction of 1 and points, depending on when they are in the season, could be quite large. So we have to scale each metric – put them on a similar basis using the distance from the max value as our guide. Also, k-means clustering won’t work with text data, so we need to create a dataframe that’s just the numbers, but scaled. We can do that with another select, and using mutate_all with the scale function. The na.omit() means get rid of any blanks, because they too will cause errors.\nWith k-means clustering, we decide how many clusters we want. Most often, researchers will try a handful of different cluster numbers and see what works. But there are methods for finding the optimal number. One method is called the Elbow method. One implementation of this, borrowed from the University of Cincinnati’s Business Analytics program, does this quite nicely with a graph that will help you decide for yourself.\nAll you need to do in this code is change out the data frame – playersscaled in this case – and run it.\nThe Elbow method – so named because you’re looking for the “elbow” where the line flattens out. In this case, it looks like a K of 5 is ideal. So let’s try that. We’re going to use the kmeans function, saving it to an object called k5. We just need to tell it our dataframe name, how many centers (k) we want, and we’ll use a sensible default for how many different configurations to try.\nLet’s look at what we get.\nInterpreting this output, the very first thing you need to know is that the cluster numbers are meaningless. They aren’t ranks. They aren’t anything. After you have taken that on board, look at the cluster sizes at the top. Clusters 1 and 2 are pretty large compared to others. That’s notable. Then we can look at the cluster means. For reference, 0 is going to be average. So group 1 is below average on minutes played. Group 2 is slightly above, group 5 is well above.\nSo which group is Cam Mack in? Well, first we have to put our data back together again. In K5, there is a list of cluster assignments in the same order we put them in, but recall we have no names. So we need to re-combine them with our original data. We can do that with the following:\nNow we have a dataframe called playercluster that has our player names and what cluster they are in. The fastest way to find Cam Mack is to double click on the playercluster table in the environment and use the search in the top right of the table. Because this is based on some random selections of points to start the groupings, these may change from person to person, but Mack is in Group 1 in my data.\nWe now have a dataset and can plot it like anything else. Let’s get Cam Mack and then plot him against the rest of college basketball on assists versus minutes played.\nSo Cam’s in cluster 3, which if you look at our clusters, puts him in the cluster with all above average metrics. What does that look like? We know Cam was an assist machine, so where do group 5 people grade out on assists?\nNot bad, not bad. But who are Cam Mack’s peers? If we look at the numbers in Group 3, there’s 495 of them. So let’s limit them to just Big Ten guards. Unfortunately, my scraper didn’t quite work and in the place of Conference is the coach’s name. So I’m going to have to do this the hard way and make a list of Big Ten teams and filter on that. Then I’ll sort by minutes played.\nSo there are the 11 guards most like Cam Mack in the Big Ten. Safe to say, these are the 11 best guards in the conference."
  },
  {
    "objectID": "clustering.html#advanced-metrics",
    "href": "clustering.html#advanced-metrics",
    "title": "13  Clustering",
    "section": "13.1 Advanced metrics",
    "text": "13.1 Advanced metrics\nHow much does this change if we change the metrics? I used pretty standard box score metrics above. What if we did it using Player Efficiency Rating, True Shooting Percentage, Point Production, Assist Percentage, Win Shares Per 40 Minutes and Box Plus Minus (you can get definitions of all of them by hovering over the stats on Nebraksa’s stats page).\nWe’ll repeat the process. Filter out players who don’t play, players with stats missing, and just focus on those stats listed above.\n\nplayersadvanced <- players %>% \n  filter(MP>0) %>% \n  filter(Pos == \"G\") %>% \n  select(Player, Team, Pos, PER, `TS%`, PProd, `AST%`, `WS/40`, BPM) %>% \n  na.omit() \n\nNow to scale them.\n\nplayersadvscaled <- playersadvanced %>% \n  select(PER, `TS%`, PProd, `AST%`, `WS/40`, BPM) %>% \n  mutate_all(scale) %>% \n  na.omit()\n\nLet’s find the optimal number of clusters.\n\n# function to compute total within-cluster sum of square \nwss <- function(k) {\n  kmeans(playersadvscaled, k, nstart = 10 )$tot.withinss\n}\n\n# Compute and plot wss for k = 1 to k = 15\nk.values <- 1:15\n\n# extract wss for 2-15 clusters\nwss_values <- map_dbl(k.values, wss)\n\nplot(k.values, wss_values,\n       type=\"b\", pch = 19, frame = FALSE, \n       xlab=\"Number of clusters K\",\n       ylab=\"Total within-clusters sum of squares\")\n\n\n\n\nLooks like 5 again.\n\nadvk5 <- kmeans(playersadvscaled, centers = 5, nstart = 25)\n\nWhat do we have here?\n\nadvk5\n\nK-means clustering with 5 clusters of sizes 104, 1253, 9, 632, 766\n\nCluster means:\n         PER        TS%      PProd       AST%      WS/40        BPM\n1 -2.6922417 -2.6802561 -1.1497380 -1.0109009 -2.8398288 -2.8455990\n2  0.1594366  0.3741799 -0.2279088 -0.2650562  0.2130658  0.2118878\n3  8.9269330  4.3359455 -1.1326482  2.2478231  8.0858448  6.3926472\n4 -0.6089002 -0.6736304 -0.8322766 -0.2324539 -0.5651578 -0.6493960\n5  0.5022214  0.2566711  1.2288970  0.7362004  0.4083263  0.5004325\n\nClustering vector:\n   [1] 5 2 2 2 2 4 2 4 2 5 2 5 2 2 4 2 5 2 2 2 4 4 2 1 5 2 2 2 2 4 2 2 5 5 5 2 2\n  [38] 2 4 5 5 2 2 2 2 2 4 4 5 2 2 2 2 2 2 1 5 5 2 2 5 2 2 2 2 5 5 5 2 2 2 4 4 4\n  [75] 4 4 5 2 5 2 5 4 1 2 4 5 2 2 2 2 4 2 4 5 5 2 2 2 4 4 5 5 2 4 4 4 4 5 2 2 2\n [112] 2 2 4 4 2 5 5 2 2 2 2 4 4 5 5 2 4 2 4 4 5 5 2 2 4 2 3 1 5 2 2 2 4 2 5 2 2\n [149] 2 2 4 2 1 5 5 2 2 5 2 4 5 5 2 4 2 4 3 4 1 5 5 2 2 2 5 2 4 5 5 2 5 2 2 2 4\n [186] 5 5 5 2 2 2 2 2 2 4 5 5 4 4 5 2 2 2 4 2 4 2 5 5 2 2 4 2 2 3 4 5 2 2 5 2 2\n [223] 2 4 2 4 5 2 2 2 2 4 4 5 5 2 2 2 2 2 4 5 2 5 5 2 5 2 5 2 2 2 2 2 4 1 5 5 5\n [260] 2 4 2 1 5 5 5 2 2 2 2 2 4 5 1 1 5 5 2 2 2 2 2 4 4 5 5 2 2 2 2 2 2 2 5 2 2\n [297] 2 5 4 5 5 5 2 4 1 5 5 5 2 5 2 2 2 5 5 2 5 2 2 2 2 2 5 2 4 4 4 4 4 4 5 5 2\n [334] 2 4 4 5 5 2 2 4 2 2 5 2 4 2 4 2 4 5 5 2 2 4 2 2 5 5 2 4 4 4 4 5 2 5 4 2 4\n [371] 4 5 5 2 2 4 4 4 4 4 5 2 5 2 5 2 2 5 5 5 2 2 2 2 4 4 4 4 2 4 5 5 2 5 4 2 4\n [408] 2 1 5 5 2 2 4 4 5 5 5 2 2 2 1 5 5 4 4 1 2 1 5 5 2 2 4 4 4 5 2 2 2 4 4 4 4\n [445] 2 5 5 2 5 2 2 2 4 5 5 2 2 2 4 5 5 2 2 2 2 2 1 1 5 5 2 2 4 4 4 4 5 5 2 2 4\n [482] 4 1 5 2 2 2 4 4 2 4 5 5 2 2 2 2 4 4 5 5 4 4 4 4 4 4 1 5 5 2 2 4 2 4 1 5 5\n [519] 2 2 5 4 4 5 5 5 2 4 4 4 4 4 5 2 2 5 4 4 4 1 1 5 2 2 4 4 4 4 5 2 2 2 4 4 2\n [556] 2 5 5 2 2 2 2 4 2 5 5 5 5 2 2 4 1 5 2 2 2 5 2 2 4 2 5 5 2 2 4 2 5 5 2 2 4\n [593] 2 2 4 5 2 2 4 2 4 4 1 5 5 2 2 2 4 2 1 5 5 5 2 2 4 2 4 1 5 5 2 2 2 2 4 5 5\n [630] 2 2 2 2 4 4 2 5 2 2 2 4 1 1 5 5 5 2 2 2 4 4 4 5 5 5 2 2 5 5 2 2 2 4 2 1 5\n [667] 2 5 2 2 2 4 5 2 4 4 4 3 1 4 5 5 2 2 5 2 2 2 2 5 2 5 4 2 4 1 5 2 5 2 2 2 5\n [704] 5 2 5 2 2 2 4 3 5 2 2 2 4 4 5 5 2 2 2 4 2 4 2 2 1 5 2 5 2 5 4 2 2 2 5 5 2\n [741] 4 4 4 5 5 2 2 2 2 2 4 1 5 5 5 2 5 2 4 1 5 5 2 2 2 4 4 4 5 5 5 2 2 2 4 5 5\n [778] 5 5 4 2 2 4 2 5 5 5 2 5 5 2 2 2 2 4 2 4 5 5 2 4 4 1 5 5 2 2 2 5 2 5 5 5 2\n [815] 2 2 5 5 5 2 2 2 4 2 4 5 2 2 5 4 2 4 2 4 5 2 2 2 2 2 4 2 4 4 5 1 5 5 5 2 2\n [852] 4 4 5 5 2 2 2 2 4 5 5 5 2 2 4 2 4 4 4 5 2 4 2 2 4 1 5 2 2 2 2 2 4 2 2 5 2\n [889] 5 2 2 2 4 2 5 2 5 2 2 2 5 2 5 5 5 2 2 5 2 2 2 4 4 5 5 2 2 4 2 2 5 5 5 2 4\n [926] 4 4 2 5 2 2 2 2 1 5 5 2 2 4 4 2 4 2 5 2 2 4 4 4 4 5 5 5 2 2 5 2 4 2 4 4 4\n [963] 4 4 5 5 2 5 2 4 4 5 5 2 4 5 2 2 2 5 2 4 4 2 2 4 5 5 5 5 2 4 4 2 2 5 5 5 2\n[1000] 2 2 5 2 2 2 2 2 4 5 5 2 2 2 2 4 5 2 2 2 4 2 4 1 5 5 5 2 2 2 2 2 4 5 5 2 2\n[1037] 2 2 2 2 2 5 5 2 2 2 1 5 5 2 2 4 2 4 5 5 2 2 2 2 2 4 2 5 5 2 2 2 2 4 2 4 5\n[1074] 5 5 2 2 2 4 2 2 4 5 5 5 2 4 4 5 2 5 2 2 4 2 2 5 4 2 2 2 4 1 4 5 2 2 2 4 4\n[1111] 5 5 5 5 4 2 4 4 4 5 5 5 2 4 4 1 5 5 5 5 2 2 4 2 4 2 2 5 2 4 2 4 4 4 5 5 5\n[1148] 2 2 2 2 2 4 5 5 2 2 2 4 2 4 2 5 5 2 2 2 4 2 4 5 5 2 2 2 2 5 2 2 2 2 5 5 2\n[1185] 2 2 2 2 5 2 2 1 5 2 5 2 2 2 5 5 5 5 4 1 5 5 5 2 2 2 1 5 5 2 2 2 2 4 2 5 5\n[1222] 2 2 2 4 4 4 5 2 5 4 2 3 4 2 4 5 2 5 2 4 2 4 5 2 5 4 4 4 4 4 1 5 2 2 2 2 2\n[1259] 4 4 2 5 2 5 5 2 4 5 5 2 2 4 5 5 2 4 4 5 5 5 2 2 4 4 5 5 2 2 4 4 2 2 5 2 2\n[1296] 2 4 4 2 2 5 2 2 2 2 2 2 5 5 2 2 2 2 4 4 5 5 5 4 4 4 1 5 5 2 5 2 4 5 2 2 4\n[1333] 4 1 5 5 2 2 2 2 2 4 5 5 5 5 2 2 4 5 5 2 2 4 2 4 5 5 2 2 2 5 2 4 4 5 5 5 2\n[1370] 2 4 2 5 5 5 2 5 2 4 5 2 2 2 2 4 4 4 5 5 5 2 2 2 2 4 2 5 2 2 5 5 2 4 5 5 5\n[1407] 2 2 2 2 2 5 5 2 2 2 4 4 2 4 5 5 2 2 4 2 4 1 5 5 5 5 4 4 2 2 2 4 4 4 4 4 4\n[1444] 4 4 5 2 5 2 5 4 2 4 5 5 2 2 4 2 5 5 5 2 2 2 5 2 2 2 4 4 1 4 1 2 5 5 2 2 2\n[1481] 4 3 2 1 5 2 4 4 4 4 4 5 5 2 5 2 4 4 4 4 1 1 2 2 2 4 4 5 5 2 2 2 2 2 4 1 2\n[1518] 5 5 2 2 2 2 5 2 5 5 2 2 2 4 2 5 5 2 2 4 4 4 5 5 2 2 4 2 4 5 5 2 2 4 4 4 4\n[1555] 5 5 2 2 2 4 5 5 2 2 5 4 2 4 5 5 2 4 2 2 2 5 2 2 2 4 2 4 4 4 5 5 2 2 2 2 4\n[1592] 2 5 5 2 2 4 4 1 5 5 5 2 2 4 5 5 2 2 2 2 2 2 2 2 2 2 5 2 1 5 5 5 2 2 5 5 5\n[1629] 2 2 2 2 5 4 4 4 4 4 4 4 5 5 5 2 2 2 2 2 2 5 2 2 5 4 5 5 5 4 4 4 4 2 2 2 2\n[1666] 2 4 4 4 4 5 2 2 2 2 2 2 2 4 5 5 5 2 4 2 4 4 4 3 4 4 1 5 5 5 4 4 4 4 5 2 2\n[1703] 2 2 4 1 5 5 5 5 2 2 2 1 5 5 2 2 2 4 2 2 2 4 5 2 5 2 4 4 1 1 5 5 5 2 2 1 5\n[1740] 5 5 2 2 4 2 2 4 1 2 5 5 2 2 4 4 4 2 5 5 2 2 2 4 4 5 2 2 2 2 2 2 4 2 5 5 2\n[1777] 2 2 5 2 2 4 2 2 4 2 4 5 2 2 4 5 4 2 2 5 5 2 2 5 4 4 4 5 5 5 5 2 5 2 4 4 2\n[1814] 2 4 5 4 5 4 4 4 4 5 5 5 2 4 2 4 2 1 5 2 2 2 4 4 2 5 5 2 2 2 4 5 2 2 2 2 2\n[1851] 2 1 5 2 5 2 2 4 2 5 5 2 4 2 2 4 4 4 2 1 5 5 5 5 2 2 2 2 5 5 2 2 4 5 2 2 2\n[1888] 2 4 2 4 2 2 4 5 5 5 2 2 2 5 5 2 2 2 2 4 1 5 5 2 2 4 4 5 5 5 5 5 5 2 4 1 5\n[1925] 5 5 5 2 4 2 2 4 2 5 5 2 5 5 2 4 4 5 2 5 2 4 4 2 4 5 5 2 2 2 4 4 1 5 5 5 4\n[1962] 2 4 2 1 5 5 5 2 2 4 2 1 5 2 2 5 5 2 2 4 4 5 2 2 2 2 4 4 5 2 2 2 4 2 5 5 2\n[1999] 2 2 2 2 5 4 4 5 2 2 2 2 2 2 4 4 5 2 5 2 2 2 4 1 5 2 5 4 2 4 5 5 2 2 4 2 2\n[2036] 5 5 2 2 2 4 4 2 5 2 2 2 5 2 2 4 2 2 2 5 2 4 5 5 5 2 2 4 4 4 1 1 5 5 2 5 2\n[2073] 2 2 2 2 4 2 2 2 2 2 2 2 1 5 5 2 2 2 4 2 5 5 5 5 2 2 2 4 4 5 5 5 5 2 1 5 2\n[2110] 2 2 4 4 4 2 1 5 5 2 2 4 4 2 2 5 5 2 2 4 5 5 2 2 4 5 2 2 2 2 2 2 2 2 4 5 2\n[2147] 2 2 4 1 5 2 2 2 2 4 4 4 4 5 5 4 4 4 2 4 2 5 5 5 2 2 2 1 5 4 2 2 2 2 4 4 4\n[2184] 5 5 2 5 2 2 2 2 2 1 5 5 2 2 2 2 2 2 4 5 2 2 2 2 2 2 4 5 5 5 5 2 2 2 2 2 5\n[2221] 2 2 2 2 4 4 5 5 2 2 4 4 2 4 2 5 5 5 2 2 2 1 1 5 2 2 2 4 4 4 4 4 5 5 5 2 4\n[2258] 2 2 5 5 2 2 2 2 2 2 5 5 2 4 4 4 4 3 5 5 2 2 2 4 2 2 5 2 2 2 2 2 4 4 2 5 2\n[2295] 4 2 4 4 4 2 2 5 5 2 2 2 2 2 2 2 2 5 2 2 5 2 2 4 1 5 5 2 2 4 2 4 4 5 2 4 4\n[2332] 4 5 5 2 2 2 5 4 4 4 5 5 2 2 2 2 4 4 4 5 5 5 2 2 4 2 4 2 5 5 2 2 2 4 5 2 5\n[2369] 2 2 2 2 4 2 2 4 2 4 4 4 4 4 5 5 5 2 4 4 4 5 5 2 4 4 2 5 5 2 2 2 2 2 4 2 5\n[2406] 2 5 4 2 2 1 5 5 2 2 2 2 2 2 2 5 2 4 2 4 5 5 2 4 2 4 5 5 2 5 2 2 2 4 4 2 5\n[2443] 2 5 2 2 2 2 2 5 5 5 4 4 5 5 2 4 2 2 4 2 5 2 2 2 5 2 2 2 2 4 2 5 5 4 2 5 5\n[2480] 2 2 2 4 1 1 5 2 5 2 4 4 5 5 2 2 5 4 5 5 2 4 4 2 4 4 4 5 5 2 2 2 4 2 2 2 4\n[2517] 5 5 2 2 4 2 2 5 5 5 2 2 5 4 2 2 2 5 5 2 2 2 2 4 4 1 1 5 5 2 4 4 1 1 5 5 2\n[2554] 2 2 2 5 2 5 2 2 4 2 2 2 5 2 2 5 2 2 2 2 5 5 2 2 2 2 2 2 4 5 5 5 2 2 2 4 1\n[2591] 5 5 2 2 2 2 4 5 5 2 5 5 2 2 2 2 5 5 2 2 4 4 2 1 5 2 2 2 4 4 4 2 1 5 5 5 2\n[2628] 2 1 5 5 5 2 2 2 4 1 4 4 4 4 2 4 2 4 2 4 1 5 2 5 2 2 4 2 1 5 5 2 5 2 2 5 5\n[2665] 2 2 2 2 4 2 5 5 2 4 2 4 4 4 1 5 2 2 2 2 2 1 4 5 5 2 2 2 2 4 2 1 5 5 2 2 2\n[2702] 4 4 4 5 5 5 2 2 4 5 2 4 2 2 2 4 4 2 4 4 5 5 5 2 2 4 2 1 1 5 2 5 4 4 4 4 1\n[2739] 5 5 2 4 4 2 4 5 2 2 2 2 2 2 2 4 2 2 5 5 5 4 2 2 2 2\n\nWithin cluster sum of squares by cluster:\n[1]  737.6141 2624.4456  722.9391 1248.0870 1849.5824\n (between_SS / total_SS =  56.7 %)\n\nAvailable components:\n\n[1] \"cluster\"      \"centers\"      \"totss\"        \"withinss\"     \"tot.withinss\"\n[6] \"betweenss\"    \"size\"         \"iter\"         \"ifault\"      \n\n\nLooks like this time, cluster 1 is all below average and cluster 5 is mostly above. Which cluster is Cam Mack in?\n\nplayeradvcluster <- data.frame(playersadvanced, advk5$cluster) \n\n\ncmadv <- playeradvcluster %>% filter(Player == \"Cam Mack\")\n\ncmadv\n\n    Player                 Team Pos  PER   TS. PProd AST. WS.40 BPM\n1 Cam Mack Nebraska Cornhuskers   G 15.9 0.481   382 36.4 0.081 3.9\n  advk5.cluster\n1             5\n\n\nCluster 2 on my dataset. So in this season, we can say he’s in a big group of players who are all above average on these advanced metrics.\nNow who are his Big Ten peers?\n\nplayeradvcluster %>% \n  filter(advk5.cluster == 2) %>% \n  filter(Team %in% big10) %>% \n  arrange(desc(PProd))\n\n                  Player                     Team Pos  PER   TS. PProd AST.\n1           Dachon Burke     Nebraska Cornhuskers   G 14.3 0.461   294  9.7\n2         Gabe Kalscheur Minnesota Golden Gophers   G 10.5 0.491   273  9.2\n3          Trent Frazier Illinois Fighting Illini   G 11.5 0.495   251 12.0\n4           Brad Davison        Wisconsin Badgers   G 14.3 0.546   250 11.9\n5           Franz Wagner      Michigan Wolverines   G 15.5 0.552   242  5.6\n6     Izaiah Brockington Penn State Nittany Lions   G 15.5 0.530   232  9.4\n7            Jacob Young  Rutgers Scarlet Knights   G 12.3 0.455   227 17.4\n8       Sasha Stefanovic      Purdue Boilermakers   G 13.9 0.549   221 11.3\n9  Thorir Thorbjarnarson     Nebraska Cornhuskers   G 14.1 0.606   218  8.8\n10       Caleb McConnell  Rutgers Scarlet Knights   G 14.2 0.493   213 13.3\n11          Alan Griffin Illinois Fighting Illini   G 27.6 0.652   209  6.1\n12         Brevin Pritzl        Wisconsin Badgers   G 13.5 0.545   205  5.5\n13         Montez Mathis  Rutgers Scarlet Knights   G 12.7 0.451   201 10.0\n14         Payton Willis Minnesota Golden Gophers   G 13.4 0.517   193 13.3\n15             Kobe King        Wisconsin Badgers   G 14.4 0.513   188 12.2\n16        David Dejulius      Michigan Wolverines   G 13.3 0.522   187 12.9\n17          Jervay Green     Nebraska Cornhuskers   G 11.5 0.481   185 13.8\n18         Nojel Eastern      Purdue Boilermakers   G 11.5 0.434   182 19.3\n19       Luther Muhammad      Ohio State Buckeyes   G 12.2 0.557   181 10.9\n20          Rocket Watts  Michigan State Spartans   G 10.1 0.473   178 15.5\n21      Curtis Jones Jr. Penn State Nittany Lions   G 10.8 0.462   165 12.0\n22        Jamari Wheeler Penn State Nittany Lions   G 10.4 0.564   147 19.6\n23       Isaiah Thompson      Purdue Boilermakers   G  8.3 0.485   140  6.8\n24          Paul Mulcahy  Rutgers Scarlet Knights   G 13.0 0.605   128 18.7\n25         Bakari Evelyn            Iowa Hawkeyes   G  5.8 0.485   114 16.9\n26       Armaan Franklin         Indiana Hoosiers   G  6.8 0.445   109 16.9\n27           Matej Kavas     Nebraska Cornhuskers   G 11.1 0.523   100  7.4\n28       Jordan Bohannon            Iowa Hawkeyes   G 12.7 0.475    91 22.6\n29          Foster Loyer  Michigan State Spartans   G 16.5 0.662    86 22.7\n30     Da'Monte Williams Illinois Fighting Illini   G  8.3 0.427    80 10.1\n31           Kyle Ahrens  Michigan State Spartans   G 10.5 0.601    78  7.0\n32       Trevor Anderson        Wisconsin Badgers   G  8.3 0.483    66 19.9\n33        Anthony Gaines    Northwestern Wildcats   G 13.0 0.505    65 12.2\n34          Walt McGrory        Wisconsin Badgers   G 12.9 0.503    17 17.5\n35         Conner George  Michigan State Spartans   G 15.8 0.420    17  3.6\n36           Cole Bajema      Michigan Wolverines   G 35.2 0.927    14  0.0\n37          Danny Hummer      Ohio State Buckeyes   G 11.9 0.411    11 25.7\n38         Samari Curtis     Nebraska Cornhuskers   G  9.7 0.639    11  3.7\n39            Austin Ash            Iowa Hawkeyes   G 16.1 0.432    11 14.9\n40            Reese Mona       Maryland Terrapins   G 20.5 1.017     8 13.4\n41           Joey Downes  Rutgers Scarlet Knights   G 35.2 1.013     5  0.0\n42       Stephen Beattie Penn State Nittany Lions   G 33.5 0.750     4  0.0\n43         Jared Wulbrun      Purdue Boilermakers   G  5.0 0.750     3 21.0\n44       Taylor Nussbaum Penn State Nittany Lions   G 24.2 0.256     3 18.4\n45         Travis Valmon       Maryland Terrapins   G 19.5 0.678     3  0.0\n46       Michael Ballard        Wisconsin Badgers   G 17.5 1.053     2  0.0\n47          Cooper Bybee         Indiana Hoosiers   G 37.9 1.500     1  0.0\n   WS.40  BPM advk5.cluster\n1  0.049  1.1             2\n2  0.079  3.8             2\n3  0.130  5.2             2\n4  0.137  6.7             2\n5  0.125  7.0             2\n6  0.123  3.4             2\n7  0.071  1.8             2\n8  0.133  6.8             2\n9  0.097  4.3             2\n10 0.121  5.1             2\n11 0.252 10.6             2\n12 0.123  5.7             2\n13 0.111  3.7             2\n14 0.120  6.0             2\n15 0.100  3.3             2\n16 0.113  4.5             2\n17 0.044  1.6             2\n18 0.085  4.5             2\n19 0.129  6.4             2\n20 0.084  1.3             2\n21 0.087  1.5             2\n22 0.095  5.8             2\n23 0.078  1.5             2\n24 0.130  5.7             2\n25 0.027  0.6             2\n26 0.047  0.3             2\n27 0.061 -0.7             2\n28 0.098  2.5             2\n29 0.183  5.0             2\n30 0.091  6.1             2\n31 0.110  4.8             2\n32 0.075  1.9             2\n33 0.078  4.2             2\n34 0.144  4.6             2\n35 0.156 -1.1             2\n36 0.253 11.0             2\n37 0.104  6.0             2\n38 0.070 -0.8             2\n39 0.106  6.0             2\n40 0.205 10.3             2\n41 0.294  8.6             2\n42 0.234  7.8             2\n43 0.019 -8.6             2\n44 0.200 16.1             2\n45 0.187  2.8             2\n46 0.227  2.7             2\n47 0.227 17.2             2\n\n\nSorting on Points Produced, Cam Mack is sixth out of the 53 guards in the Big Ten who land in Cluster 2. Seems advanced metrics take a little bit of the shine off of Cam. But then, so does leaving the program after one suspension-riddled season."
  },
  {
    "objectID": "simulations.html",
    "href": "simulations.html",
    "title": "14  Simulations",
    "section": "",
    "text": "In the 2017-2018 season, James Palmer Jr. took 139 three point attempts and made 43 of them for a .309 shooting percentage. A few weeks into the next season, he was 7 for 39 – a paltry .179.\nIs something wrong or is this just bad luck?\nLuck is something that comes up a lot in sports. Is a team unlucky? Or a player? One way we can get to this, we can get to that is by simulating things based on their typical percentages. Simulations work by choosing random values within a range based on a distribution. The most common distribution is the normal or binomial distribution. The normal distribution is where the most cases appear around the mean, 66 percent of cases are within one standard deviation from the mean, and the further away from the mean you get, the more rare things become.\nLet’s simulate 39 three point attempts 1000 times with his season long shooting percentage and see if this could just be random chance or something else.\nWe do this using a base R function called rbinom or binomial distribution. So what that means is there’s a normally distrubuted chance that James Palmer Jr. is going to shoot above and below his career three point shooting percentage. If we randomly assign values in that distribution 1000 times, how many times will it come up 7, like this example?\nHow do we read this? The first row and the second row form a pair. The top row is the number of shots made. The number immediately under it is the number of simulations where that occurred.\nSo what we see is given his season long shooting percentage, it’s not out of the realm of randomness that with just 39 attempts for Palmer, he’s only hit only 7. In 1000 simulations, it comes up 35 times. Is he below where he should be? Yes. Will he likely improve and soon? Unless something is very wrong, yes. And indeed, by the end of the season, he finished with a .313 shooting percentage from 3 point range. So we can say he was just unlucky."
  },
  {
    "objectID": "simulations.html#cold-streaks",
    "href": "simulations.html#cold-streaks",
    "title": "14  Simulations",
    "section": "14.1 Cold streaks",
    "text": "14.1 Cold streaks\nDuring the Western Illinois game in the 2018-2019 season, the team, shooting .329 on the season from behind the arc, went 0-15 in the second half. How strange is that?\n\nset.seed(1234)\n\nsimulations <- rbinom(n = 1000, size = 15, prob = .329)\n\nhist(simulations)\n\n\n\ntable(simulations)\n\nsimulations\n  0   1   2   3   4   5   6   7   8   9  10  11 \n  5  16  59 132 200 218 172  92  65  34   4   3 \n\n\nShort answer: Really weird. If you simulate 15 threes 1000 times, sometimes you’ll see them miss all of them, but only a few times – five times, in this case. Most of the time, the team won’t go 0-15 even once. So going ice cold is not totally out of the realm of random chance, but it’s highly unlikely."
  },
  {
    "objectID": "barcharts.html",
    "href": "barcharts.html",
    "title": "15  Intro to ggplot with bar charts",
    "section": "",
    "text": "With ggplot2, we dive into the world of programmatic data visualization. The ggplot2 library implements something called the grammar of graphics. The main concepts are:\nHadley Wickham, who is behind all of the libraries we have used in this course to date, wrote about his layered grammar of graphics in this 2009 paper that is worth your time to read.\nHere are some ggplot2 resources you’ll want to keep handy:\nLet’s dive in using data we’ve already seen before – football attendance. This workflow will represent a clear picture of what your work in this class will be like for much of the rest of the semester. One way to think of this workflow is that your R Notebook is now your digital sketchbook, where you will try different types of visualizations to find ones that work. Then, you will either write the code that adds necessary and required parts to finish it, or you’ll export your work into a program like Illustrator to finish the work.\nTo begin, we’ll use data we’ve seen before: college football attendance.\nNow load the tidyverse.\nAnd the data.\nFirst, let’s get a top 10 list by announced attendance in the most recent season we have data. We’ll use the same tricks we used in the filtering assignment.\nThat looks good, so let’s save it to a new data frame and use that data frame instead going forward."
  },
  {
    "objectID": "barcharts.html#the-bar-chart",
    "href": "barcharts.html#the-bar-chart",
    "title": "15  Intro to ggplot with bar charts",
    "section": "15.1 The bar chart",
    "text": "15.1 The bar chart\nThe easiest thing we can do is create a simple bar chart of our data. Bar charts show magnitude. They invite you to compare how much more or less one thing is compared to others.\nWe could, for instance, create a bar chart of the total attendance. To do that, we simply tell ggplot2 what our dataset is, what element of the data we want to make the bar chart out of (which is the aesthetic), and the geometry type (which is the geom). It looks like this:\nggplot() + geom_bar(data=top10, aes(x=Institution))\nNote: top10 is our data, aes means aesthetics, x=Institution explicitly tells ggplot2 that our x value – our horizontal value – is the Institution field from the data, and then we add on the geom_bar() as the geometry. And what do we get when we run that?\n\nggplot() + \n  geom_bar(\n    data=top10, \n    aes(x=Institution)\n  )\n\n\n\n\nWe get … weirdness. We expected to see bars of different sizes, but we get all with a count of 1. What gives? Well, this is the default behavior. What we have here is something called a histogram, where ggplot2 helpfully counted up the number of times the Institution appears and counted them up. Since we only have one record per Institution, the count is always 1. How do we fix this? By adding weight to our aesthetic.\n\nggplot() + \n  geom_bar(\n    data=top10, \n    aes(x=Institution, weight=`2018`)\n  )\n\n\n\n\nCloser. But … what order is that in? And what happened to our count numbers on the left? Why are they in scientific notation?\nLet’s deal with the ordering first. ggplot2’s default behavior is to sort the data by the x axis variable. So it’s in alphabetical order. To change that, we have to reorder it. With reorder, we first have to tell ggplot what we are reordering, and then we have to tell it HOW we are reordering it. So it’s reorder(FIELD, SORTFIELD).\n\nggplot() + \n  geom_bar(\n    data=top10, \n    aes(\n      x=reorder(Institution, `2018`), \n      weight=`2018`\n      )\n    )\n\n\n\n\nBetter. We can argue about if the right order is smallest to largest or largest to smallest. But this gets us close. By the way, to sort it largest to smallest, put a negative sign in front of the sort field.\n\nggplot() + \n  geom_bar(\n    data=top10, \n    aes(\n      x=reorder(Institution, -`2018`), \n      weight=`2018`\n      )\n    )"
  },
  {
    "objectID": "barcharts.html#scales",
    "href": "barcharts.html#scales",
    "title": "15  Intro to ggplot with bar charts",
    "section": "15.2 Scales",
    "text": "15.2 Scales\nTo fix the axis labels, we need try one of the other main elements of the ggplot2 library, which is transform a scale. More often that not, that means doing something like putting it on a logarithmic scale or some other kind of transformation. In this case, we’re just changing how it’s represented. The default in ggplot2 for large values is to express them as scientific notation. Rarely ever is that useful in our line of work. So we have to transform them into human readable numbers.\nThe easiest way to do this is to use a library called scales and it’s already installed.\n\nlibrary(scales)\n\n\nAttaching package: 'scales'\n\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n\n\nTo alter the scale, we add a piece to our plot with + and we tell it which scale is getting altered and what kind of data it is. In our case, our Y axis is what is needing to be altered, and it’s continuous data (meaning it can be any number between x and y, vs discrete data which are categorical). So we need to add scale_y_continuous and the information we want to pass it is to alter the labels with a function called comma.\n\nggplot() + \n  geom_bar(\n    data=top10, \n    aes(\n      x=reorder(Institution, -`2018`), \n      weight=`2018`\n      )\n    ) + \n  scale_y_continuous(labels=comma)\n\n\n\n\nBetter."
  },
  {
    "objectID": "barcharts.html#styling",
    "href": "barcharts.html#styling",
    "title": "15  Intro to ggplot with bar charts",
    "section": "15.3 Styling",
    "text": "15.3 Styling\nWe are going to spend a lot more time on styling, but let’s add some simple labels to this with a new bit called labs which is short for labels.\n\nggplot() + \n  geom_bar(\n    data=top10, \n    aes(\n      x=reorder(Institution, -`2018`), \n      weight=`2018`)\n    ) + \n  scale_y_continuous(labels=comma) + \n  labs(\n    title=\"Top 10 Football Programs By Attendance\", \n    x=\"School\", \n    y=\"Attendance\"\n)\n\n\n\n\nThe library has lots and lots of ways to alter the styling – we can programmatically control nearly every part of the look and feel of the chart. One simple way is to apply themes in the library already. We do that the same way we’ve done other things – we add them. Here’s the light theme.\n\nggplot() + \n  geom_bar(\n    data=top10, \n    aes(x=reorder(Institution, -`2018`),\n        weight=`2018`)) + \n  scale_y_continuous(labels=comma) + \n  labs(\n    title=\"Top 10 Football Programs By Attendance\", \n    x=\"School\", \n    y=\"Attendance\") + \n  theme_light()\n\n\n\n\nOr the minimal theme:\n\nggplot() + \n  geom_bar(\n    data=top10, \n    aes(x=reorder(Institution, -`2018`),\n        weight=`2018`)) + \n  scale_y_continuous(labels=comma) + \n  labs(\n    title=\"Top 10 Football Programs By Attendance\", \n    x=\"School\", \n    y=\"Attendance\") + \n  theme_minimal()\n\n\n\n\nLater on, we’ll write our own themes. For now, the built in ones will get us closer to something that looks good."
  },
  {
    "objectID": "barcharts.html#one-last-trick-coord-flip",
    "href": "barcharts.html#one-last-trick-coord-flip",
    "title": "15  Intro to ggplot with bar charts",
    "section": "15.4 One last trick: coord flip",
    "text": "15.4 One last trick: coord flip\nSometimes, we don’t want vertical bars. Maybe we think this would look better horizontal. How do we do that? By adding coord_flip() to our code. It does what it says – it inverts the coordinates of the figures.\n\nggplot() + \n  geom_bar(\n    data=top10, \n    aes(x=reorder(Institution, -`2018`),\n        weight=`2018`)) + \n  scale_y_continuous(labels=comma) + \n  labs(\n    title=\"Top 10 Football Programs By Attendance\", \n    x=\"School\", \n    y=\"Attendance\") + \n  theme_minimal() + \n  coord_flip()"
  },
  {
    "objectID": "stackedbars.html",
    "href": "stackedbars.html",
    "title": "16  Stacked bar charts",
    "section": "",
    "text": "We’re going to use a dataset of college basketball games from this past season.\nFor this walkthrough:\n   Download csv file\n\nLoad the tidyverse.\n\nlibrary(tidyverse)\n\nAnd the data.\n\ngames <- read_csv(\"data/logs22.csv\")\n\nRows: 10775 Columns: 48\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): Season, TeamFull, Opponent, HomeAway, W_L, URL, Conference, Team\ndbl  (39): Game, TeamScore, OpponentScore, TeamFG, TeamFGA, TeamFGPCT, Team3...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nWhat we have here is every game in college football this season. The question we want to answer is this: Who had the most prolific offenses in the Big Ten? And how did they get there?\nSo to make this chart, we have to just add one thing to a bar chart like we did in the previous chapter. However, it’s not that simple.\nWe have game data, and we need season data. To get that, we need to do some group by and sum work. And since we’re only interested in the Big Ten, we have some filtering to do too. For this, we’re going to measure offensive production by rushing yards and passing yards. So if we have all the games a team played, and the rushing and passing yards for each of those games, what we need to do to get the season totals is just add them up.\n\ngames %>% \n  group_by(Conference, Team) %>% \n  summarise(\n    SeasonOffRebounds = sum(TeamOffRebounds),\n    SeasonTotalRebounds = sum(TeamTotalRebounds)\n  ) %>%\n  mutate(\n    SeasonDefRebounds = SeasonTotalRebounds - SeasonOffRebounds\n  ) %>% \n  select(\n    -SeasonTotalRebounds\n  ) %>% \n  filter(Conference == \"Big Ten\")\n\n# A tibble: 14 × 4\n# Groups:   Conference [1]\n   Conference Team           SeasonOffRebounds SeasonDefRebounds\n   <chr>      <chr>                      <dbl>             <dbl>\n 1 Big Ten    Illinois                     300               764\n 2 Big Ten    Indiana                      228               770\n 3 Big Ten    Iowa                         333               742\n 4 Big Ten    Maryland                     256               767\n 5 Big Ten    Michigan                     265               721\n 6 Big Ten    Michigan State               268               774\n 7 Big Ten    Minnesota                    132               674\n 8 Big Ten    Nebraska                     196               762\n 9 Big Ten    Northwestern                 226               715\n10 Big Ten    Ohio State                   225               706\n11 Big Ten    Penn State                   224               707\n12 Big Ten    Purdue                       295               794\n13 Big Ten    Rutgers                      267               715\n14 Big Ten    Wisconsin                    240               730\n\n\nBy looking at this, we can see we got what we needed. We have 14 teams and numbers that look like season totals for two types of rebounds. Save that to a new dataframe.\n\ngames %>% \n  group_by(Conference, Team) %>% \n  summarise(\n    SeasonOffRebounds = sum(TeamOffRebounds),\n    SeasonTotalRebounds = sum(TeamTotalRebounds)\n  ) %>%\n  mutate(\n    SeasonDefRebounds = SeasonTotalRebounds - SeasonOffRebounds\n  ) %>% \n  select(\n    -SeasonTotalRebounds\n  ) %>% \n  filter(Conference == \"Big Ten\") -> rebounds\n\nNow, the problem we have is that ggplot wants long data and this data is wide. So we need to use tidyr to make it long, just like we did in the transforming data chapter.\n\nrebounds %>% \n  pivot_longer(\n    cols=starts_with(\"Season\"), \n    names_to=\"Type\", \n    values_to=\"Rebounds\")\n\n# A tibble: 28 × 4\n# Groups:   Conference [1]\n   Conference Team     Type              Rebounds\n   <chr>      <chr>    <chr>                <dbl>\n 1 Big Ten    Illinois SeasonOffRebounds      300\n 2 Big Ten    Illinois SeasonDefRebounds      764\n 3 Big Ten    Indiana  SeasonOffRebounds      228\n 4 Big Ten    Indiana  SeasonDefRebounds      770\n 5 Big Ten    Iowa     SeasonOffRebounds      333\n 6 Big Ten    Iowa     SeasonDefRebounds      742\n 7 Big Ten    Maryland SeasonOffRebounds      256\n 8 Big Ten    Maryland SeasonDefRebounds      767\n 9 Big Ten    Michigan SeasonOffRebounds      265\n10 Big Ten    Michigan SeasonDefRebounds      721\n# … with 18 more rows\n\n\nWhat you can see now is that we have two rows for each team: One for rushing yards, one for passing yards. This is what ggplot needs. Save it to a new dataframe.\n\nrebounds %>% \n  pivot_longer(\n    cols=starts_with(\"Season\"), \n    names_to=\"Type\", \n    values_to=\"Rebounds\") -> reboundswide\n\nBuilding on what we learned in the last chapter, we know we can turn this into a bar chart with an x value, a weight and a geom_bar. What we are going to add is a fill. The fill will stack bars on each other based on which element it is. In this case, we can fill the bar by Type, which means it will stack the number of rushing yards on top of passing yards and we can see how they compare.\n\nggplot() + \n  geom_bar(\n    data=reboundswide, \n    aes(x=Team, weight=Rebounds, fill=Type)) + \n  coord_flip()\n\n\n\n\nWhat’s the problem with this chart?\nThere’s a couple of things, one of which we’ll deal with now: The ordering is alphabetical (from the bottom up). So let’s reorder the teams by Rebounds.\n\nggplot() + \n  geom_bar(\n    data=reboundswide, \n    aes(x=reorder(Team, Rebounds), \n        weight=Rebounds, \n        fill=Type)) + \n  coord_flip()\n\n\n\n\nAnd just like that … Purdue comes out on top? Huh. And look who is not last."
  },
  {
    "objectID": "circularbarcharts.html",
    "href": "circularbarcharts.html",
    "title": "17  Circular bar charts",
    "section": "",
    "text": "At the 27:36 mark in the Half Court Podcast, former Omaha World Herald Writer Chris Heady said “November basketball doesn’t matter, but it shows you where you are.”\nIt’s a tempting phrase to believe, especially a day after Nebraska lost the first game of the Fred Hoiberg era at home to a baseball school, UC Riverside. And it wasn’t close. The Huskers, because of a total roster turnover, were a complete mystery before the game. And what happened during it wasn’t pretty, so there was a little soul searching going on in Lincoln.\nBut does November basketball really not matter?\nLet’s look, using a new form of chart called a circular bar plot. It’s a chart type that combines several forms we’ve used before: bar charts to show magnitude, stacked bar charts to show proportion, but we’re going to add bending the chart around a circle to add some visual interstingness to it. We’re also going to use time as an x-axis value to make a not subtle circle of time reference – a common technique with circular bar charts.\nWe’ll use a dataset of every college basketball game last season.\nLoad your libraries.\nAnd load your data."
  },
  {
    "objectID": "circularbarcharts.html#does-november-basketball-matter",
    "href": "circularbarcharts.html#does-november-basketball-matter",
    "title": "17  Circular bar charts",
    "section": "17.1 Does November basketball matter?",
    "text": "17.1 Does November basketball matter?\nSo let’s test the notion of November Basketball Doesn’t Matter. What matters in basketball? Let’s start simple: Wins.\nSports Reference’s win columns are weird, so we need to scan through them and find W and L and we’ll give them numbers using case_when. I’m also going to filter out tournament basketball.\n\nwinlosslogs <- logs %>% \n  mutate(winloss = case_when(\n    grepl(\"W\", W_L) ~ 1, \n    grepl(\"L\", W_L) ~ 0)\n) \n\nNow we can group by date and conference and sum up the wins. How many wins by day does each conference get?\n\ndates <- winlosslogs %>% \n  group_by(Date, Conference) %>% \n  summarise(wins = sum(winloss))\n\n`summarise()` has grouped output by 'Date'. You can override using the\n`.groups` argument.\n\n\nEarlier, we did stacked bar charts. We have what we need to do that now.\n\nggplot() + \n  geom_bar(\n    data=dates, \n    aes(x=Date, weight=wins, fill=Conference)\n    ) + \n  theme_minimal()\n\n\n\n\nEeek. This is already looking not great. But to make it a circular bar chart, we add coord_polar() to our chart.\n\nggplot() + \n  geom_bar(\n    data=dates, \n    aes(x=Date, weight=wins, fill=Conference)\n    ) + \n  theme_minimal() + \n  coord_polar()\n\n\n\n\nBased on that, the day is probably too thin a slice, and there’s way too many conferences in college basketball. Let’s group this by months and filter out all but the power five conferences.\n\np5 <- c(\"SEC\", \"Big Ten\", \"Pac-12\", \"Big 12\", \"ACC\")\n\nTo get months, we’re going to use a function in the library lubridate called floor_date, which combine with mutate will give us a field of just months.\n\nwins <- winlosslogs %>% \n  mutate(month = floor_date(Date, unit=\"months\")) %>% \n  group_by(month, Conference) %>% \n  summarise(wins=sum(winloss)) %>% \n  filter(Conference %in% p5) \n\n`summarise()` has grouped output by 'month'. You can override using the\n`.groups` argument.\n\n\nNow we can use wins to make our circular bar chart of wins by month in the Power Five.\n\nggplot() + \n  geom_bar(\n    data=wins, \n    aes(x=month, weight=wins, fill=Conference)\n    ) + \n  theme_minimal() + \n  coord_polar()\n\n\n\n\nYikes. That looks a lot like a broken pie chart. So months are too thick of a slice. Let’s use weeks in our floor date to see what that gives us.\n\nwins <- winlosslogs %>% \n  mutate(week = floor_date(Date, unit=\"weeks\")) %>% \n  group_by(week, Conference) %>% \n  summarise(wins=sum(winloss)) %>% \n  filter(Conference %in% p5) \n\n`summarise()` has grouped output by 'week'. You can override using the\n`.groups` argument.\n\n\n\nggplot() + \n  geom_bar(\n    data=wins, \n    aes(x=week, weight=wins, fill=Conference)\n    ) + \n  theme_minimal() + \n  coord_polar()\n\n\n\n\nThat looks better. But what does it say? Does November basketball matter? What this is saying is … yeah, it kinda does. The reason? Lots of wins get piled up in November and December, during non-conference play. So if you are a team with NCAA tournament dreams, you need to win games in November to make sure your tournament resume is where it needs to be come March. Does an individual win or loss matter? Probably not. But your record in November does."
  },
  {
    "objectID": "circularbarcharts.html#does-it-show-you-where-you-are",
    "href": "circularbarcharts.html#does-it-show-you-where-you-are",
    "title": "17  Circular bar charts",
    "section": "17.2 Does it show you where you are?",
    "text": "17.2 Does it show you where you are?\nSo here is the problem we have:\n\nWe have data for every game. In the past, we were able to calculate the team wins and losses because the way the data records them is the Team is the main team, and they win or lose. The Opponent is recorded, but the Opponent has the mirror image of this game as well, where they are the Team. So essentially every game is in here twice – one for each team that plays in the game.\nWe need to attach the Opponent’s winning percentage to each game so we can decide if it’s a quality win for Team.\nThe Team name is not an exact copy of the Team name. So we can’t join them using it.\n\nSo what we have to do is invert the process that we’ve done before. We need to group by the Opponent – because the names will be consistent then – and we need to invert the wins and losses. A win in the W_L column is a win for the Team. That means each loss in the W_L column is a WIN for the Opponent.\nOnce we invert, the data looks very similar to what we’ve done before. One other thing: I noticed there’s some tournament games in here, so the filter at the end strips them out.\n\noppwinlosslogs <- logs %>% \n  mutate(winloss = case_when(\n    grepl(\"W\", W_L) ~ 0, \n    grepl(\"L\", W_L) ~ 1)\n) %>% \n  filter(Date < \"2020-03-19\")\n\nSo now we have a dataframe called oppwinlosslogs that has an inverted winloss column. So now we can group by the Opponent and sum the wins and it will tell us how many games the Opponent won. We can also count the wins and get a winning percentage.\n\noppwinlosslogs %>% \n  group_by(Opponent) %>% \n  summarise(games=n(), wins=sum(winloss)) %>% \n  mutate(winpct = wins/games) -> opprecord\n\nNow we have a dataframe of 659 opponent winning records. Wait, what? There’s 353 teams in major college basketball, so why 659? If you look through it, there’s a bunch of teams playing lower level teams. Given that they are lower level, they’re likely cannon fodder and will lose the game, and we’re going to filter them out in a minute.\nNow we can join the opponent winning percentage to our winlosslogs data so we can answer our question about quality wins.\n\nwinlosslogs <- logs %>% \n  mutate(winloss = case_when(\n    grepl(\"W\", W_L) ~ 1, \n    grepl(\"L\", W_L) ~ 0)\n) %>% \n  filter(Date < \"2020-03-19\")\n\n\nwinlosslogs %>% \n  left_join(opprecord, by=(\"Opponent\")) -> winswithopppct\n\nNow that we have a table called winswithopppct, we can filter out teams non power 5 teams and teams that won less than 60 percent of their games and run the same calculations in the book.\n\np5 <- c(\"SEC\", \"Big Ten\", \"Pac-12\", \"Big 12\", \"ACC\")\n\n\nwinswithopppct %>% \n  filter(winpct > .6) %>% \n  mutate(week = floor_date(Date, unit=\"weeks\")) %>% \n  group_by(week, Conference) %>% \n  summarise(wins=sum(winloss)) %>% \n  filter(Conference %in% p5) -> qualitywins\n\n`summarise()` has grouped output by 'week'. You can override using the\n`.groups` argument.\n\n\nNow with our dataframe called qualitywins, we can chart it again.\n\nggplot() + \n  geom_bar(\n    data=qualitywins, \n    aes(x=week, weight=wins, fill=Conference)\n    ) + \n  theme_minimal() + \n  coord_polar()\n\n\n\n\nLook at this chart and compare it to the first one."
  },
  {
    "objectID": "wafflecharts.html",
    "href": "wafflecharts.html",
    "title": "18  Waffle charts",
    "section": "",
    "text": "Pie charts are the devil. They should be an instant F in any data visualization class. The problem? How carefully can you evaluate angles and area? Unless they are blindingly obvious and only a few categories, not well. If you’ve got 25 categories, how can you tell the difference between 7 and 9 percent? You can’t.\nSo let’s introduce a better way: The Waffle Chart. Some call it a square pie chart. I personally hate that. Waffles it is.\nA waffle chart is designed to show you parts of the whole – proportionality. How many yards on offense come from rushing or passing. How many singles, doubles, triples and home runs make up a teams hits. How many shots a basketball team takes are two pointers versus three pointers.\nFirst, install the library in the console. We want a newer version of the waffle library than is in CRAN – where you normally get libraries from – so copy and paste this into your console:\ninstall.packages(\"waffle\")\nNow load it:"
  },
  {
    "objectID": "wafflecharts.html#making-waffles-with-vectors",
    "href": "wafflecharts.html#making-waffles-with-vectors",
    "title": "18  Waffle charts",
    "section": "18.1 Making waffles with vectors",
    "text": "18.1 Making waffles with vectors\nLet’s look at the debacle that was Nebraska vs. Michigan State in fall 2021 in college football. Here’s the box score, which we’ll use for this part of the walkthrough.\nMaybe the easiest way to do waffle charts, at least at first, is to make vectors of your data and plug them in. To make a vector, we use the c or concatenate function.\nSo let’s look at offense. Rushing vs passing.\n\nnu <- c(\"Rushing\"=187, \"Passing\"=255)\nms <- c(\"Rushing\"=71, \"Passing\"=183)\n\nSo what does the breakdown of the night look like?\nThe waffle library can break this down in a way that’s easier on the eyes than a pie chart. We call the library, add the data, specify the number of rows, give it a title and an x value label, and to clean up a quirk of the library, we’ve got to specify colors.\n\nwaffle(\n        nu, \n        rows = 10, \n        title=\"Nebraska's offense\", \n        xlab=\"1 square = 1 yard\", \n        colors = c(\"black\", \"red\")\n)\n\n\n\n\nOr, we could make this two teams in the same chart.\n\npassing <- c(\"Nebraska\"=255, \"Mighigan State\"=183)\n\n\nwaffle(\n        passing, \n        rows = 10, \n        title=\"Nebraska vs Michigan State: passing\", \n        xlab=\"1 square = 1 yard\", \n        colors = c(\"red\", \"black\")\n)\n\n\n\n\nSo what does it look like if we compare the two teams using the two vectors in the same chart? To do that – and I am not making this up – you have to create a waffle iron. Get it? Waffle charts? Iron?\n\niron(\n waffle(nu, \n        rows = 10, \n        title=\"Nebraska's offense\", \n        xlab=\"1 square = 1 yard\", \n        colors = c(\"black\", \"red\")\n        ),\n waffle(ms, \n        rows = 10, \n        title=\"Michigan State's offense\", \n        xlab=\"1 square = 1 yard\", \n        colors = c(\"black\", \"red\")\n        )\n)\n\n\n\n\nWhat do you notice about this chart? Notice how the squares aren’t the same size? Well, Nebraska out-gained Michigan State by a long way … AND LOST. So the squares aren’t the same size because the numbers aren’t the same. We can fix that by adding an unnamed padding number so the number of yards add up to the same thing. Let’s make the total for everyone be 442, Nebraska’s total yards of offense. So to do that, we need to add a padding of 188 to Michigan State. REMEMBER: Don’t name it or it’ll show up in the legend.\n\nnu <- c(\"Rushing\"=187, \"Passing\"=255)\nms <- c(\"Rushing\"=71, \"Passing\"=183, 188)\n\nNow, in our waffle iron, if we don’t give that padding a color, we’ll get an error. So we need to make it white. Which, given our white background, means it will disappear.\n\niron(\n waffle(nu, \n        rows = 10, \n        title=\"Nebraska's offense\", \n        xlab=\"1 square = 1 yard\", \n        colors = c(\"black\", \"red\")\n        ),\n waffle(ms, \n        rows = 10, \n        title=\"Michigan State's offense\", \n        xlab=\"1 square = 1 yard\", \n        colors = c(\"dark green\", \"black\", \"white\")\n        )\n)\n\n\n\n\nOne last thing we can do is change the 1 square = 1 yard bit – which makes the squares really small in this case – by dividing our vector. Remember what you learned in Swirl about math on vectors?\n\niron(\n waffle(nu/2, \n        rows = 10, \n        title=\"Nebraska's offense\", \n        xlab=\"1 square = 2 yards\", \n        colors = c(\"black\", \"red\")\n        ),\n waffle(ms/2, \n        rows = 10, \n        title=\"Michigan State's offense\", \n        xlab=\"1 square = 2 yards\", \n        colors = c(\"dark green\", \"black\", \"white\")\n        )\n)\n\n\n\n\nNews flash: Nebraska beat Michigan State everywhere but on the scoreboard and Nebraska is changing its fight song to “Everybody Hurts” by REM."
  },
  {
    "objectID": "linecharts.html",
    "href": "linecharts.html",
    "title": "19  Line charts",
    "section": "",
    "text": "So far, we’ve talked about bar charts – stacked or otherwise – are good for showing relative size of a thing compared to another thing. Stacked Bars and Waffle charts are good at showing proportions of a whole.\nLine charts are good for showing change over time.\nLet’s look at how we can answer this question: Why was Nebraska terrible at basketball last season?\nWe’ll need the logs of every game in college basketball for this.\nLet’s start getting all that we need. We can use the tidyverse shortcut.\nAnd now load the data.\nThis data has every game from every team in it, so we need to use filtering to limit it, because we just want to look at Nebraska. If you don’t remember, flip back to chapter 6.\nBecause this data has just Nebraska data in it, the dates are formatted correctly, and the data is long data (instead of wide), we have what we need to make line charts.\nLine charts, unlike bar charts, do have a y-axis. So in our ggplot step, we have to define what our x and y axes are. In this case, the x axis is our Date – the most common x axis in line charts is going to be a date of some variety – and y in this case is up to us. We’ve seen from previous walkthroughs that how well a team shoots the ball has a lot to do with how well a team does in a season, so let’s chart that.\nSee some problems here? The first you’ll probably see is the long COVID pause the team had to take. The real problem, though is that the Y axis doesn’t start with zero. That makes this look more dramatic than it is. To make the axis what you want, you can use scale_x_continuous or scale_y_continuous and pass in a list with the bottom and top value you want. You do that like this:\nNote also that our X axis labels are automated. It knows it’s a date and it just labels it by month."
  },
  {
    "objectID": "linecharts.html#this-is-too-simple.",
    "href": "linecharts.html#this-is-too-simple.",
    "title": "19  Line charts",
    "section": "19.1 This is too simple.",
    "text": "19.1 This is too simple.\nWith datasets, we want to invite comparison. So let’s answer the question visually. Let’s put two lines on the same chart. How does Nebraska compare to Michigan State, for example?\n\nmsu <- logs %>% filter(Team == \"Michigan State\")\n\nIn this case, because we have two different datasets, we’re going to put everything in the geom instead of the ggplot step. We also have to explicitly state what dataset we’re using by saying data= in the geom step.\nFirst, let’s chart Nebraska. Read carefully. First we set the data. Then we set our aesthetic. Unlike bars, we need an X and a Y variable. In this case, our X is the date of the game, Y is the thing we want the lines to move with. In this case, the Team Field Goal Percentage – TeamFGPCT.\n\nggplot() + geom_line(data=nu, aes(x=Date, y=TeamFGPCT), color=\"red\")\n\n\n\n\nNow, by using +, we can add Michigan State to it. REMEMBER COPY AND PASTE IS A THING. Nothing changes except what data you are using.\n\nggplot() + \n  geom_line(data=nu, aes(x=Date, y=TeamFGPCT), color=\"red\") + \n  geom_line(data=msu, aes(x=Date, y=TeamFGPCT), color=\"green\")\n\n\n\n\nLet’s flatten our lines out by zeroing the Y axis.\n\nggplot() + \n  geom_line(data=nu, aes(x=Date, y=TeamFGPCT), color=\"red\") + \n  geom_line(data=msu, aes(x=Date, y=TeamFGPCT), color=\"green\") + \n  scale_y_continuous(limits = c(0, .65))\n\n\n\n\nSo visually speaking, the difference between Nebraska and Michigan State’s season is that Michigan State stayed mostly on an even keel, and Nebraska went on a two month swoon."
  },
  {
    "objectID": "linecharts.html#but-what-if-i-wanted-to-add-a-lot-of-lines.",
    "href": "linecharts.html#but-what-if-i-wanted-to-add-a-lot-of-lines.",
    "title": "19  Line charts",
    "section": "19.2 But what if I wanted to add a lot of lines.",
    "text": "19.2 But what if I wanted to add a lot of lines.\nFine. How about all Power Five Schools? This data for example purposes. You don’t have to do it.\n\npowerfive <- c(\"SEC\", \"Big Ten\", \"Pac-12\", \"Big 12\", \"ACC\")\n\np5conf <- logs %>% filter(Conference %in% powerfive)\n\nI can keep layering on layers all day if I want. And if my dataset has more than one team in it, I need to use the group command. And, the layering comes in order – so if you’re going to layer a bunch of lines with a smaller group of lines, you want the bunch on the bottom. So to do that, your code stacks from the bottom. The first geom in the code gets rendered first. The second gets layered on top of that. The third gets layered on that and so on.\n\nggplot() + \n  geom_line(data=p5conf, aes(x=Date, y=TeamFGPCT, group=Team), color=\"grey\") + \n  geom_line(data=nu, aes(x=Date, y=TeamFGPCT), color=\"red\") + \n  geom_line(data=msu, aes(x=Date, y=TeamFGPCT), color=\"green\") + \n  scale_y_continuous(limits = c(0, .65))\n\n\n\n\nWhat do we see here? How has Nebraska and Michigan State’s season evolved against all the rest of the teams in college basketball?\nBut how does that compare to the average? We can add that pretty easily by creating a new dataframe with it and add another geom_line.\n\naverage <- logs %>% group_by(Date) %>% summarise(mean_shooting=mean(TeamFGPCT))\n\n\nggplot() + \n  geom_line(data=p5conf, aes(x=Date, y=TeamFGPCT, group=Team), color=\"grey\") + \n  geom_line(data=nu, aes(x=Date, y=TeamFGPCT), color=\"red\") + \n  geom_line(data=msu, aes(x=Date, y=TeamFGPCT), color=\"green\") + \n  geom_line(data=average, aes(x=Date, y=mean_shooting), color=\"black\") + \n  scale_y_continuous(limits = c(0, .65))"
  },
  {
    "objectID": "stepcharts.html",
    "href": "stepcharts.html",
    "title": "20  Step charts",
    "section": "",
    "text": "There’s great examples out there. First is the Washignton Post looking at Lebron passing Jordan’s career point total. Another is John Burn-Murdoch’s work at the Financial Times (which is paywalled) about soccer stars. Here’s an example of his work outside the paywall.\nTo replicate this, we need cumulative data – data that is the running total of data at a given point. So think of it this way – Nebraska scores 50 points in a basketball game and then 50 more the next, their cumulative total at two games is 100 points.\nStep charts can be used for all kinds of things – showing how a player’s career has evolved over time, how a team fares over a season, or franchise history. Let’s walk through an example.\nLet’s look at Fred Hoiberg’s team last season.\nFor this walkthrough:\n   Download csv file\n\nWe’ll need the tidyverse.\n\nlibrary(tidyverse)\n\nAnd we need to load our logs data we just downloaded.\n\nlogs <- read_csv(\"data/logs21.csv\")\n\nRows: 8229 Columns: 48\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): Season, TeamFull, Opponent, HomeAway, W_L, URL, Conference, Team\ndbl  (39): Game, TeamScore, OpponentScore, TeamFG, TeamFGA, TeamFGPCT, Team3...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nHere we’re going to look at the scoring differential of teams. If you score more than your opponent, you win. So it stands to reason that if you score a lot more than your opponent over the course of a season, you should be very good, right? Let’s see.\nThe first thing we’re going to do is calculate that differential. Then, we’ll group it by the team. After that, we’re going to summarize using a new function called cumsum or cumulative sum – the sum for each game as we go forward. So game 1’s cumsum is the differential of that game. Game 2’s cumsum is Game 1 + Game 2. Game 3 is Game 1 + 2 + 3 and so on.\n\ndifflogs <- logs %>% \n  mutate(Differential = TeamScore - OpponentScore) %>% \n  group_by(Team) %>% \n  mutate(CumDiff = cumsum(Differential))\n\nNow that we have the cumulative sum for each, let’s filter it down to just Big Ten teams.\n\nbigdiff <- difflogs %>% filter(Conference == \"Big Ten\")\n\nThe step chart is it’s own geom, so we can employ it just like we have the others. It works almost exactly the same as a line chart, but it uses the cumulative sum instead of a regular value and, as the name implies, creates a step like shape to the line instead of a curve.\n\nggplot() + geom_step(data=bigdiff, aes(x=Date, y=CumDiff, group=Team))\n\n\n\n\nLet’s try a different element of the aesthetic: color, but this time inside the aesthetic. Last time, we did the color outside. When you put it inside, you pass it a column name and ggplot will color each line based on what thing that is, and it will create a legend that labels each line that thing.\n\nggplot() + \n  geom_step(\n    data=bigdiff, \n    aes(x=Date, y=CumDiff, group=Team, color=Team)\n    )\n\n\n\n\nFrom this, we can see a handful of teams in the Big Ten had negative point differentials last season. But which is which? And which one is Nebraska? Too many colors and it’s too hard to tell. How to sort that out? Let’s add some helpers beyond layering.\nLet’s look at the top team plus Nebraska.\n\nnu <- bigdiff %>% filter(Team == \"Nebraska\")\nil <- bigdiff %>% filter(Team == \"Illinois\")\n\nLet’s introduce a couple of new things here. First, note when I take the color OUT of the aesthetic, the legend disappears.\nThe second thing I’m going to add is the annotation layer. In this case, I am adding a text annotation layer, and I can specify where by adding in a x and a y value where I want to put it. This takes some finesse. After that, I’m going to add labels and a theme.\n\nggplot() + \n  geom_step(\n    data=bigdiff, \n    aes(x=Date, y=CumDiff, group=Team), \n    color=\"light grey\") +\n  geom_step(\n    data=nu, \n    aes(x=Date, y=CumDiff, group=Team), \n    color=\"red\") + \n  geom_step(\n    data=il, \n    aes(x=Date, y=CumDiff, group=Team), \n    color=\"orange\") +\n  annotate(\n    \"text\", \n    x=(as.Date(\"2021-02-10\")), \n    y=-70, \n    label=\"Nebraska\") +\n  annotate(\n    \"text\", \n    x=(as.Date(\"2021-03-01\")), \n    y=330, \n    label=\"Illinois\") +\n  labs(\n    x=\"Date\", \n    y=\"Cumulative Point Differential\", \n    title=\"Nebraska's season long slide\", \n    subtitle=\"The Huskers started solidly but ended up being outscored by more than any other Big Ten team.\", \n    caption=\"Source: Sports-Reference.com | By Matt Waite\") +\n  theme_minimal()"
  },
  {
    "objectID": "dumbbellcharts.html",
    "href": "dumbbellcharts.html",
    "title": "21  Dumbbell and lollipop charts",
    "section": "",
    "text": "Second to my love of waffle charts because I’m always hungry, dumbbell charts are an excellently named way of showing the difference between two things on a number line – a start and a finish, for instance. Or the difference between two related things. Say, turnovers and assists.\nLollipop charts – another excellent name – are a variation on bar charts. They do a good job of showing magnitude and difference between things.\nTo use both of them, you need to add a new library:\ninstall.packages(\"ggalt\")\nLet’s give it a whirl."
  },
  {
    "objectID": "dumbbellcharts.html#dumbbell-plots",
    "href": "dumbbellcharts.html#dumbbell-plots",
    "title": "21  Dumbbell and lollipop charts",
    "section": "21.1 Dumbbell plots",
    "text": "21.1 Dumbbell plots\nFor this, let’s use college football game logs from this season so far.\nFor this walkthrough:\n   Download csv file\n\nAnd load it.\n\nlogs <- read_csv(\"data/footballlogs21.csv\")\n\nRows: 740 Columns: 54\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): HomeAway, Opponent, Result, TeamFull, TeamURL, Outcome, Team, Con...\ndbl  (45): Game, PassingCmp, PassingAtt, PassingPct, PassingYds, PassingTD, ...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nFor the first example, let’s look at the difference between a team’s giveaways – turnovers lost – versus takeaways, turnovers gained. To get this, we’re going to add up all offensive turnovers and defensive turnovers for a team in a season and take a look at where they come out. To make this readable, I’m going to focus on the Big Ten.\n\nturnovers <- logs %>%\n  group_by(Team, Conference) %>% \n  summarise(\n    Giveaways = sum(TotalTurnovers), \n    Takeaways = sum(DefTotalTurnovers)) %>%\n  filter(Conference == \"Big Ten Conference\")\n\n`summarise()` has grouped output by 'Team'. You can override using the\n`.groups` argument.\n\n\nNow, the way that the geom_dumbbell works is pretty simple when viewed through what we’ve done before. There’s just some tweaks.\nFirst: We start with the y axis. The reason is we want our dumbbells going left and right, so the label is going to be on the y axis.\nSecond: Our x is actually two things: x and xend. What you put in there will decide where on the line the dot appears.\n\nggplot() + \n  geom_dumbbell(\n    data=turnovers, \n    aes(y=Team, x=Takeaways, xend=Giveaways)\n  )\n\n\n\n\nWell, that’s a chart alright, but what dot is the giveaways and what are the takeaways? To fix this, we’ll add colors.\nSo our choice of colors here is important. We want giveaways to be seen as bad and takeaways to be seen as good. So lets try red for giveaways and green for takeaways. To make this work, we’ll need to do three things: first, use the English spelling of color, so colour. The, uh, colour is the bar between the dots, the x_colour is the color of the x value dot and the xend_colour is the color of the xend dot. So in our setup, takeaways are x, they’re good, so they’re green.\n\nggplot() + \n  geom_dumbbell(\n    data=turnovers, \n    aes(y=Team, x=Takeaways, xend=Giveaways),\n    colour = \"grey\",\n    colour_x = \"green\",\n    colour_xend = \"red\")\n\n\n\n\nBetter. Let’s make two more tweaks. First, let’s make the whole thing bigger with a size element. And let’s add theme_minimal to clean out some cruft.\n\nggplot() + \n  geom_dumbbell(\n    data=turnovers, \n    aes(y=Team, x=Takeaways, xend=Giveaways),\n    size = 1,\n    color = \"grey\",\n    colour_x = \"green\",\n    colour_xend = \"red\") + \n  theme_minimal()\n\n\n\n\nAnd now we have a chart that tells a story – got green on the right? That’s good. A long distance between green and red? Better. But what if we sort it by good turnovers?\n\nggplot() + \n  geom_dumbbell(\n    data=turnovers, \n    aes(y=reorder(Team, Takeaways), x=Takeaways, xend=Giveaways),\n    size = 1,\n    color = \"grey\",\n    colour_x = \"green\",\n    colour_xend = \"red\") + \n  theme_minimal()\n\n\n\n\nBelieve it or not, Iowa had the most takeaways in the Big Ten this season."
  },
  {
    "objectID": "dumbbellcharts.html#lollipop-charts",
    "href": "dumbbellcharts.html#lollipop-charts",
    "title": "21  Dumbbell and lollipop charts",
    "section": "21.2 Lollipop charts",
    "text": "21.2 Lollipop charts\nSticking with takeaways, lollipops are similar to bar charts in that they show magnitude. And like dumbbells, they are similar in that we start with a y – the traditional lollipop chart is on its side – and we only need one x. The only additional thing we need to add is that we need to tell it that it is a horizontal chart.\n\nggplot() + \n  geom_lollipop(\n    data=turnovers, \n    aes(y=Team, x=Takeaways), \n    horizontal = TRUE\n    )\n\n\n\n\nWe can do better than this with a simple theme_minimal and some better labels.\n\nggplot() + \n  geom_lollipop(\n    data=turnovers, \n    aes(y=reorder(Team, Takeaways), x=Takeaways), \n    horizontal = TRUE\n    ) + theme_minimal() + \n  labs(title = \"Nebraska's defense improved, but needs more takeaways\", y=\"Team\")\n\n\n\n\nHow about some layering?\n\nnu <- turnovers %>% filter(Team == \"Nebraska\")\n\n\nggplot() + \n  geom_lollipop(\n    data=turnovers, \n    aes(y=reorder(Team, Takeaways), x=Takeaways), \n    horizontal = TRUE\n    ) + \n  geom_lollipop(\n    data=nu,\n    aes(y=Team, x=Takeaways),\n    horizontal = TRUE,\n    color = \"red\"\n  ) + \n  theme_minimal() + \n  labs(title = \"Nebraska's defense wasn't as bad as you think\", y=\"Team\")\n\n\n\n\nThe headline says it all."
  },
  {
    "objectID": "scatterplots.html",
    "href": "scatterplots.html",
    "title": "22  Scatterplots",
    "section": "",
    "text": "On the Monday, Sept. 21, 2020 edition of the Pick Six Podcast, Omaha World Herald reporter Sam McKewon talked a little about the Nebraska mens basketball team. Specifically the conversation was about a new roster release, and how the second year of Fred Hoiberg ball was going to look very different, starting with the heights of the players. After a near complete roster turnover, the players on the team now were nearly all taller than 6’4”, and one of the shorter ones is penciled in as the starting point guard.\nWhy is that important? One reason, McKewon posited, is that teams made a lot of three point shots on Nebraska. In fact, Nebraska finished dead last in the conference in three points shots made against them. McKewon chalked this up to bad perimeter defense, and that Nebraska needed to improve it. Being taller – or more specifically having the longer arms that go with being taller – will help with that, McKewon said.\nBetter perimeter defense, better team.\nWell, we know how the season went: 7 wins, same as the previous year.\nBut the question before you is this: is what McKewon said true? Does keeping a lid on your opponent’s ability to score three pointers mean more wins?\nThis is what we’re going to start to answer today. And we’ll do it with scatterplots and regressions. Scatterplots are very good at showing relationships between two numbers.\nFirst, we need libraries and every college basketball game from the 2019-2020 season. Why that season? Because I did this with the COVID season and everything was wonky and made no sense. To make it make sense, you had to do a ton of twisting and turning and that was pointless. What we’re interested in is less about a specific team and more about a general point: Are these numbers related and by how much? What can they tell you about your team in general?\nLoad the tidyverse.\nAnd the data.\nTo do this, we need all teams and their season stats. How much, team to team, does a thing matter? That’s the question you’re going to answer.\nIn our case, we want to know how much do three point shots made influence wins? How much difference can we explain in wins by knowing how many threes the other team made against you? We’re going to total up the number of threes each team allowed and their season wins in one swoop.\nTo do this, we need to use conditional logic – case_when in this case – to determine if the team won or lost the game. In this case, we’ll create a new column called winloss. Case when statements can be read like this: When This is True, Do This. This bit of code – which you can use in a lot of contexts in this class – uses the grepl function to look for the letter W in the W_L column and, if it finds it, makes winloss 1. If it finds an L, it makes it 0. Sum your winloss column and you have your season win total. The reason we have to use grepl to find W or L is because Sports Reference will record overtime wins differently than regular wins. Same with losses.\nNow we can get a dataframe together that gives us the total wins for each team, and the total three point shots made. We’ll call that new dataframe threedef.\nNow let’s look at the scatterplot. With a scatterplot, we put what predicts the thing on the X axis, and the thing being predicted on the Y axis. In this case, X is our three pointers given up, y is our wins.\nLet’s talk about this. This seems kind of random, but clustered around the middle. There’s not really a clear pattern here. But can we get a better sense of this? Yes, by adding another geom – geom_smooth. It’s identical to our geom_point, but we add a method to the end, which in this case we’re using the linear method or lm.\nA straight line across is bad. It means there’s no pattern here. The numbers don’t suggest anything. The dots are very spread out. Which is a clue that you should be asking a question here: how strong of a relationship is this? How much can threes given up explain wins? Can we put some numbers to this?\nOf course we can. We can apply a linear model to this – remember Chapter 9? We’re going to create an object called fit, and then we’re going to put into that object a linear model – lm – and the way to read this is “wins are predicted by opponent threes”. Then we just want the summary of that model.\nRemember from Chapter 9: There’s just a few things you really need.\nThe first thing: R-squared. In this case, the Adjusted R-squared value is -0.0004098, which we can interpret as the number of threes the opponent makes predicts about a teeny tiny percent of the variance in wins. Which sounds not great.\nSecond: The P-value. We want anything less than .05. If it’s above .05, the difference between them is not statistically significant – it’s probably explained by random chance. In our case, we have 0.7106. Is that more than .05? Yes. Yes it is. So this is random. There’s no relationship between the number of threes the opponent makes and the number of wins a team has.\nNormally, we’d stop here, but let’s look at the third element: The coefficient. In this case, the coefficient for TeamOpp3P is -0.001400. What this model predicts, given that and the intercept of 17.199150, is this: Every team starts with about 17 wins. For every 100 three pointers the other team makes, you lose .14 games off that total. So if you give up 100 threes in a season, you’ll be a 17 win team. Give up 200, you’re closer to a 16 win team, and so on. How am I doing that? Remember your algebra and y = mx + b. In this case, y is the wins, m is the coefficient, x is the number of threes given up and b is the intercept.\nLet’s use Nebraska as an example. They had 276 threes scored on them in the 2019-2020 season.\ny = -0.001400 * 276 + 17.199150 or 16.8 wins.\nHow many wins did Nebraska have? 7.\nWhat does that mean? It means that as disappointing a season as it was, Nebraska UNDERPERFORMED according to this model. But our R-squared is so small that even if this weren’t random, it would be largely pointless. Put another way: more than 99 percent of the difference in wins between teams is predicted by something else.\nWhere is Nebraska on the plot? We know we can use layering for that."
  },
  {
    "objectID": "scatterplots.html#lets-see-it-work",
    "href": "scatterplots.html#lets-see-it-work",
    "title": "22  Scatterplots",
    "section": "22.1 Let’s see it work",
    "text": "22.1 Let’s see it work\nOne thing we do know is related is shooting percentage. Shoot better, win games. Simple. But how well does that work?\nWe could just average together each team’s shooting night, but this isn’t the same thing as the season shooting average. It’s the average of shooting percentages. To get the season average, we have to sum attempts and makes and do the math ourselves. Averaging the percentages will get us close, but be careful when you do things like this that you’re describing your number correctly.\nLet’s do this the hard – read: correct – way.\n\nshooting <- winlosslogs %>% \n  group_by(Team, season) %>% \n  summarise(\n    Wins = sum(winloss), \n    Shots = sum(TeamFGA),\n    Makes = sum(TeamFG)\n    ) %>% \n  mutate(AvgShootingPct = Makes/Shots) %>% \n  na.omit()\n\n`summarise()` has grouped output by 'Team'. You can override using the\n`.groups` argument.\n\n\nNow we can chart it and see what our relationship looks like.\n\nggplot() + \n  geom_point(data=shooting, aes(x=AvgShootingPct, y=Wins)) +\n  geom_smooth(data=shooting, aes(x=AvgShootingPct, y=Wins), method=\"lm\")\n\n`geom_smooth()` using formula 'y ~ x'\n\n\n\n\n\nThis is what a positive relationship looks like – sloping up and to the right. The better you shoot, the more you win. If it were reversed – the better you shot, the fewer wins you got, the line would start at the top left and go down to the right. The direction of the line indicates the relationship between the numbers.\nLet’s get our linear regression stats.\n\nshootfit <- lm(Wins ~ AvgShootingPct, data = shooting)\nsummary(shootfit)\n\n\nCall:\nlm(formula = Wins ~ AvgShootingPct, data = shooting)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-14.6777  -3.3738  -0.0529   3.0892  17.2843 \n\nCoefficients:\n               Estimate Std. Error t value Pr(>|t|)    \n(Intercept)     -50.733      1.862  -27.24   <2e-16 ***\nAvgShootingPct  153.367      4.218   36.36   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 4.91 on 2106 degrees of freedom\nMultiple R-squared:  0.3857,    Adjusted R-squared:  0.3854 \nF-statistic:  1322 on 1 and 2106 DF,  p-value: < 2.2e-16\n\n\nThe p-value isn’t random. The adjusted R-squared is pushing 40 percent. We’ve got something here. Let’s use our coefficents to look at Nebraska’s 2019-2020 season (not the COVID season, because all the nunmbers are super weird in that season).\n\n(153.942 * .405) + -51.155 \n\n[1] 11.19151\n\n\nSo this model says that based only on Nebraska’s shooting percentage, they should have won 11 games. They won 7. So per our model, Nebraska underperformed. Obviously there’s room for improvement here, but you can see the power in scatterplots + regression."
  },
  {
    "objectID": "bubblecharts.html",
    "href": "bubblecharts.html",
    "title": "23  Bubble charts",
    "section": "",
    "text": "If you want to see it work spectacularly well, watch a semi-famous Ted Talk by Hans Rosling from 2006 where bubble charts were the centerpiece. It’s worth watching. It’ll change your perspective on the world. No seriously. It will.\nAnd since then, people have wanted bubble charts. And we’re back to the original problem: They’re hard. There’s a finite set of circumstances where they work.\nFirst, I’m going to show you an example of them not working to illustrate the point.\nI’m going to load up my libraries.\n\nlibrary(tidyverse)\n\nSo for this example, I want to look at where Big Ten teams compare to the rest of college football last season. Is the Big Ten’s reputation for tough games and defenses earned? Can we see patterns in good team vs bad teams?\nI’m going to create a scatterplot with offensive yards per play on the X axis and defensive yards per play on the y axis. We can then divide the grid into four quadrants. Teams with high yards per offensive play and low defensive yards per play are teams with good offenses and good defenses. The opposite means bad defense, bad offense. Then, to drive the point home, I’m going to make the dot the size of the total wins on the season – the bubble in my bubble charts.\nWe’ll use this season’s college football games.\nFor this walkthrough:\n   Download csv file\n\nAnd load it.\n\nlogs <- read_csv(\"data/footballlogs21.csv\")\n\nRows: 740 Columns: 54\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): HomeAway, Opponent, Result, TeamFull, TeamURL, Outcome, Team, Con...\ndbl  (45): Game, PassingCmp, PassingAtt, PassingPct, PassingYds, PassingTD, ...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nTo do this, I’ve got some work to do. First, I need to mutate the outcomes of the games into 1s and 0s so I can add up the wins. We’ve done this before, so this won’t be new to you, just adjusted slightly from basketball data.\n\nwinlosslogs <- logs %>% \n  mutate(\n    wins = case_when(\n      grepl(\"W\", Outcome) ~ 1, \n      grepl(\"L\", Outcome) ~ 0)\n)\n\nNow I have some more work to do. My football logs data has the yards per play of each game, and I could average those together and get something very close to what I’m going to do, but averaging each games yards per play is not the same thing as calculating it, so we’re going to calculate it.\n\nwinlosslogs %>% \n  group_by(Team, Conference) %>% \n  summarise(\n    TotalPlays = sum(OffensivePlays), \n    TotalYards = sum(OffensiveYards), \n    DefensivePlays = sum(DefPlays), \n    DefensiveYards = sum(DefYards), \n    TotalWins = sum(wins)) %>% \n  mutate(\n    OffensiveYPP = TotalYards/TotalPlays, \n    DefensiveYPP = DefensiveYards/DefensivePlays) -> ypp\n\n`summarise()` has grouped output by 'Team'. You can override using the\n`.groups` argument.\n\n\nA bubble chart is just a scatterplot with one additional element in the aesthetic – a size. Here’s the scatterplot version.\n\nggplot() + \n  geom_point(\n    data=ypp, aes(x=OffensiveYPP, y=DefensiveYPP)\n    )\n\n\n\n\nLooks kind of random, eh? In this case, that’s not that bad because we’re not claiming a relationship. We’re saying the location on the chart has meaning. So, do teams on the bottom right – good offense, good defense – win more games?\nLet’s add the size element.\n\nggplot() + \n  geom_point(\n    data=ypp, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins)\n    )\n\n\n\n\nWhat does this chart tell you? We can see a general pattern that there are more big dots on the bottom right than the upper left. But we can make this more readable by adding an alpha element outside the aesthetic – alpha in this case is transparency – and we can manually change the size of the dots by adding scale_size and a range.\n\nggplot() + \n  geom_point(\n    data=ypp, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins),\n    alpha = .3) + \n  scale_size(range = c(3, 8), name=\"Wins\")\n\n\n\n\nAnd by now, you now know to add in the Big Ten as a layer, I would hope.\n\nbigten <- ypp %>% filter(Conference == \"Big Ten Conference\")\n\n\nggplot() + \n  geom_point(\n    data=ypp, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"grey\", \n    alpha=.5) + \n  geom_point(\n    data=bigten, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"red\")\n\n\n\n\nLet’s add some things to this chart to help us out. First, let’s add lines that show us the average of all teams for those two metrics. So first, we need to calculate those. Because I have grouped data, it’s going to require me to ungroup it so I can get just the total average of those two numbers.\n\nypp %>% \n  ungroup() %>% \n  summarise(\n    offense = mean(OffensiveYPP), \n    defense = mean(DefensiveYPP)\n    )\n\n# A tibble: 1 × 2\n  offense defense\n    <dbl>   <dbl>\n1    5.87    5.52\n\n\nNow we can use those averages to add two more geoms – geom_vline and geom_hline, for vertical lines and horizontal lines.\n\nggplot() + \n  geom_point(\n    data=ypp, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"grey\", \n    alpha=.5) + \n  geom_point(\n    data=bigten, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"red\") + \n  geom_vline(xintercept = 5.863151) + \n  geom_hline(yintercept = 5.448228)\n\n\n\n\nNow, let’s add another new geom for us, using a new library called ggrepel, which will help us label the dots without overwriting other labels. So we’ll have to install that in the console:\n`install.packages(“ggrepel”)\n\nlibrary(ggrepel)\n\nAnd with that, we can add labels to the dots. The geom_text_repel is pretty much the exact same thing as your Big Ten geom point, but instead of a size, you include a label.\n\nggplot() + \n  geom_point(\n    data=ypp, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"grey\", \n    alpha=.5) + \n  geom_point(\n    data=bigten, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"red\") + \n  geom_vline(xintercept = 5.863151) + \n  geom_hline(yintercept = 5.448228) +\n  geom_text_repel(\n    data=bigten, \n    aes(x=OffensiveYPP, y=DefensiveYPP, label=Team)\n  )\n\n\n\n\nWell, what do you know about that? Nebraska was … really a mixed bag this season.\nAll that’s left is some labels and some finishing touches.\n\nggplot() + \n  geom_point(\n    data=ypp, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"grey\", \n    alpha=.5) + \n  geom_point(\n    data=bigten, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"red\") + \n  geom_vline(xintercept = 5.863151) + \n  geom_hline(yintercept = 5.448228) +\n  geom_text_repel(\n    data=bigten, \n    aes(x=OffensiveYPP, y=DefensiveYPP, label=Team)\n  ) +\n  labs(title=\"Is Nebraska moving up to the Big Ten's best?\", subtitle=\"The Huskers offense and defense puts it among ranked teams in the conference.\", caption=\"Source: NCAA | By Matt Waite\")  + theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    )"
  },
  {
    "objectID": "beeswarmplots.html",
    "href": "beeswarmplots.html",
    "title": "24  Beeswarm plots",
    "section": "",
    "text": "A beeswarm plot is sometimes called a column scatterplot. It’s an effective way to show how individual things – teams, players, etc. – are distributed along a numberline. The column is a grouping – say positions in basketball – and the dots are players, and the dots cluster where the numbers are more common. So think of it like a histogram mixed with a scatterplot crossed with a bar chart.\nAn example will help.\nFirst things first: Install ggbeeswarm with install.packages(\"ggbeeswarm\")\nLike ggalt and ggrepel, ggbeeswarm adds a couple new geoms to ggplot. We’ll need to load it, the tidyverse and, for later, ggrepel.\nAnother bit of setup: we need to set the seed for the random number generator. The library “jitters” the dots in the beeswarm randomly. If we don’t set the seed, we’ll get different results each time. Setting the seed means we get the same look.\nSo let’s look at last year’s basketball team as a group of shooters. The team was disappointing – we know that – but what kind of a problem is it going to be that we’re returning basically no one from it?\nFirst we’ll load our player data.\nWe know this data has a lot of players who didn’t play, so let’s get rid of them.\nNow let’s ask what makes a good shooter? The best measure, in my book, is True Shooting Percentage. It’s a combination of weighted field goal shooting – to account for three pointers – and free throws. Our data has TS%, but if we include all players, we’ll have too many dots. So let’s narrow it down. A decent tool for cutoffs? Field goal attempts. Let’s get a quick look at them.\nThe median number of shots is 69, but we only really care about good ones. So let’s use 152 attempts – the third quartile – as our cutoff.\nNow we’ve got enough for a beeswarm plot. It works very much like you would expect – the group value is the x, the number is the y. We’re going to beeswarm by position, and the dots will be true shooting percentage.\nYou can see that there’s a lot fewer centers who have attempted more than 152 shots than guards, but then there’s a lot more guards in college basketball than anything else. In the guards column, note that fat width of the swarm is between .5 and .6. So that means most guards who shoot more than 152 shots end up in that area. They’re the average shooter at that level. You can see, some are better, some are worse.\nSo where are the Nebraska players in that mix?\nWe’ll filter players on Nebraska who meet our criteria.\nFive Cornhuskers took more than 152 shots. Number returning this season? Three.\nBut how good are they as true shooters?\nWhen you add another beeswarm, we need to pass another element in – we need to tell it if we’re grouping on the x value. Not sure why, but you’ll get a warning if you don’t.\nOoof. Best we can muster is middle of the fat part. Who is that?\nThis is where we can use ggrepel. Let’s add a text layer and label the dots.\nSo Teddy Allen was our best shooter by true shooting percentage. The rest were below average shooters for that volume of shooting."
  },
  {
    "objectID": "beeswarmplots.html#a-few-other-options",
    "href": "beeswarmplots.html#a-few-other-options",
    "title": "24  Beeswarm plots",
    "section": "24.1 A few other options",
    "text": "24.1 A few other options\nThe ggbeeswarm library has a couple of variations on the geom_beeswarm that may work better for your application. They are geom_quasirandom and geom_jitter.\nThere’s not a lot to change from our example to see what they do.\n\nggplot() + \n  geom_quasirandom(\n    data=shooters, \n    groupOnX=TRUE, \n    aes(x=Pos, y=`TS%`), color=\"grey\") + \n  geom_quasirandom(\n    data=nu, \n    groupOnX=TRUE, \n    aes(x=Pos, y=`TS%`), color=\"red\") + \n  geom_text_repel(\n    data=nu, \n    aes(x=Pos, y=`TS%`, label=Player))\n\n\n\n\nQuasirandom spreads out the dots you see in beeswarm using – you guessed it – quasirandom spacing.\nFor geom_jitter, we need to remove the groupOnX value. Why? No clue.\n\nggplot() + \n  geom_jitter(\n    data=shooters, \n    aes(x=Pos, y=`TS%`), color=\"grey\") + \n  geom_jitter(\n    data=nu, \n    aes(x=Pos, y=`TS%`), color=\"red\") + \n  geom_text_repel(\n    data=nu, \n    aes(x=Pos, y=`TS%`, label=Player))\n\n\n\n\ngeom_jitter spreads out the dots evenly across the width of the column, randomly deciding where in the line of the true shooting percentage they appear.\nWhich one is right for you? You’re going to have to experiment and decide. This is the art in the art and a science."
  },
  {
    "objectID": "bumpcharts.html",
    "href": "bumpcharts.html",
    "title": "25  Bump charts",
    "section": "",
    "text": "The requirements are that you have a row of data for a team, in that week, with their rank.\nThis is another extension to ggplot, and you’ll install it the usual way: install.packages(\"ggbump\")\n\nlibrary(tidyverse)\nlibrary(ggbump)\n\nLet’s use last season’s college football playoff rankings (this year wasn’t done as of this writing):\nFor this walkthrough:\n   Download csv file\n\n\nrankings <- read_csv(\"data/cfbranking.csv\")\n\nRows: 125 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): Team, ShortTeam\ndbl (2): Rank, Week\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nGiven our requirements of a row of data for a team, in that week, with their rank, take a look at the data provided. We have 5 weeks of playoff rankings, so we should see a ranking, the week of the ranking and the team at that rank. You can see the basic look of the data by using head()\n\nhead(rankings)\n\n# A tibble: 6 × 4\n   Rank  Week Team    ShortTeam\n  <dbl> <dbl> <chr>   <chr>    \n1     1    17 Alabama Ala.     \n2     1    16 Alabama Ala.     \n3     1    15 Alabama Ala.     \n4     1    14 Alabama Ala.     \n5     1    13 Alabama Ala.     \n6    22    13 Auburn  Aub.     \n\n\nSo Alabama was ranked in the first (yawn), followed by Clemson (double yawn), Ohio State and so on. Our data is in the form we need it to be. Now we can make a bump chart. We’ll start simple.\n\nggplot() + \n  geom_bump(\n    data=rankings, aes(x=Week, y=Rank, color=Team))\n\nWarning in f(...): 'StatBump' needs at least two observations per group\n\nWarning in f(...): 'StatBump' needs at least two observations per group\n\nWarning in f(...): 'StatBump' needs at least two observations per group\n\n\n\n\n\nWell, it’s a start.\nThe warning that you’re seeing is that there’s three teams last season who made one appearance on the college football playoff rankings and disappeared. Nebraska fans would bite your arm off for that. Alas. We should eliminate them and thin up our chart a little. Let’s just take teams that finished in the top 10. We’re going to use a neat filter trick for this that you learned earlier using %in%.\n\ntop10 <- rankings %>% filter(Week == 17 & Rank <= 10)\n\nnewrankings <- rankings %>% filter(Team %in% top10$Team)\n\nNow you have something called newrankings that shows how teams who finished in the top 10 at the end of the season ended up there. And every team who finished in the top 10 in week 17 had been in the rankings more than once in the 5 weeks before.\n\nggplot() + \n  geom_bump(\n    data=newrankings, aes(x=Week, y=Rank, color=Team))\n\n\n\n\nFirst things first: I’m immediately annoyed by the top teams being at the bottom. I learned a neat trick from ggbump that’s been in ggplot all along – scale_y_reverse()\n\nggplot() + \n  geom_bump(\n    data=newrankings, aes(x=Week, y=Rank, color=Team)) + \n  scale_y_reverse()\n\n\n\n\nBetter. But, still not great. Let’s add a point at each week.\n\nggplot() + \n  geom_bump(data=newrankings, aes(x=Week, y=Rank, color=Team)) + \n  geom_point(data=newrankings, aes(x=Week, y=Rank, color=Team), size = 4) +\n  scale_y_reverse() \n\n\n\n\nAnother step. That makes it more subway-map like. But the colors are all wrong. To fix this, we’re going to use scale_color_manual and we’re going to Google the hex codes for each team. The legend will tell you what order your scale_color_manual needs to be.\n\nggplot() + \n  geom_bump(data=newrankings, aes(x=Week, y=Rank, color=Team)) + \n  geom_point(data=newrankings, aes(x=Week, y=Rank, color=Team), size = 4) + \n  scale_color_manual(values = c(\"#9E1B32\",\"#E00122\", \"#F56600\", \"#0021A5\", \"#BA0C2F\", \"#F1BE48\",\"#C99700\", \"#bb0000\", \"#841617\", \"#500000\")) +\n  scale_y_reverse() \n\n\n\n\nAnother step. But the legend is annoying. And trying to find which red is Alabama vs Ohio State is hard. So what if we labeled each dot at the beginning and end? We can do that with some clever usage of geom_text and a little dplyr filtering inside the data step. We filter out the first and last weeks, then use hjust – horizontal justification – to move them left or right.\n\nggplot() + \n  geom_bump(data=newrankings, aes(x=Week, y=Rank, color=Team)) + \n  geom_point(data=newrankings, aes(x=Week, y=Rank, color=Team), size = 4) +   \n  geom_text(data = newrankings %>% filter(Week == min(Week)), aes(x = Week - .2, y=Rank, label = Team), size = 3, hjust = 1) +\n  geom_text(data = newrankings %>% filter(Week == max(Week)), aes(x = Week + .2, y=Rank, label = Team), size = 3, hjust = 0) +\n  scale_color_manual(values = c(\"#9E1B32\",\"#E00122\", \"#F56600\", \"#0021A5\", \"#BA0C2F\", \"#F1BE48\",\"#C99700\", \"#bb0000\", \"#841617\", \"#500000\")) +\n  scale_y_reverse() \n\n\n\n\nBetter, but the legend is still there. We can drop it in a theme directive by saying legend.position = \"none\". We’ll also throw a theme_minimal on there to drop the default grey, and we’ll add some better labeling.\n\nggplot() + \n  geom_bump(data=newrankings, aes(x=Week, y=Rank, color=Team)) + \n  geom_point(data=newrankings, aes(x=Week, y=Rank, color=Team), size = 4) +   \n  geom_text(data = newrankings %>% filter(Week == min(Week)), aes(x = Week - .2, y=Rank, label = ShortTeam), size = 3, hjust = 1) +\n  geom_text(data = newrankings %>% filter(Week == max(Week)), aes(x = Week + .2, y=Rank, label = ShortTeam), size = 3, hjust = 0) +\n  labs(title=\"Was COVID college football boring?\", subtitle=\"There was no drama at the top. None. So, yes?\", y= \"Rank\", x = \"Week\") +\n  theme_minimal() +\n  theme(\n    legend.position = \"none\",\n    panel.grid.major = element_blank()\n    ) +\n  scale_color_manual(values = c(\"#9E1B32\",\"#E00122\", \"#F56600\", \"#0021A5\", \"#BA0C2F\", \"#F1BE48\",\"#C99700\", \"#bb0000\", \"#841617\", \"#500000\")) +\n  scale_y_reverse() \n\n\n\n\nNow let’s fix our text hierarchy.\n\nggplot() + \n  geom_bump(data=newrankings, aes(x=Week, y=Rank, color=Team)) + \n  geom_point(data=newrankings, aes(x=Week, y=Rank, color=Team), size = 4) +   \n  geom_text(data = newrankings %>% filter(Week == min(Week)), aes(x = Week - .2, y=Rank, label = ShortTeam), size = 3, hjust = 1) +\n  geom_text(data = newrankings %>% filter(Week == max(Week)), aes(x = Week + .2, y=Rank, label = ShortTeam), size = 3, hjust = 0) +\n  labs(title=\"Was COVID college football boring?\", subtitle=\"There was no drama at the top. None. So, yes?\", y= \"Rank\", x = \"Week\") +\n  theme_minimal() +\n  theme(\n    legend.position = \"none\",\n    panel.grid.major = element_blank(),\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    ) +\n  scale_color_manual(values = c(\"#9E1B32\",\"#E00122\", \"#F56600\", \"#0021A5\", \"#BA0C2F\", \"#F1BE48\",\"#C99700\", \"#bb0000\", \"#841617\", \"#500000\")) +\n  scale_y_reverse() \n\n\n\n\nAnd the last thing: anyone else annoyed at 7.5th place on the left? We can fix that too by specifying the breaks in scale_y_reverse. We can do that with the x axis as well, but since we haven’t reversed it, we do that in scale_x_continuous with the same breaks. Also: forgot my source and credit line.\nOne last thing: Let’s change the width of the chart to make the names fit. We can do that by adding fig.width=X in the {r} setup in your block. So something like this:\n\nggplot() + \n  geom_bump(data=newrankings, aes(x=Week, y=Rank, color=Team)) + \n  geom_point(data=newrankings, aes(x=Week, y=Rank, color=Team), size = 4) +   \n  geom_text(data = newrankings %>% filter(Week == min(Week)), aes(x = Week - .2, y=Rank, label = ShortTeam), size = 3, hjust = 1) +\n  geom_text(data = newrankings %>% filter(Week == max(Week)), aes(x = Week + .2, y=Rank, label = ShortTeam), size = 3, hjust = 0) +\n  labs(title=\"Was COVID college football boring?\", subtitle=\"There was no drama at the top. None. So, yes?\", y= \"Rank\", x = \"Week\") +\n  theme_minimal() +\n  theme(\n    legend.position = \"none\",\n    panel.grid.major = element_blank(),\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    ) +\n  scale_color_manual(values = c(\"#9E1B32\",\"#E00122\", \"#F56600\", \"#0021A5\", \"#BA0C2F\", \"#F1BE48\",\"#C99700\", \"#bb0000\", \"#841617\", \"#500000\")) +\n  scale_x_continuous(breaks=c(13,14,15,16,17)) + \n  scale_y_reverse(breaks=c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15))"
  },
  {
    "objectID": "tables.html",
    "href": "tables.html",
    "title": "26  Tables",
    "section": "",
    "text": "Sometimes, the best way to show your data is with a table – simple rows and columns. It allows a reader to compare whatever they want to compare a little easier than a graph where you’ve chosen what to highlight. The folks that made R Studio and the tidyverse have a neat package called gt.\nFor this assignment, we’ll need gt so go over to the console and run:\ninstall.packages(\"gt\")\nSo what does all of these libraries do? Let’s gather a few and use data of every game in the last 5 years.\nFor this walkthrough:\n   Download csv file\n\nLoad libraries.\n\nlibrary(tidyverse)\nlibrary(gt)\n\nAnd the data.\n\nlogs <- read_csv(\"data/logs1520.csv\")\n\nRows: 68617 Columns: 44\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (6): HomeAway, Opponent, W_L, Team, Conference, season\ndbl  (36): X1, Game, TeamScore, OpponentScore, TeamFG, TeamFGA, TeamFGPCT, T...\nlgl   (1): Blank\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nLet’s ask this question: Fred Ball is supposed to be play fast and shoot threes – a pro-style offense. How much did Nebraska change in that regard from Tim Miles? In other words, which college basketball team saw the greatest increase in three point attempts last season as a percentage of shots? The simplest way to calculate that is by percent change.\nWe’ve got a little work to do, putting together ideas we’ve used before. What we need to end up with is some data that looks like this:\nTeam | 2018-2019 season threes | 2019-2020 season threes | pct change\nTo get that, we’ll need to do some filtering to get the right seasons, some grouping and summarizing to get the right number, some pivoting to get it organized correctly so we can mutate the percent change.\n\nthreechange <- logs %>%\n  filter(season == \"2018-2019\" | season == \"2019-2020\") %>%\n  group_by(Team, Conference, season) %>%\n  summarise(Total3PA = sum(Team3PA)) %>%\n  pivot_wider(names_from=season, values_from = Total3PA) %>%\n  mutate(PercentChange = (`2019-2020`-`2018-2019`)/`2018-2019`) %>%\n  arrange(desc(PercentChange)) %>% \n  ungroup() %>%\n  top_n(10) # just want a top 10 list\n\n`summarise()` has grouped output by 'Team', 'Conference'. You can override\nusing the `.groups` argument.\nSelecting by PercentChange\n\n\nWe’ve output tables to the screen a thousand times in this class with head, but gt makes them look decent with very little code.\n\nthreechange %>% gt()\n\n\n\n\n\n  \n  \n    \n      Team\n      Conference\n      2018-2019\n      2019-2020\n      PercentChange\n    \n  \n  \n    Mississippi Valley State Delta Devils\nSWAC\n554\n837\n0.5108303\n    Valparaiso Crusaders\nMVC\n585\n843\n0.4410256\n    Ball State Cardinals\nMAC\n621\n842\n0.3558776\n    San Jose State Spartans\nMWC\n641\n861\n0.3432137\n    Alabama Crimson Tide\nSEC\n718\n957\n0.3328691\n    Minnesota Golden Gophers\nBig Ten\n603\n762\n0.2636816\n    Georgia Southern Eagles\nSun Belt\n631\n792\n0.2551506\n    Tennessee Tech Golden Eagles\nOVC\n620\n776\n0.2516129\n    San Francisco Dons\nWCC\n728\n899\n0.2348901\n    McNeese State Cowboys\nSouthland\n547\n675\n0.2340037\n  \n  \n  \n\n\n\n\nSo there you have it. Mississippi Valley State changed their team so much they took 51 percent more threes last season from the season before. Where did Nebraska come out? Isn’t Fred Ball supposed to be a lot of threes? We ranked 111th in college basketball in terms of change from the season before. Believe it or not, Nebraska took four fewer threes in the first season of Fred Ball than the last season of Tim Miles.\ngt has a mountain of customization options. The good news is that it works in a very familiar pattern. We’ll start with fixing headers. What we have isn’t bad, but PercentChange isn’t good either. Let’s fix that.\n\nthreechange %>% \n  gt() %>% \n  cols_label(\n    PercentChange = \"Percent Change\"\n  )\n\n\n\n\n\n  \n  \n    \n      Team\n      Conference\n      2018-2019\n      2019-2020\n      Percent Change\n    \n  \n  \n    Mississippi Valley State Delta Devils\nSWAC\n554\n837\n0.5108303\n    Valparaiso Crusaders\nMVC\n585\n843\n0.4410256\n    Ball State Cardinals\nMAC\n621\n842\n0.3558776\n    San Jose State Spartans\nMWC\n641\n861\n0.3432137\n    Alabama Crimson Tide\nSEC\n718\n957\n0.3328691\n    Minnesota Golden Gophers\nBig Ten\n603\n762\n0.2636816\n    Georgia Southern Eagles\nSun Belt\n631\n792\n0.2551506\n    Tennessee Tech Golden Eagles\nOVC\n620\n776\n0.2516129\n    San Francisco Dons\nWCC\n728\n899\n0.2348901\n    McNeese State Cowboys\nSouthland\n547\n675\n0.2340037\n  \n  \n  \n\n\n\n\nBetter. Note the pattern: Actual header name = “What we want to see”. So if we wanted to change Team to School, we’d do this: Team = \"School\" inside the cols_label bits.\nNow we can start working with styling. The truth is most of your code in tables is going to be dedicated to styling specific things. The first thing we need: A headline and some chatter. They’re required parts of a graphic, so they’re a good place to start. We do that with tab_header\n\nthreechange %>% \n  gt() %>% \n  cols_label(\n    PercentChange = \"Percent Change\"\n  ) %>%\n  tab_header(\n    title = \"Does Hoiberg's offense push threes more than Miles?\",\n    subtitle = \"Nebraska wasn't in the top 100 of teams shooting more threes. These 10 teams completely changed their offense.\"\n  )\n\n\n\n\n\n  \n    \n      Does Hoiberg's offense push threes more than Miles?\n    \n    \n      Nebraska wasn't in the top 100 of teams shooting more threes. These 10 teams completely changed their offense.\n    \n  \n  \n    \n      Team\n      Conference\n      2018-2019\n      2019-2020\n      Percent Change\n    \n  \n  \n    Mississippi Valley State Delta Devils\nSWAC\n554\n837\n0.5108303\n    Valparaiso Crusaders\nMVC\n585\n843\n0.4410256\n    Ball State Cardinals\nMAC\n621\n842\n0.3558776\n    San Jose State Spartans\nMWC\n641\n861\n0.3432137\n    Alabama Crimson Tide\nSEC\n718\n957\n0.3328691\n    Minnesota Golden Gophers\nBig Ten\n603\n762\n0.2636816\n    Georgia Southern Eagles\nSun Belt\n631\n792\n0.2551506\n    Tennessee Tech Golden Eagles\nOVC\n620\n776\n0.2516129\n    San Francisco Dons\nWCC\n728\n899\n0.2348901\n    McNeese State Cowboys\nSouthland\n547\n675\n0.2340037\n  \n  \n  \n\n\n\n\nWe have a headline and some chatter, but … gross. Centered? The extra lines? No real difference in font weight? We can do better. We can style individual elements using tab_style. First, let’s make the main headline – the title – bold and left aligned.\n\nthreechange %>% \n  gt() %>% \n  cols_label(\n    PercentChange = \"Percent Change\"\n  ) %>%\n  tab_header(\n    title = \"Does Hoiberg's offense push threes more than Miles?\",\n    subtitle = \"Nebraska wasn't in the top 100 of teams shooting more threes. These 10 teams completely changed their offense.\"\n  ) %>% tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  )\n\n\n\n\n\n  \n    \n      Does Hoiberg's offense push threes more than Miles?\n    \n    \n      Nebraska wasn't in the top 100 of teams shooting more threes. These 10 teams completely changed their offense.\n    \n  \n  \n    \n      Team\n      Conference\n      2018-2019\n      2019-2020\n      Percent Change\n    \n  \n  \n    Mississippi Valley State Delta Devils\nSWAC\n554\n837\n0.5108303\n    Valparaiso Crusaders\nMVC\n585\n843\n0.4410256\n    Ball State Cardinals\nMAC\n621\n842\n0.3558776\n    San Jose State Spartans\nMWC\n641\n861\n0.3432137\n    Alabama Crimson Tide\nSEC\n718\n957\n0.3328691\n    Minnesota Golden Gophers\nBig Ten\n603\n762\n0.2636816\n    Georgia Southern Eagles\nSun Belt\n631\n792\n0.2551506\n    Tennessee Tech Golden Eagles\nOVC\n620\n776\n0.2516129\n    San Francisco Dons\nWCC\n728\n899\n0.2348901\n    McNeese State Cowboys\nSouthland\n547\n675\n0.2340037\n  \n  \n  \n\n\n\n\nIt’s hard to see here, but the chatter below is also centered (it doesn’t look like it because it fills the space). We can left align that too, but leave it normal weight (i.e. not bold).\n\nthreechange %>% \n  gt() %>% \n  cols_label(\n    PercentChange = \"Percent Change\"\n  ) %>%\n  tab_header(\n    title = \"Does Hoiberg's offense push threes more than Miles?\",\n    subtitle = \"Nebraska wasn't in the top 100 of teams shooting more threes. These 10 teams completely changed their offense.\"\n  ) %>% tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) %>% tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  )\n\n\n\n\n\n  \n    \n      Does Hoiberg's offense push threes more than Miles?\n    \n    \n      Nebraska wasn't in the top 100 of teams shooting more threes. These 10 teams completely changed their offense.\n    \n  \n  \n    \n      Team\n      Conference\n      2018-2019\n      2019-2020\n      Percent Change\n    \n  \n  \n    Mississippi Valley State Delta Devils\nSWAC\n554\n837\n0.5108303\n    Valparaiso Crusaders\nMVC\n585\n843\n0.4410256\n    Ball State Cardinals\nMAC\n621\n842\n0.3558776\n    San Jose State Spartans\nMWC\n641\n861\n0.3432137\n    Alabama Crimson Tide\nSEC\n718\n957\n0.3328691\n    Minnesota Golden Gophers\nBig Ten\n603\n762\n0.2636816\n    Georgia Southern Eagles\nSun Belt\n631\n792\n0.2551506\n    Tennessee Tech Golden Eagles\nOVC\n620\n776\n0.2516129\n    San Francisco Dons\nWCC\n728\n899\n0.2348901\n    McNeese State Cowboys\nSouthland\n547\n675\n0.2340037\n  \n  \n  \n\n\n\n\nThe next item on the required elements list: Source and credit lines. In gt, those are called tab_source_notes and we can add them like this:\n\nthreechange %>% \n  gt() %>% \n  cols_label(\n    PercentChange = \"Percent Change\"\n  ) %>%\n  tab_header(\n    title = \"Does Hoiberg's offense push threes more than Miles?\",\n    subtitle = \"Nebraska wasn't in the top 100 of teams shooting more threes. These 10 teams completely changed their offense.\"\n  ) %>% tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) %>% tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) %>%\n  tab_source_note(\n    source_note = md(\"**By:** Matt Waite  |  **Source:** [Sports Reference](https://www.sports-reference.com/cbb/seasons/)\")\n  )\n\n\n\n\n\n  \n    \n      Does Hoiberg's offense push threes more than Miles?\n    \n    \n      Nebraska wasn't in the top 100 of teams shooting more threes. These 10 teams completely changed their offense.\n    \n  \n  \n    \n      Team\n      Conference\n      2018-2019\n      2019-2020\n      Percent Change\n    \n  \n  \n    Mississippi Valley State Delta Devils\nSWAC\n554\n837\n0.5108303\n    Valparaiso Crusaders\nMVC\n585\n843\n0.4410256\n    Ball State Cardinals\nMAC\n621\n842\n0.3558776\n    San Jose State Spartans\nMWC\n641\n861\n0.3432137\n    Alabama Crimson Tide\nSEC\n718\n957\n0.3328691\n    Minnesota Golden Gophers\nBig Ten\n603\n762\n0.2636816\n    Georgia Southern Eagles\nSun Belt\n631\n792\n0.2551506\n    Tennessee Tech Golden Eagles\nOVC\n620\n776\n0.2516129\n    San Francisco Dons\nWCC\n728\n899\n0.2348901\n    McNeese State Cowboys\nSouthland\n547\n675\n0.2340037\n  \n  \n    \n      By: Matt Waite  |  Source: Sports Reference\n    \n  \n  \n\n\n\n\nWe can do a lot with tab_style. For instance, we can make the headers bold and reduce the size a bit to reduce font congestion in the area.\n\nthreechange %>% \n  gt() %>% \n  cols_label(\n    PercentChange = \"Percent Change\"\n  ) %>%\n  tab_header(\n    title = \"Does Hoiberg's offense push threes more than Miles?\",\n    subtitle = \"Nebraska wasn't in the top 100 of teams shooting more threes. These 10 teams completely changed their offense.\"\n  ) %>% \n  tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) %>% \n  tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) %>%  \n  tab_source_note(\n    source_note = md(\"**By:** Matt Waite  |  **Source:** [Sports Reference](https://www.sports-reference.com/cbb/seasons/)\")\n  ) %>%\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) \n\n\n\n\n\n  \n    \n      Does Hoiberg's offense push threes more than Miles?\n    \n    \n      Nebraska wasn't in the top 100 of teams shooting more threes. These 10 teams completely changed their offense.\n    \n  \n  \n    \n      Team\n      Conference\n      2018-2019\n      2019-2020\n      Percent Change\n    \n  \n  \n    Mississippi Valley State Delta Devils\nSWAC\n554\n837\n0.5108303\n    Valparaiso Crusaders\nMVC\n585\n843\n0.4410256\n    Ball State Cardinals\nMAC\n621\n842\n0.3558776\n    San Jose State Spartans\nMWC\n641\n861\n0.3432137\n    Alabama Crimson Tide\nSEC\n718\n957\n0.3328691\n    Minnesota Golden Gophers\nBig Ten\n603\n762\n0.2636816\n    Georgia Southern Eagles\nSun Belt\n631\n792\n0.2551506\n    Tennessee Tech Golden Eagles\nOVC\n620\n776\n0.2516129\n    San Francisco Dons\nWCC\n728\n899\n0.2348901\n    McNeese State Cowboys\nSouthland\n547\n675\n0.2340037\n  \n  \n    \n      By: Matt Waite  |  Source: Sports Reference\n    \n  \n  \n\n\n\n\nNext up: There’s a lot of lines in this that don’t need to be there. gt has some tools to get rid of them easily and add in some other readability improvements.\n\nthreechange %>% \n  gt() %>% \n  cols_label(\n    PercentChange = \"Percent Change\"\n  ) %>%\n  tab_header(\n    title = \"Does Hoiberg's offense push threes more than Miles?\",\n    subtitle = \"Nebraska wasn't in the top 100 of teams shooting more threes. These 10 teams completely changed their offense.\"\n  ) %>%  \n  tab_source_note(\n    source_note = md(\"**By:** Matt Waite  |  **Source:** [Sports Reference](https://www.sports-reference.com/cbb/seasons/)\")\n  ) %>% \n  tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) %>% \n  tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) %>%\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) %>%\n  opt_row_striping() %>% \n  opt_table_lines(\"none\")\n\n\n\n\n\n  \n    \n      Does Hoiberg's offense push threes more than Miles?\n    \n    \n      Nebraska wasn't in the top 100 of teams shooting more threes. These 10 teams completely changed their offense.\n    \n  \n  \n    \n      Team\n      Conference\n      2018-2019\n      2019-2020\n      Percent Change\n    \n  \n  \n    Mississippi Valley State Delta Devils\nSWAC\n554\n837\n0.5108303\n    Valparaiso Crusaders\nMVC\n585\n843\n0.4410256\n    Ball State Cardinals\nMAC\n621\n842\n0.3558776\n    San Jose State Spartans\nMWC\n641\n861\n0.3432137\n    Alabama Crimson Tide\nSEC\n718\n957\n0.3328691\n    Minnesota Golden Gophers\nBig Ten\n603\n762\n0.2636816\n    Georgia Southern Eagles\nSun Belt\n631\n792\n0.2551506\n    Tennessee Tech Golden Eagles\nOVC\n620\n776\n0.2516129\n    San Francisco Dons\nWCC\n728\n899\n0.2348901\n    McNeese State Cowboys\nSouthland\n547\n675\n0.2340037\n  \n  \n    \n      By: Matt Waite  |  Source: Sports Reference\n    \n  \n  \n\n\n\n\nWe’re in pretty good shape here, but look closer. What else makes this table sub-par? How about the formatting of the percent change? We can fix that with a formatter.\n\nthreechange %>% \n  gt() %>% \n  cols_label(\n    PercentChange = \"Percent Change\"\n  ) %>%\n  tab_header(\n    title = \"Does Hoiberg's offense push threes more than Miles?\",\n    subtitle = \"Nebraska wasn't in the top 100 of teams shooting more threes. These 10 teams completely changed their offense.\"\n  ) %>%  \n  tab_source_note(\n    source_note = md(\"**By:** Matt Waite  |  **Source:** [Sports Reference](https://www.sports-reference.com/cbb/seasons/)\")\n  ) %>% \n  tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) %>% \n  tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) %>%\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) %>%\n  opt_row_striping() %>% \n  opt_table_lines(\"none\") %>%\n    fmt_percent(\n    columns = c(PercentChange),\n    decimals = 1\n  )\n\n\n\n\n\n  \n    \n      Does Hoiberg's offense push threes more than Miles?\n    \n    \n      Nebraska wasn't in the top 100 of teams shooting more threes. These 10 teams completely changed their offense.\n    \n  \n  \n    \n      Team\n      Conference\n      2018-2019\n      2019-2020\n      Percent Change\n    \n  \n  \n    Mississippi Valley State Delta Devils\nSWAC\n554\n837\n51.1%\n    Valparaiso Crusaders\nMVC\n585\n843\n44.1%\n    Ball State Cardinals\nMAC\n621\n842\n35.6%\n    San Jose State Spartans\nMWC\n641\n861\n34.3%\n    Alabama Crimson Tide\nSEC\n718\n957\n33.3%\n    Minnesota Golden Gophers\nBig Ten\n603\n762\n26.4%\n    Georgia Southern Eagles\nSun Belt\n631\n792\n25.5%\n    Tennessee Tech Golden Eagles\nOVC\n620\n776\n25.2%\n    San Francisco Dons\nWCC\n728\n899\n23.5%\n    McNeese State Cowboys\nSouthland\n547\n675\n23.4%\n  \n  \n    \n      By: Matt Waite  |  Source: Sports Reference\n    \n  \n  \n\n\n\n\nThroughout the semester, we’ve been using color and other signals to highlight things. Let’s pretend we’re doing a project on Minnesota. Note they’re the only Big Ten team on this list. With a little tab_style magic, we can change individual rows and add color. The last tab_style block here will first pass off the styles we want to use – we’re going to make the rows maroon and the text gold – and then for locations we specify where with a simple filter. What that means is that any rows we can address with logic – all rows with a value greater than X, for example – we can change the styling.\n\nthreechange %>% \n  gt() %>% \n  cols_label(\n    PercentChange = \"Percent Change\"\n  ) %>%\n  tab_header(\n    title = \"Does Hoiberg's offense push threes more than Miles?\",\n    subtitle = \"Nebraska wasn't in the top 100 of teams shooting more threes. These 10 teams completely changed their offense.\"\n  ) %>%  \n  tab_source_note(\n    source_note = md(\"**By:** Matt Waite  |  **Source:** [Sports Reference](https://www.sports-reference.com/cbb/seasons/)\")\n  ) %>% \n  tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) %>% \n  tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) %>%\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) %>%\n  opt_row_striping() %>% \n  opt_table_lines(\"none\") %>%\n    fmt_percent(\n    columns = c(PercentChange),\n    decimals = 1\n  ) %>%\n  tab_style(\n    style = list(\n      cell_fill(color = \"maroon\"),\n      cell_text(color = \"gold\")\n      ),\n    locations = cells_body(\n      rows = Team == \"Minnesota Golden Gophers\")\n  )\n\n\n\n\n\n  \n    \n      Does Hoiberg's offense push threes more than Miles?\n    \n    \n      Nebraska wasn't in the top 100 of teams shooting more threes. These 10 teams completely changed their offense.\n    \n  \n  \n    \n      Team\n      Conference\n      2018-2019\n      2019-2020\n      Percent Change\n    \n  \n  \n    Mississippi Valley State Delta Devils\nSWAC\n554\n837\n51.1%\n    Valparaiso Crusaders\nMVC\n585\n843\n44.1%\n    Ball State Cardinals\nMAC\n621\n842\n35.6%\n    San Jose State Spartans\nMWC\n641\n861\n34.3%\n    Alabama Crimson Tide\nSEC\n718\n957\n33.3%\n    Minnesota Golden Gophers\nBig Ten\n603\n762\n26.4%\n    Georgia Southern Eagles\nSun Belt\n631\n792\n25.5%\n    Tennessee Tech Golden Eagles\nOVC\n620\n776\n25.2%\n    San Francisco Dons\nWCC\n728\n899\n23.5%\n    McNeese State Cowboys\nSouthland\n547\n675\n23.4%\n  \n  \n    \n      By: Matt Waite  |  Source: Sports Reference\n    \n  \n  \n\n\n\n\nTwo things here:\n\nDear God that color scheme is awful, which is fitting for a school that worships a lawn-wrecking varmint.\nWe’ve arrived where we want to be: We’ve created a clear table that allows a reader to compare schools at will while also using color to draw attention to the thing we want to draw attention to. We’ve kept it simple so the color has impact."
  },
  {
    "objectID": "facetwraps.html",
    "href": "facetwraps.html",
    "title": "27  Facet wraps",
    "section": "",
    "text": "Sometimes the easiest way to spot a trend is to chart a bunch of small things side by side. Edward Tufte, one of the most well known data visualization thinkers on the planet, calls this “small multiples” where ggplot calls this a facet wrap or a facet grid, depending.\nOne thing we noticed earlier in the semester – it seems that a lot of teams shoot worse as the season goes on. Do they? We could answer this a number of ways, but the best way to show people would be visually. Let’s use Small Multiples.\nAs always, we start with libraries.\nWe’re going to use the logs of college basketball games last season.\nAnd load it.\nLet’s narrow our pile and look just at the Big Ten.\nThe first thing we can do is look at a line chart, like we have done in previous chapters.\nAnd, not surprisingly, we get a hairball. We could color certain lines, but that would limit us to focus on one team. What if we did all of them at once? We do that with a facet_wrap. The only thing we MUST pass into a facet_wrap is what thing we’re going to separate them out by. In this case, we precede that field with a tilde, so in our case we want the Team field. It looks like this:\nAnswer: Not immediately clear, but we can look at this and analyze it. We could add a piece of annotation to help us out.\nWhat do you see here? How do teams compare? How do they change over time? I’m not asking you these questions because they’re an assignment – I’m asking because that’s exactly what this chart helps answer. Your brain will immediately start making those connections."
  },
  {
    "objectID": "facetwraps.html#facet-grid-vs-facet-wraps",
    "href": "facetwraps.html#facet-grid-vs-facet-wraps",
    "title": "27  Facet wraps",
    "section": "27.1 Facet grid vs facet wraps",
    "text": "27.1 Facet grid vs facet wraps\nFacet grids allow us to put teams on the same plane, versus just repeating them. And we can specify that plane as vertical or horizontal. For example, here’s our chart from above, but using facet_grid to stack them.\n\nggplot() + \n  geom_hline(yintercept=.4361078, color=\"blue\") + \n  geom_line(data=big10, aes(x=Date, y=TeamFGPCT, group=Team)) + \n  scale_y_continuous(limits = c(0, .7)) + \n  facet_grid(Team ~ .)\n\n\n\n\nAnd here they are next to each other:\n\nggplot() + \n  geom_hline(yintercept=.4361078, color=\"blue\") + \n  geom_line(data=big10, aes(x=Date, y=TeamFGPCT, group=Team)) + \n  scale_y_continuous(limits = c(0, .7)) + \n  facet_grid(. ~ Team)\n\n\n\n\nNote: We’d have some work to do with the labeling on this – we’ll get to that – but you can see where this is valuable comparing a group of things. One warning: Don’t go too crazy with this or it loses it’s visual power."
  },
  {
    "objectID": "facetwraps.html#other-types",
    "href": "facetwraps.html#other-types",
    "title": "27  Facet wraps",
    "section": "27.2 Other types",
    "text": "27.2 Other types\nLine charts aren’t the only things we can do. We can do any kind of chart in ggplot. Staying with shooting, where are team’s winning and losing performances coming from when we talk about team shooting and opponent shooting?\n\nggplot() + \n  geom_point(data=big10, aes(x=TeamFGPCT, y=OpponentFGPCT, color=W_L)) +\n  scale_y_continuous(limits = c(0, .7)) + \n  scale_x_continuous(limits = c(0, .7)) + \n  facet_wrap(~Team)"
  },
  {
    "objectID": "cowplots.html",
    "href": "cowplots.html",
    "title": "28  Arranging multiple plots together",
    "section": "",
    "text": "Good news.\nThere is.\nIt’s called cowplot, and it’s pretty easy to use. First install cowplot with install.packages(\"cowplot\"). Then let’s load tidyverse and cowplot.\n\nlibrary(tidyverse)\nlibrary(cowplot)\n\nWe’ll use the college football attendance data we’ve used before.\nFor this walkthrough:\n   Download csv file\n\nAnd load it.\n\nattendance <- read_csv(\"data/attendance.csv\")\n\nRows: 150 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): Institution, Conference\ndbl (6): 2013, 2014, 2015, 2016, 2017, 2018\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nMaking a quick percent change.\n\nattendance <- attendance %>% mutate(change = ((`2018`-`2017`)/`2017`)*100)\n\nLet’s chart the top 10 and bottom 10 of college football ticket growth … and shrinkage.\n\ntop10 <- attendance %>% top_n(10, wt=change)\nbottom10 <- attendance %>% top_n(10, wt=-change)\n\nOkay, now to do this I need to save my plots to an object. We do this the same way we save things to a dataframe – with the arrow. We’ll make two identical bar charts, one with the top 10 and one with the bottom 10.\n\nbar1 <- ggplot() + \n  geom_bar(data=top10, aes(x=reorder(Institution, change), weight=change)) +\n  coord_flip()\n\n\nbar2 <- ggplot() + \n  geom_bar(data=bottom10, aes(x=reorder(Institution, change), weight=change)) +\n  coord_flip()\n\nWith cowplot, we can use a function called plot_grid to arrange the charts:\n\nplot_grid(bar1, bar2) \n\n\n\n\nWe can also stack them on top of each other:\n\nplot_grid(bar1, bar2, ncol=1) \n\n\n\n\nTo make these publishable, we should add headlines, chatter, decent labels, credit lines, etc. But to do this, we’ll have to figure out which labels go on which charts, so we can make it look decent. For example – both charts don’t need x or y labels. If you don’t have a title and subtitle on both, the spacing is off, so you need to leave one blank or the other blank. You’ll just have to fiddle with it until you get it looking right.\n\nbar1 <- ggplot() + \n  geom_bar(data=top10, aes(x=reorder(Institution, change), weight=change)) +\n  coord_flip() + \n  labs(title=\"College football winners...\", subtitle = \"Not every football program saw attendance shrink in 2018. But some really did.\",  x=\"\", y=\"Percent change\", caption = \"\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    )\n\n\nbar2 <- ggplot() + \n  geom_bar(data=bottom10, aes(x=reorder(Institution, change), weight=change)) +\n  coord_flip() +  \n  labs(title = \"... and losers\", subtitle= \"\", x=\"\", y=\"\",  caption=\"Source: NCAA | By Matt Waite\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    )\n\n\nplot_grid(bar1, bar2) \n\n\n\n\nWhat’s missing here? Color. Our eyes aren’t drawn to anything (except maybe the top and bottom). So we need to help that. A bar chart without context or color to draw attention to something isn’t much of a bar chart. Same with a line chart – if your line chart has one line, no context, no color, it’s going to fare poorly.\n\ncc <- bottom10 %>% filter(Institution == \"Coastal Caro.\")\ngs <- top10 %>% filter(Institution == \"Ga. Southern\")\n\n\nbar1 <- ggplot() + \n  geom_bar(data=top10, aes(x=reorder(Institution, change), weight=change)) + \n  geom_bar(data=gs, aes(x=reorder(Institution, change), weight=change), fill=\"#011E41\") + \n  coord_flip() + \n  labs(title=\"College football winners...\", subtitle = \"Not every football program saw attendance shrink in 2018. But some really did.\",  x=\"\", y=\"Percent change\", caption = \"\") +\n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    )\n\n\nbar2 <- ggplot() + \n  geom_bar(data=bottom10, aes(x=reorder(Institution, change), weight=change)) + \n  geom_bar(data=cc, aes(x=reorder(Institution, change), weight=change), fill=\"#006F71\") + \n  coord_flip() +  \n  labs(title = \"... and losers\", subtitle= \"\", x=\"\", y=\"\",  caption=\"Source: NCAA | By Matt Waite\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    )\n\n\nplot_grid(bar1, bar2)"
  },
  {
    "objectID": "encirclingpoints.html",
    "href": "encirclingpoints.html",
    "title": "29  Encircling points on a scatterplot",
    "section": "",
    "text": "One thing we’ve talked about all semester is drawing attention to the thing you want to draw attention to. We’ve used color and labels to do that so far. Let’s add another layer to it – a shape around the points you want to highlight.\nRemember: The point of all of this is to draw the eye to what you are trying to show your reader. You want people to see the story you are trying to tell.\nIt’s not hard to draw a shape in ggplot – it is a challenge to put it in the right place. But, there is a library to the rescue that makes this super easy – ggalt.\nInstall it in the console with install.packages(\"ggalt\")\nThere’s a bunch of things that ggalt does, but one of the most useful for us is the function encircle. Let’s dive in.\nLet’s say we want to highlight the top scorers in college basketball. So let’s use our player data.\nAnd while we’re loading it, let’s filter out anyone who hasn’t played.\nWe’ve done this before, but let’s make a standard scatterplot of minutes and points.\nSo we can see right away that there are some dots at the very top that we’d want to highlight. Who are these scoring machines?\nLike we have done in the past, let’s make a dataframe of top scorers. We’ll set the cutoff at 650 points in a season.\nAnd like we’ve done in the past, we can add it to the chart with another geom_point. We’ll make all the players grey, we’ll make all the top scorers black.\nAnd like that, we’re on the path to something publishable. We’ll need to label those dots with ggrepel and we’ll need to drop the default grey and add some headlines and all that. And, for the most part, we’ve got a solid chart.\nBut what if we could really draw the eye to those players. Let’s draw a circle around them. In ggalt, there is a new geom called geom_encircle, which … does what you think it does. It encircles all the dots in a dataset.\nSo let’s add geom_encircle and we’ll just copy the data and the aes from our topscorers geom_point. Then, we need to give the encirclement a shape using s_shape – which is a number between 0 and 1 – and then how far away from the dots to draw the circle using expand, which is another number between 0 and 1.\nLet’s start with s_shape 1 and expand 1.\nWhoa. That’s … not good.\nLet’s go the opposite direction.\nBetter, but … the circle cuts through multiple dots.\nThis takes a little bit of finessing, but a shape of .5 means the line will have some bend to it – it’ll look more like someone circled it with a pen. Then, the expand is better if you use hundredths instead of tenths. So .01 instead of .1. Here’s mine after fiddling with it for a bit.\nNow let’s clean this up and make it presentable. If you look at the top scorers, only two were Wooden Award finalists. So here’s what a chart telling that story might look like."
  },
  {
    "objectID": "encirclingpoints.html#a-different-more-local-example",
    "href": "encirclingpoints.html#a-different-more-local-example",
    "title": "29  Encircling points on a scatterplot",
    "section": "29.1 A different, more local example",
    "text": "29.1 A different, more local example\nYou can use circling outside of the top of something. It’s a bit obvious that the previous dots were top scorers. What about when they aren’t at the top?\nWorks the same way – use layering and color smartly and tell the story with all your tools.\nLet’s grab the top three point attempt takers on the Nebraska roster. As of now, only one will be coming back.\n\nnutop <- players %>% filter(Team == \"Nebraska Cornhuskers\") %>% top_n(3, `3PA`)\n\nAnd just like above, we can plug in our players geom, our nutop dataframe into another geom, then encircle that dataframe. Slap some headlines and annotations on it and here’s what we get:\n\nggplot() + geom_point(data=players, aes(x=MP, y=`3PA`), color=\"grey\") + geom_point(data=nutop, aes(x=MP, y=`3PA`), color=\"red\") + geom_encircle(data=nutop, aes(x=MP, y=`3PA`), s_shape=.02, expand=.18, colour=\"red\") +\n  geom_text(aes(x=400, y=100, label=\"Nebraska's top three shooters\")) + \n  labs(title=\"Did Hoiberg install his system?\", subtitle=\"Nebraska's top three point shooters were nowhere near the tops in college basketball\", x=\"Minutes\", y=\"Three point attempts\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    )\n\n\n\n\nThe dot on the far right? Cam Mack. Oh what could have been."
  },
  {
    "objectID": "textcleaning.html",
    "href": "textcleaning.html",
    "title": "30  Text cleaning",
    "section": "",
    "text": "On occasion, you’ll get some data from someone that … isn’t quite what you need it to be. There’s something flawed in it. Some extra text, some choice that the data provider made that you just don’t agree with.\nThere’s a ton of tools in the tidyverse to fix this, and you already have some tools in your toolboxt. Let’s take a look at a couple.\nFirst, you know what you need.\nNow, two examples."
  },
  {
    "objectID": "textcleaning.html#stripping-out-text",
    "href": "textcleaning.html#stripping-out-text",
    "title": "30  Text cleaning",
    "section": "30.1 Stripping out text",
    "text": "30.1 Stripping out text\nThroughout this class, we’ve used data from Sports Reference. If you’ve used their Share > CSV method to copy data from a table, you may have noticed some extra cruft in the player name field. If you haven’t seen it, I’ll give you an example – a dataset of NBA players and their advanced metrics.\nFor this walkthrough:\n   Download csv file\n\nNow load it.\n\nnbaplayers <- read_csv(\"data/nbaplayers.csv\")\n\nNew names:\nRows: 624 Columns: 29\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(3): Player, Pos, Tm dbl (24): Rk, Age, G, MP, PER, TS%, 3PAr, FTr, ORB%, DRB%,\nTRB%, AST%, STL%,... lgl (2): ...20, ...25\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -> `...20`\n• `` -> `...25`\n\n\nLet’s take a look:\n\nhead(nbaplayers)\n\n# A tibble: 6 × 29\n     Rk Player     Pos     Age Tm        G    MP   PER `TS%` `3PAr`   FTr `ORB%`\n  <dbl> <chr>      <chr> <dbl> <chr> <dbl> <dbl> <dbl> <dbl>  <dbl> <dbl>  <dbl>\n1     1 \"Steven A… C        26 OKC      58  1564  20.8 0.605  0.007 0.413   14.4\n2     2 \"Bam Adeb… PF       22 MIA      65  2235  20.6 0.606  0.018 0.476    8.7\n3     3 \"LaMarcus… C        34 SAS      53  1754  19.8 0.571  0.198 0.241    6.3\n4     4 \"Nickeil … SG       21 NOP      41   501   7.6 0.441  0.515 0.123    1.7\n5     5 \"Grayson … SG       24 MEM      30   498  11.4 0.577  0.517 0.199    1.1\n6     6 \"Jarrett … C        21 BRK      64  1647  20.3 0.658  0.012 0.574   12.5\n# … with 17 more variables: `DRB%` <dbl>, `TRB%` <dbl>, `AST%` <dbl>,\n#   `STL%` <dbl>, `BLK%` <dbl>, `TOV%` <dbl>, `USG%` <dbl>, ...20 <lgl>,\n#   OWS <dbl>, DWS <dbl>, WS <dbl>, `WS/48` <dbl>, ...25 <lgl>, OBPM <dbl>,\n#   DBPM <dbl>, BPM <dbl>, VORP <dbl>\n\n\nYou can see that every players name is their name, then two backslashes, then some version of their name that must have meaning to Sports Reference, but not to us. So we need to get rid of that.\nTo do this, we’re going to use a little regular expression magic. Regular expressions are a programmatic way to find any pattern in text. What we’re looking for is that \\\\ business. But, that presents a problem, because the \\ is a special character. It’s called an escape character. That escape character means what comes next is potentially special. For instance, if you see \\n, that’s a newline character. So normally, if you see that, it would add a return.\nSo for us to get rid of the \\ we’re going to have to escape the escape character with an escape character. And we have two of them. So we have to do it twice.\nYes. Really.\nSo if we wanted to find two backslashes, we need \\\\\\\\. Then, using regular expressions, we can say “and then everything else after this” with this: .*\nNo really. That’s it. So we’re looking for \\\\\\\\.*. That’ll find two backslashes and then everything after it. If you think this is hard … you’re right. Regular expressions are an entire month of a programming course by themselves. They are EXTREMELY powerful.\nTo find something in text, we’ll use a function called gsub. The pattern in gsub is pattern, what we want to replace it with, what column this can all be found in. So in our example, the pattern is \\\\\\\\.*, what we want to replace it with is … nothing, and this is all in the Player column. Here’s the code.\n\nnbaplayers %>% mutate(Player=gsub(\"\\\\\\\\.*\",\"\",Player)) %>% head()\n\n# A tibble: 6 × 29\n     Rk Player     Pos     Age Tm        G    MP   PER `TS%` `3PAr`   FTr `ORB%`\n  <dbl> <chr>      <chr> <dbl> <chr> <dbl> <dbl> <dbl> <dbl>  <dbl> <dbl>  <dbl>\n1     1 Steven Ad… C        26 OKC      58  1564  20.8 0.605  0.007 0.413   14.4\n2     2 Bam Adeba… PF       22 MIA      65  2235  20.6 0.606  0.018 0.476    8.7\n3     3 LaMarcus … C        34 SAS      53  1754  19.8 0.571  0.198 0.241    6.3\n4     4 Nickeil A… SG       21 NOP      41   501   7.6 0.441  0.515 0.123    1.7\n5     5 Grayson A… SG       24 MEM      30   498  11.4 0.577  0.517 0.199    1.1\n6     6 Jarrett A… C        21 BRK      64  1647  20.3 0.658  0.012 0.574   12.5\n# … with 17 more variables: `DRB%` <dbl>, `TRB%` <dbl>, `AST%` <dbl>,\n#   `STL%` <dbl>, `BLK%` <dbl>, `TOV%` <dbl>, `USG%` <dbl>, ...20 <lgl>,\n#   OWS <dbl>, DWS <dbl>, WS <dbl>, `WS/48` <dbl>, ...25 <lgl>, OBPM <dbl>,\n#   DBPM <dbl>, BPM <dbl>, VORP <dbl>\n\n\nJust like that, the trash is gone."
  },
  {
    "objectID": "textcleaning.html#another-example-splitting-columns",
    "href": "textcleaning.html#another-example-splitting-columns",
    "title": "30  Text cleaning",
    "section": "30.2 Another example: splitting columns",
    "text": "30.2 Another example: splitting columns\nText cleaning is really just a set of logic puzzles. What do I need to do? How can I get there step by step?\nThe NCAA does some very interesting things with data, making it pretty useless.\nFor this walkthrough:\n   Download csv file\n\nLet’s import it and take a look.\n\nkills <- read_csv(\"data/killsperset.csv\")\n\nRows: 150 Columns: 9\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): Player, Cl, Ht, Pos, Season\ndbl (4): Rank, S, Kills, Per Set\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nhead(kills)\n\n# A tibble: 6 × 9\n   Rank Player                    Cl    Ht    Pos       S Kills `Per Set` Season\n  <dbl> <chr>                     <chr> <chr> <chr> <dbl> <dbl>     <dbl> <chr> \n1     1 Lindsey Ruddins, UC Sant… So.   6-2   OH       90   526      5.84 2017-…\n2     2 Pilar Victoria, Arkansas… Sr.   5-11  OH      116   634      5.47 2017-…\n3     3 Laura Milos, Oral Robert… Sr.   5-10  OH      106   560      5.28 2017-…\n4     4 Carlyle Nusbaum, Lipscom… Jr.   5-10  OH      100   522      5.22 2017-…\n5     5 Veronica Jones-Perry, BY… Jr.   6-0   OH      118   569      4.82 2017-…\n6     6 Torrey Van Winden, Cal P… So.   6-3   OH      101   477      4.72 2017-…\n\n\nFirst things first, Player isn’t just player, it’s player, school and conference, all in one. And Ht is a character field – and in feet and inches.\nSo … this is a mess. But there is a pattern. See it? A comma after the player’s name. The Conference is in parens. We can use that.\nFor this, we’re going to use a tidyr function called separate to split columns into multiple columns based on a character. We’ll do this step by step.\nFirst, let’s use that comma to split the player and the rest. Ignore the head at the end. That’s just to keep it from showing you all 150.\n\nkills %>% separate(Player, into=c(\"Player\", \"School\"), sep=\",\") %>% head()\n\n# A tibble: 6 × 10\n   Rank Player             School Cl    Ht    Pos       S Kills `Per Set` Season\n  <dbl> <chr>              <chr>  <chr> <chr> <chr> <dbl> <dbl>     <dbl> <chr> \n1     1 Lindsey Ruddins    \" UC … So.   6-2   OH       90   526      5.84 2017-…\n2     2 Pilar Victoria     \" Ark… Sr.   5-11  OH      116   634      5.47 2017-…\n3     3 Laura Milos        \" Ora… Sr.   5-10  OH      106   560      5.28 2017-…\n4     4 Carlyle Nusbaum    \" Lip… Jr.   5-10  OH      100   522      5.22 2017-…\n5     5 Veronica Jones-Pe… \" BYU… Jr.   6-0   OH      118   569      4.82 2017-…\n6     6 Torrey Van Winden  \" Cal… So.   6-3   OH      101   477      4.72 2017-…\n\n\nGood start.\nNow, let’s get the conference separated. A problem is going to crop up here – the paren is a special character, so we have to escape it with the \\\\.\n\nkills %>% \n  separate(Player, into=c(\"Player\", \"School\"), sep=\",\") %>%\n  separate(School, into=c(\"School\", \"Conference\"), sep=\"\\\\(\") %>% \n  head()\n\nWarning: Expected 2 pieces. Additional pieces discarded in 3 rows [15, 42, 83].\n\n\n# A tibble: 6 × 11\n   Rank Player  School Conference Cl    Ht    Pos       S Kills `Per Set` Season\n  <dbl> <chr>   <chr>  <chr>      <chr> <chr> <chr> <dbl> <dbl>     <dbl> <chr> \n1     1 Lindse… \" UC … Big West)  So.   6-2   OH       90   526      5.84 2017-…\n2     2 Pilar … \" Ark… SEC)       Sr.   5-11  OH      116   634      5.47 2017-…\n3     3 Laura … \" Ora… Summit Le… Sr.   5-10  OH      106   560      5.28 2017-…\n4     4 Carlyl… \" Lip… ASUN)      Jr.   5-10  OH      100   522      5.22 2017-…\n5     5 Veroni… \" BYU… WCC)       Jr.   6-0   OH      118   569      4.82 2017-…\n6     6 Torrey… \" Cal… Big West)  So.   6-3   OH      101   477      4.72 2017-…\n\n\nUh oh. Says we have problems in rows 15, 42 and 83. What are they? The NCAA has decided to put (FL), (NY) and (PA) into three teams to tell you they’re in Florida, New York and Pennsylvania respectively. Well, we can fix that with some gsub and we’ll use a switch called fixed, which when set to TRUE it means this literal string, no special characters.\n\nkills %>% \n  separate(Player, into=c(\"Player\", \"School\"), sep=\",\") %>% \n  mutate(School = gsub(\"(FL)\", \"FL\", School, fixed=TRUE)) %>%\n  mutate(School = gsub(\"(NY)\", \"NY\", School, fixed=TRUE)) %>%\n  mutate(School = gsub(\"(PA)\", \"PA\", School, fixed=TRUE)) %>%\n  separate(School, into=c(\"School\", \"Conference\"), sep=\"\\\\(\") %>% \n  head()\n\n# A tibble: 6 × 11\n   Rank Player  School Conference Cl    Ht    Pos       S Kills `Per Set` Season\n  <dbl> <chr>   <chr>  <chr>      <chr> <chr> <chr> <dbl> <dbl>     <dbl> <chr> \n1     1 Lindse… \" UC … Big West)  So.   6-2   OH       90   526      5.84 2017-…\n2     2 Pilar … \" Ark… SEC)       Sr.   5-11  OH      116   634      5.47 2017-…\n3     3 Laura … \" Ora… Summit Le… Sr.   5-10  OH      106   560      5.28 2017-…\n4     4 Carlyl… \" Lip… ASUN)      Jr.   5-10  OH      100   522      5.22 2017-…\n5     5 Veroni… \" BYU… WCC)       Jr.   6-0   OH      118   569      4.82 2017-…\n6     6 Torrey… \" Cal… Big West)  So.   6-3   OH      101   477      4.72 2017-…\n\n\nOne last thing: see the trailing paren?\n\nkills %>% \n  separate(Player, into=c(\"Player\", \"School\"), sep=\",\") %>% \n  mutate(School = gsub(\"(FL)\", \"FL\", School, fixed=TRUE)) %>%\n  mutate(School = gsub(\"(NY)\", \"NY\", School, fixed=TRUE)) %>%\n  mutate(School = gsub(\"(PA)\", \"PA\", School, fixed=TRUE)) %>%\n  separate(School, into=c(\"School\", \"Conference\"), sep=\"\\\\(\") %>% \n  mutate(Conference=gsub(\")\", \"\", Conference)) %>%\n  head()\n\n# A tibble: 6 × 11\n   Rank Player  School Conference Cl    Ht    Pos       S Kills `Per Set` Season\n  <dbl> <chr>   <chr>  <chr>      <chr> <chr> <chr> <dbl> <dbl>     <dbl> <chr> \n1     1 Lindse… \" UC … Big West   So.   6-2   OH       90   526      5.84 2017-…\n2     2 Pilar … \" Ark… SEC        Sr.   5-11  OH      116   634      5.47 2017-…\n3     3 Laura … \" Ora… Summit Le… Sr.   5-10  OH      106   560      5.28 2017-…\n4     4 Carlyl… \" Lip… ASUN       Jr.   5-10  OH      100   522      5.22 2017-…\n5     5 Veroni… \" BYU… WCC        Jr.   6-0   OH      118   569      4.82 2017-…\n6     6 Torrey… \" Cal… Big West   So.   6-3   OH      101   477      4.72 2017-…\n\n\nLooking good, no errors.\nNow, what should we do about Ht? 6-2 is not going to tell me much when I want to run a regression of height to kills per set. And it’s a character field. So we need to convert it to numbers.\nSeparate again comes to the rescue.\n\nkills %>% \n  separate(Player, into=c(\"Player\", \"School\"), sep=\",\") %>% \n  mutate(School = gsub(\"(FL)\", \"FL\", School, fixed=TRUE)) %>%\n  mutate(School = gsub(\"(NY)\", \"NY\", School, fixed=TRUE)) %>%\n  mutate(School = gsub(\"(PA)\", \"PA\", School, fixed=TRUE)) %>%\n  separate(School, into=c(\"School\", \"Conference\"), sep=\"\\\\(\") %>% \n  mutate(Conference=gsub(\")\", \"\", Conference)) %>%\n  separate(Ht, into=c(\"Feet\", \"Inches\"), sep=\"-\") %>%\n  mutate(Feet = as.numeric(Feet), Inches = as.numeric(Inches)) %>%\n  head()\n\n# A tibble: 6 × 12\n   Rank Player  School Conference Cl     Feet Inches Pos       S Kills `Per Set`\n  <dbl> <chr>   <chr>  <chr>      <chr> <dbl>  <dbl> <chr> <dbl> <dbl>     <dbl>\n1     1 Lindse… \" UC … Big West   So.       6      2 OH       90   526      5.84\n2     2 Pilar … \" Ark… SEC        Sr.       5     11 OH      116   634      5.47\n3     3 Laura … \" Ora… Summit Le… Sr.       5     10 OH      106   560      5.28\n4     4 Carlyl… \" Lip… ASUN       Jr.       5     10 OH      100   522      5.22\n5     5 Veroni… \" BYU… WCC        Jr.       6      0 OH      118   569      4.82\n6     6 Torrey… \" Cal… Big West   So.       6      3 OH      101   477      4.72\n# … with 1 more variable: Season <chr>\n\n\nBut how do we turn that into a height? Math!\n\nkills %>% \n  separate(Player, into=c(\"Player\", \"School\"), sep=\",\") %>% \n  mutate(School = gsub(\"(FL)\", \"FL\", School, fixed=TRUE)) %>%\n  mutate(School = gsub(\"(NY)\", \"NY\", School, fixed=TRUE)) %>%\n  mutate(School = gsub(\"(PA)\", \"PA\", School, fixed=TRUE)) %>%\n  separate(School, into=c(\"School\", \"Conference\"), sep=\"\\\\(\") %>% \n  mutate(Conference=gsub(\")\", \"\", Conference)) %>%\n  separate(Ht, into=c(\"Feet\", \"Inches\"), sep=\"-\") %>%\n  mutate(Feet = as.numeric(Feet), Inches = as.numeric(Inches)) %>%\n  mutate(Height = (Feet*12)+Inches) %>%\n  head()\n\n# A tibble: 6 × 13\n   Rank Player  School Conference Cl     Feet Inches Pos       S Kills `Per Set`\n  <dbl> <chr>   <chr>  <chr>      <chr> <dbl>  <dbl> <chr> <dbl> <dbl>     <dbl>\n1     1 Lindse… \" UC … Big West   So.       6      2 OH       90   526      5.84\n2     2 Pilar … \" Ark… SEC        Sr.       5     11 OH      116   634      5.47\n3     3 Laura … \" Ora… Summit Le… Sr.       5     10 OH      106   560      5.28\n4     4 Carlyl… \" Lip… ASUN       Jr.       5     10 OH      100   522      5.22\n5     5 Veroni… \" BYU… WCC        Jr.       6      0 OH      118   569      4.82\n6     6 Torrey… \" Cal… Big West   So.       6      3 OH      101   477      4.72\n# … with 2 more variables: Season <chr>, Height <dbl>\n\n\nAnd now, in 10 lines of code, using separate, mutate and gsub, we’ve turned the mess that is the NCAA’s data into actually useful data we can analyze.\nThese patterns of thought come in handy when facing messed up data."
  },
  {
    "objectID": "headlines.html",
    "href": "headlines.html",
    "title": "31  Headlines",
    "section": "",
    "text": "Headline\nChatter\nThe main body\nAnnotations\nLabels\nSource line\nCredit line\n\nThe first on that list is the first for a reason. The headline is an incredibly important part of any graphic: it’s often the first thing a reader will see. It’s got to entice people in, tell them a little bit about what they’re going to see, and help tell the story.\nThe second item is the chatter – the text underneath that headline. It needs to work with the headline to further the story, drive people toward the point, maybe add some context.\nThe two bits of text are extremely important. Let’s set up a chart and talk about how to do it wrong and how to do it better.\n\nlibrary(tidyverse)\nlibrary(ggrepel)\n\nThe data and the chart code isn’t important for you to follow along. The code is nothing special. The issues will be with the words that you’ll see below.\n\nscoring <- read_csv(\"data/scoringoffense.csv\")\n\nRows: 1253 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): Name\ndbl (9): G, TD, FG, 1XP, 2XP, Safety, Points, Points/G, Year\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ntotal <- read_csv(\"data/totaloffense.csv\")\n\nRows: 1253 Columns: 9\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): Name\ndbl (8): G, Rush Yards, Pass Yards, Plays, Total Yards, Yards/Play, Yards/G,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\noffense <- total %>% left_join(scoring, by=c(\"Name\", \"Year\"))\n\nnu <- offense %>% filter(Name == \"Nebraska\") %>% filter(Year == 2018)\n\n\nggplot(offense, aes(x=`Yards/G`, y=`Points/G`)) + \n  geom_point(color=\"grey\") + geom_smooth(method=lm, se=FALSE) + \n  labs(x=\"Total yards per game\", y=\"Points per game\", title=\"Headline here\", subtitle=\"This is the chatter. It is chatter. Chatter.\", caption=\"Source: NCAA | By Matt Waite\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    ) +\n  geom_point(data=nu, aes(x=`Yards/G`, y=`Points/G`), color=\"red\") + \n  geom_text_repel(data=nu, aes(x=`Yards/G`, y=`Points/G`, label=\"Nebraska 2018\"))\n\n`geom_smooth()` using formula 'y ~ x'\n\n\n\n\n\nFirst, let’s start with some headline basics:\n\nYour headline should be about what the chart is about, not what makes up the chart. What story is the chart telling? What made it interesting to you? Don’t tell me what the stats are, tell me what it says.\nYour headline should be specific. Generic headlines are boring and ignored.\nYour headline should, most often, have a verb. It’s not a 100 percent requirement, but a headline without a verb means you’re trying to be cute and …\nYour headline shouldn’t be overly cute. Trying to get away with slang, a very Of The Moment cultural reference that will be forgotten soon, or some inside joke is asking for trouble.\nYour headline should provoke a reaction.\n\nGiven our graph, here’s a few that don’t work.\n\nggplot(offense, aes(x=`Yards/G`, y=`Points/G`)) + \n  geom_point(color=\"grey\") + geom_smooth(method=lm, se=FALSE) + \n  labs(x=\"Total yards per game\", y=\"Points per game\", title=\"Nebraska's offense\", subtitle=\"Nebraska's 2018 offense is the red dot.\", caption=\"Source: NCAA | By Matt Waite\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    ) +\n  geom_point(data=nu, aes(x=`Yards/G`, y=`Points/G`), color=\"red\") + \n  geom_text_repel(data=nu, aes(x=`Yards/G`, y=`Points/G`, label=\"Nebraska 2018\"))\n\n`geom_smooth()` using formula 'y ~ x'\n\n\n\n\n\nThe problems here:\n\nNo verb.\nGeneric, forgettable, doesn’t say anything.\nWhat is this chart about? What does it say? We have no idea from the headline and chatter.\nDon’t repeat words from the headline in the chatter. Nebraska Nebraska looks bad. Make one of the Huskers if you’re going to do this.\n\nAnother example:\n\nggplot(offense, aes(x=`Yards/G`, y=`Points/G`)) + \n  geom_point(color=\"grey\") + geom_smooth(method=lm, se=FALSE) + \n  labs(x=\"Total yards per game\", y=\"Points per game\", title=\"Points per game vs total yards per game\", subtitle=\"Nebraska's 2018 offense is below the blue line, which is bad.\", caption=\"Source: NCAA | By Matt Waite\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    ) +\n  geom_point(data=nu, aes(x=`Yards/G`, y=`Points/G`), color=\"red\") + \n  geom_text_repel(data=nu, aes(x=`Yards/G`, y=`Points/G`, label=\"Nebraska 2018\"))\n\n`geom_smooth()` using formula 'y ~ x'\n\n\n\n\n\nWhat’s wrong here?\n\nThe headline is about the stats, not the story.\nThe headline lacks a verb.\nThe headline lacks any interest, really.\nThe headline at least moves in the direction of what this chart is about, but see the previous two.\nThe chatter adds more flavor to it, but what does “below the blue line” even mean? We’re leaving the reader with a lot of questions and no real answers. That;s bad.\n\nLet’s try to do this better.\n\nggplot(offense, aes(x=`Yards/G`, y=`Points/G`)) + \n  geom_point(color=\"grey\") + geom_smooth(method=lm, se=FALSE) + \n  labs(x=\"Total yards per game\", y=\"Points per game\", title=\"Nebraska's strength?\", subtitle=\"The Husker's offense was supposed to power the team. It underperformed.\", caption=\"Source: NCAA | By Matt Waite\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    ) +\n  geom_point(data=nu, aes(x=`Yards/G`, y=`Points/G`), color=\"red\") + \n  geom_text_repel(data=nu, aes(x=`Yards/G`, y=`Points/G`, label=\"Nebraska 2018\"))\n\n`geom_smooth()` using formula 'y ~ x'\n\n\n\n\n\nWhat works here:\n\nProvokes a reaction by asking a question. Drives at what the story is about.\nThe chatter answers the question in the headline without talking about the blue line, a model, anything. A reader can see it.\nSimple, precise, direct language.\n\nOne more, same chart.\n\nggplot(offense, aes(x=`Yards/G`, y=`Points/G`)) + \n  geom_point(color=\"grey\") + geom_smooth(method=lm, se=FALSE) + \n  labs(x=\"Total yards per game\", y=\"Points per game\", title=\"Nebraska's offense underperformed\", subtitle=\"The Husker's should have scored nearly a touchdown more given their output.\", caption=\"Source: NCAA | By Matt Waite\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    ) +\n  geom_point(data=nu, aes(x=`Yards/G`, y=`Points/G`), color=\"red\") + \n  geom_text_repel(data=nu, aes(x=`Yards/G`, y=`Points/G`, label=\"Nebraska 2018\"))\n\n`geom_smooth()` using formula 'y ~ x'\n\n\n\n\n\nWhat works here:\n\nStrong verb: underperformed.\nHeadline tells the story. Chatter bolsters it.\nDoesn’t repeat Nebraska or Huskers.\n\nTaking time to sharpen your headlines will make your graphics better."
  },
  {
    "objectID": "annotations.html",
    "href": "annotations.html",
    "title": "32  Annotations",
    "section": "",
    "text": "For this, we’re going to go back to some code we started in Bubble Charts and we’re going to add some annotations to it. Annotations help us draw attention to things, or help the reader understand what they’re looking at. They’re labels on things, be that the teams we want to highlight or regions of the chart or lines or all of those things.\nFor this, we’ll need to add a new library to the mix called ggrepel. You’ll need to install it in the console with install.packages(\"ggrepel\").\n\nlibrary(tidyverse)\nlibrary(ggrepel)\n\nNow we’ll grab the data, each football game in 2020.\nFor this walkthrough:\n   Download csv file\n\nNow load it.\n\nlogs <- read_csv(\"data/footballlogs20.csv\")\n\nRows: 1100 Columns: 54\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): HomeAway, Opponent, Result, TeamFull, TeamURL, Outcome, Team, Con...\ndbl  (45): Game, PassingCmp, PassingAtt, PassingPct, PassingYds, PassingTD, ...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nI’m going to set up a point chart that places teams on two-axes – yards per play on offense on the x axis, and yards per play on defense. We did this in the bubble charts example.\n\nlogs %>% \n  group_by(Team, Conference) %>% \n  summarise(\n    TotalPlays = sum(OffensivePlays), \n    TotalYards = sum(OffensiveYards), \n    DefensivePlays = sum(DefPlays), \n    DefensiveYards = sum(DefYards)) %>% \n  mutate(\n    OffensiveYPP = TotalYards/TotalPlays, \n    DefensiveYPP = DefensiveYards/DefensivePlays) -> ypp\n\n`summarise()` has grouped output by 'Team'. You can override using the\n`.groups` argument.\n\n\nTo build the annotations, I want the average for offensive yards per play and defensive yards per play. We’re going to use those as a proxy for quality. If your team averages more yards per play on offense, that’s good. If they average fewer yards per play on defense, that too is good. So that sets up a situation where we have four corners, anchored by good at both and bad at both. The averages will create lines to divide those four corners up.\n\naverages <- ypp %>% ungroup() %>% summarise(AvgOffYardsPer = mean(OffensiveYPP), AvgDefYardsPer = mean(DefensiveYPP))\n\naverages\n\n# A tibble: 1 × 2\n  AvgOffYardsPer AvgDefYardsPer\n           <dbl>          <dbl>\n1           5.73           5.75\n\n\nI also want to highlight playoff teams.\n\nplayoff_teams <- c(\"Notre Dame\", \"Alabama\", \"Clemson\", \"Ohio State\")\n\nplayoffs <- ypp %>% filter(Team %in% playoff_teams)\n\nNow we create the plot. We have two geom_points, starting with everyone, then playoff teams. I alter the colors on each to separate them. Next, I add a geom_hline to add the horizontal line of my defensive average and a geom_vline for my offensive average. Next, I want to add some text annotations, labeling two corners of my chart (the other two, in my opinion, become obvious). Then, I want to label all the playoff teams. I use geom_text_repel to do that – it’s using the ggrepel library to push the text away from the dots, respective of other labels and other dots. It means you don’t have to move them around so you can read them, or so they don’t cover up the dots.\nThe rest is just adding labels and messing with the theme.\n\nggplot() + \n  geom_point(data=ypp, aes(x=OffensiveYPP, y=DefensiveYPP), color=\"light grey\") +\n  geom_point(data=playoffs, aes(x=OffensiveYPP, y=DefensiveYPP)) +\n  geom_hline(yintercept=5.7, color=\"dark grey\") + \n  geom_vline(xintercept=5.7, color=\"dark grey\") + \n  geom_text(aes(x=6.8, y=5, label=\"Good Offense, Good Defense\"), color=\"blue\") +\n  geom_text(aes(x=5, y=6, label=\"Bad Defense, Bad Offense\"), color=\"blue\") +\n  geom_text_repel(data=playoffs, aes(x=OffensiveYPP, y=DefensiveYPP, label=Team)) +\n  labs(x=\"Offensive Yards Per Play\", y=\"Defensive Points Per Play\", title=\"All four playoff teams are good\", subtitle=\"Each of the four have above average offenses and defenses.\", caption=\"Source: Sports-Reference.com | By Matt Waite\") +\n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 10),\n    axis.text = element_text(size = 7),\n    axis.ticks = element_blank(),\n    panel.grid.minor = element_blank(),\n    panel.grid.major.x = element_blank()\n  )"
  },
  {
    "objectID": "finishingtouches.html",
    "href": "finishingtouches.html",
    "title": "33  Finishing touches",
    "section": "",
    "text": "The output from ggplot is good, but not great. We need to add some pieces to it. The elements of a good graphic are:\nThat looks like:"
  },
  {
    "objectID": "finishingtouches.html#graphics-vs-visual-stories",
    "href": "finishingtouches.html#graphics-vs-visual-stories",
    "title": "33  Finishing touches",
    "section": "33.1 Graphics vs visual stories",
    "text": "33.1 Graphics vs visual stories\nWhile the elements above are nearly required in every chart, they aren’t when you are making visual stories.\n\nWhen you have a visual story, things like credit lines can become a byline.\nIn visual stories, source lines are often a note at the end of the story.\nGraphics don’t always get headlines – sometimes just labels, letting the visual story headline carry the load.\n\nAn example from The Upshot. Note how the charts don’t have headlines, source or credit lines."
  },
  {
    "objectID": "finishingtouches.html#getting-ggplot-closer-to-output",
    "href": "finishingtouches.html#getting-ggplot-closer-to-output",
    "title": "33  Finishing touches",
    "section": "33.2 Getting ggplot closer to output",
    "text": "33.2 Getting ggplot closer to output\nLet’s explore fixing up ggplot’s output before we send it to a finishing program like Adobe Illustrator. We’ll need a graphic to work with first.\n\nlibrary(tidyverse)\nlibrary(ggrepel)\n\nHere’s the data we’ll use:\nFor this walkthrough:\n   Download csv file\n\n   Download csv file\n\nLet’s load them and join them together.\n\nscoring <- read_csv(\"data/scoringoffense.csv\")\n\nRows: 1253 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): Name\ndbl (9): G, TD, FG, 1XP, 2XP, Safety, Points, Points/G, Year\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ntotal <- read_csv(\"data/totaloffense.csv\")\n\nRows: 1253 Columns: 9\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): Name\ndbl (8): G, Rush Yards, Pass Yards, Plays, Total Yards, Yards/Play, Yards/G,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\noffense <- total %>% left_join(scoring, by=c(\"Name\", \"Year\"))\n\nWe’re going to need this later, so let’s grab Nebraska’s 2018 stats from this dataframe.\n\nnu <- offense %>% \n  filter(Name == \"Nebraska\") %>% \n  filter(Year == 2018)\n\nWe’ll start with the basics.\n\nggplot() + \n  geom_point(data=offense, aes(x=`Yards/G`, y=`Points/G`), color=\"grey\")\n\n\n\n\nLet’s take changing things one by one. The first thing we can do is change the figure size. Sometimes you don’t want a square. We can use the knitr output settings in our chunk to do this easily in our notebooks.\n\nggplot() + \n  geom_point(data=offense, aes(x=`Yards/G`, y=`Points/G`), color=\"grey\")\n\n\n\n\nNow let’s add a fit line.\n\nggplot() + \n  geom_point(data=offense, aes(x=`Yards/G`, y=`Points/G`), color=\"grey\") +\n  geom_smooth(data=offense, aes(x=`Yards/G`, y=`Points/G`), method=lm, se=FALSE)\n\n\n\n\nAnd now some labels.\n\nggplot() + \n  geom_point(data=offense, aes(x=`Yards/G`, y=`Points/G`), color=\"grey\") + \n  geom_smooth(data=offense, aes(x=`Yards/G`, y=`Points/G`), method=lm, se=FALSE) + \n  labs(\n    x=\"Total yards per game\", \n    y=\"Points per game\", \n    title=\"Nebraska's underperforming offense\", \n    subtitle=\"The Husker's offense was the strength of the team. They underperformed.\",\n    caption=\"Source: NCAA | By Matt Waite\"\n    )\n\n\n\n\nLet’s get rid of the default plot look and drop the grey background.\n\nggplot() + \n  geom_point(data=offense, aes(x=`Yards/G`, y=`Points/G`), color=\"grey\") + \n  geom_smooth(data=offense, aes(x=`Yards/G`, y=`Points/G`), method=lm, se=FALSE) + \n  labs(\n    x=\"Total yards per game\", \n    y=\"Points per game\", \n    title=\"Nebraska's underperforming offense\", \n    subtitle=\"The Husker's offense was the strength of the team. They underperformed.\",\n    caption=\"Source: NCAA | By Matt Waite\"\n    ) + \n  theme_minimal()\n\n\n\n\nOff to a good start, but our text has no real heirarchy. We’d want our headline to stand out more. So let’s change that. When it comes to changing text, the place to do that is in the theme element. There are a lot of ways to modify the theme. We’ll start easy. Let’s make the headline bigger and bold.\n\nggplot() + \n  geom_point(data=offense, aes(x=`Yards/G`, y=`Points/G`), color=\"grey\") + \n  geom_smooth(data=offense, aes(x=`Yards/G`, y=`Points/G`), method=lm, se=FALSE) + \n  labs(\n    x=\"Total yards per game\", \n    y=\"Points per game\", \n    title=\"Nebraska's underperforming offense\", \n    subtitle=\"The Husker's offense was the strength of the team. They underperformed.\",\n    caption=\"Source: NCAA | By Matt Waite\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 20, face = \"bold\")\n    ) \n\n\n\n\nNow let’s fix a few other things – like the axis labels being too big, the subtitle could be bigger and lets drop some grid lines.\n\nggplot() + \n  geom_point(data=offense, aes(x=`Yards/G`, y=`Points/G`), color=\"grey\") + \n  geom_smooth(data=offense, aes(x=`Yards/G`, y=`Points/G`), method=lm, se=FALSE) + \n  labs(\n    x=\"Total yards per game\", \n    y=\"Points per game\", \n    title=\"Nebraska's underperforming offense\", \n    subtitle=\"The Husker's offense was the strength of the team. They underperformed.\", \n    caption=\"Source: NCAA | By Matt Waite\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 20, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    ) \n\n\n\n\nMissing from this graph is the context that the headline promises. Where is Nebraska? We haven’t added it yet. So let’s add a point and a label for it.\n\nggplot() + \n  geom_point(data=offense, aes(x=`Yards/G`, y=`Points/G`), color=\"grey\") + \n  geom_smooth(data=offense, aes(x=`Yards/G`, y=`Points/G`), method=lm, se=FALSE) + \n  labs(\n    x=\"Total yards per game\", \n    y=\"Points per game\", \n    title=\"Nebraska's underperforming offense\", \n    subtitle=\"The Husker's offense was the strength of the team. They underperformed.\", \n    caption=\"Source: NCAA | By Matt Waite\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    ) +\n  geom_point(data=nu, aes(x=`Yards/G`, y=`Points/G`), color=\"red\") + \n  geom_text_repel(data=nu, aes(x=`Yards/G`, y=`Points/G`, label=\"Nebraska 2018\"))\n\n\n\n\nIf we’re happy with this output – if it meets all of our needs for publication – then we can simply export it as a png file. We do that by adding + ggsave(\"plot.png\", width=5, height=2) to the end of our code. Note the width and the height are from our knitr parameters at the top – you have to repeat them or the graph will export at the default 7x7.\nIf there’s more work you want to do with this graph that isn’t easy or possible in R but is in Illustrator, simply change the file extension to pdf instead of png. The pdf will open as a vector file in Illustrator with everything being fully editable."
  },
  {
    "objectID": "finishingtouches.html#waffle-charts-require-special-attention",
    "href": "finishingtouches.html#waffle-charts-require-special-attention",
    "title": "33  Finishing touches",
    "section": "33.3 Waffle charts require special attention",
    "text": "33.3 Waffle charts require special attention\nFrequently in my classes, students use the waffle charts library quite extensively to make graphics. This is a quick walkthough on how to get a waffle chart into a publication ready state.\n\nlibrary(waffle)\n\nLet’s look at the offensive numbers from the 2018 Nebraska v. Wisconsin football game. Nebraska lost 41-24, but Wisconsin gained only 15 yards more than Nebraska did. You can find the official stats on the NCAA’s website.\nI’m going to make two vectors for each team and record rushing yards and passing yards.\n\nne <- c(\"Rushing\"=111, \"Passing\"=407, 15)\nwi <- c(\"Rushing\"=370, \"Passing\"=163, 0)\n\nSo what does the breakdown of Nebraska’s night look like? How balanced was the offense?\nThe waffle library can break this down in a way that’s easier on the eyes than a pie chart. We call the library, add the data, specify the number of rows, give it a title and an x value label, and to clean up a quirk of the library, we’ve got to specify colors.\nADDITIONALLY\nWe can add labels and themes, but you have to be careful. The waffle library is applying it’s own theme, but if we override something they are using in their theme, some things that are hidden come back and make it worse. So here is an example of how to use ggplot’s labs and the theme to make a fully publication ready graphic.\n\nwaffle(ne/10, rows = 5, xlab=\"1 square = 10 yards\", colors = c(\"black\", \"red\", \"white\")) + \n  labs(\n    title=\"Nebraska vs Wisconsin on offense\", \n    subtitle=\"The Huskers couldn't get much of a running game going.\",\n    caption=\"Source: NCAA | Graphic by Matt Waite\") + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 10),\n    axis.title.y = element_blank()\n  )\n\n\n\n\nBut what if we’re using a waffle iron? And what if we want to change the output size? It gets tougher.\nTruth is, I’m not sure what is going on with the sizing. You can try it and you’ll find that the outputs are … unpredictable.\nThings you need to know about waffle irons:\n\nThey’re a convenience method, but all they’re really doing is executing two waffle charts together. If you don’t apply the theme to both waffle charts, it breaks.\nYou will have to get creative about applying headline and subtitle to the top waffle chart and the caption to the bottom.\nUsing ggsave doesn’t work either. So you’ll have to use R’s pdf output.\n\nHere is a full example. I start with my waffle iron code, but note that each waffle is pretty much a self contained thing. That’s because a waffle iron isn’t really a thing. It’s just a way to group waffles together, so you have to make each waffle individually. My first waffle has the title and subtitle but no x axis labels and the bottom one has not title or subtitle but the axis labels and the caption.\n\niron(\n waffle(\n   ne/10, \n   rows = 2, \n   xlab=\"Nebraska\",\n   colors = c(\"black\", \"red\", \"white\")) + \n   labs(\n     title=\"Nebraska vs Wisconsin: By the numbers\", \n     subtitle=\"The Huskers couldn't run, Wisconsin could.\") + \n   theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 10),\n    axis.title.y = element_blank()\n  ),\n waffle(\n   wi/10, \n   rows = 2, \n   xlab=\"Wisconsin\\n1 square = 10 yards\", \n   colors = c(\"black\", \"red\", \"white\")) + \n   labs(caption=\"Source: NCAA | Graphic by Matt Waite\")\n)"
  },
  {
    "objectID": "finishingtouches.html#advanced-text-wrangling",
    "href": "finishingtouches.html#advanced-text-wrangling",
    "title": "33  Finishing touches",
    "section": "33.4 Advanced text wrangling",
    "text": "33.4 Advanced text wrangling\nSometimes, you need a little more help with text than what is easily available. Sometimes you want a little more in your finishing touches. Let’s work on some issues common in projects that can be fixed with new new libraries: multi-line chatter, axis labels that need more than just a word, axis labels that don’t fit, and additional text boxes.\nFirst things first, we’ll need to install ggtext with install.packages. Then we’ll load it.\n\nlibrary(ggtext)\n\nLet’s bo back to our scatterplot above. As created, it’s very simple, and the chatter doesn’t say much. Let’s write chatter that instead of being super spare is more verbose.\n\nggplot() + \n  geom_point(data=offense, aes(x=`Yards/G`, y=`Points/G`), color=\"grey\") + \n  geom_smooth(data=offense, aes(x=`Yards/G`, y=`Points/G`), method=lm, se=FALSE) + \n  labs(\n    x=\"Total yards per game\", \n    y=\"Points per game\", \n    title=\"Nebraska's underperforming offense\", \n    subtitle=\"The Husker's offense was the strength of the team, having to overcome a defense changing systems and struggling to stop opponents. But if you compare the offense to every other offense and how many points they score vs the number of yards they roll up, NU underperformed.\", \n    caption=\"Source: NCAA | By Matt Waite\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    ) +\n  geom_point(data=nu, aes(x=`Yards/G`, y=`Points/G`), color=\"red\") + \n  geom_text_repel(data=nu, aes(x=`Yards/G`, y=`Points/G`, label=\"Nebraska 2018\"))\n\n\n\n\nYou can see the problem right away – it’s too long and gets cut off. One way to fix this is to put \\n where you think the line break should be. That’s a newline character, so it would add a return there. But with ggtext, you can use simple HTML to style the text, which opens up a lot of options. We can use a  to break the line and we can use * to italicize the word “underperformed” to add emphasis. The other thing we need to do is in the theme element, change the element_text for plot.subtitle to element_markdown.\n\nggplot() + \n  geom_point(data=offense, aes(x=`Yards/G`, y=`Points/G`), color=\"grey\") + \n  geom_smooth(data=offense, aes(x=`Yards/G`, y=`Points/G`), method=lm, se=FALSE) + \n  labs(\n    x=\"Total yards per game\", \n    y=\"Points per game\", \n    title=\"Nebraska's underperforming offense\", \n    subtitle=\"The Husker's offense was the strength of the team, having to overcome a defense changing systems and struggling to stop opponents. But if you compare<br>the offense to every other offense and how many points they score vs the number of yards they roll up, NU *underperformed*.\", \n    caption=\"Source: NCAA | By Matt Waite\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_markdown(size=10), \n    panel.grid.minor = element_blank()\n    ) +\n  geom_point(data=nu, aes(x=`Yards/G`, y=`Points/G`), color=\"red\") + \n  geom_text_repel(data=nu, aes(x=`Yards/G`, y=`Points/G`, label=\"Nebraska 2018\"))\n\n\n\n\nWith ggtext, there’s a lot more you can do with CSS, like change the color of text, that I don’t recommend. Also, there’s only a few HTML tags that have been implemented. For example, you can’t add links because the a tag hasn’t been added.\nAnother sometimes useful thing you can do is add much more explanation to your axis labels. This is going to be a silly example because “Points per game” is pretty self-explanatory, but roll with it. First, we create an unusually long y axis label, then, in theme, we add some code to axis.title.y.\n\nggplot() + \n  geom_point(data=offense, aes(x=`Yards/G`, y=`Points/G`), color=\"grey\") + \n  geom_smooth(data=offense, aes(x=`Yards/G`, y=`Points/G`), method=lm, se=FALSE) + \n  labs(\n    x=\"Total yards per game\", \n    y=\"Points per game is an imperfect metric of offensive efficiency because defenses and special teams score points as well.\", \n    title=\"Nebraska's underperforming offense\", \n    subtitle=\"The Husker's offense was the strength of the team, having to overcome a defense changing systems and struggling to stop opponents. But if you compare<br>the offense to every other offense and how many points they score vs the number of yards they roll up, NU *underperformed*.\", \n    caption=\"Source: NCAA | By Matt Waite\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_markdown(size=10), \n    panel.grid.minor = element_blank(),\n    axis.title.y = element_textbox_simple(\n      orientation = \"left-rotated\",\n      width = grid::unit(2.5, \"in\")\n    )\n    ) +\n  geom_point(data=nu, aes(x=`Yards/G`, y=`Points/G`), color=\"red\") + \n  geom_text_repel(data=nu, aes(x=`Yards/G`, y=`Points/G`, label=\"Nebraska 2018\"))\n\n\n\n\nOne last advanced trick: Adding a text box explainer in the graphic. This should be used in somewhat rare circumstances – you don’t want to pollute your data space with lots of text. If your graphic needs so much explainer text, you should be asking yourself hard questions about if your chart is clearly telling a story.\nTo add a text box explainer, you need to add a geom_textbox to your chart. The code below does that, and also adds a geom_point to anchor the box to a spot.\n\nggplot() + \n  geom_point(data=offense, aes(x=`Yards/G`, y=`Points/G`), color=\"grey\") + \n  geom_smooth(data=offense, aes(x=`Yards/G`, y=`Points/G`), method=lm, se=FALSE) + \n  geom_textbox(\n    aes(x=500, \n        y=25, \n        label=\"Dots below the blue line indicate offenses that scored fewer points than their yards per game would suggest they should.\", \n        orientation = \"upright\", \n        hjust=0, \n        vjust=1), width = unit(2.8, \"in\")) +\n  geom_point(aes(x=500, y=25), size=2) + \n  labs(\n    x=\"Total yards per game\", \n    y=\"Points per game\", \n    title=\"Nebraska's underperforming offense\", \n    subtitle=\"The Husker's offense was the strength of the team, having to overcome a defense changing systems and struggling to stop opponents. But if you compare<br>the offense to every other offense and how many points they score vs the number of yards they roll up, NU *underperformed*.\", \n    caption=\"Source: NCAA | By Matt Waite\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_markdown(size=10), \n    panel.grid.minor = element_blank()\n    ) +\n  geom_point(data=nu, aes(x=`Yards/G`, y=`Points/G`), color=\"red\") + \n  geom_text_repel(data=nu, aes(x=`Yards/G`, y=`Points/G`, label=\"Nebraska 2018\"))"
  },
  {
    "objectID": "rtweet.html",
    "href": "rtweet.html",
    "title": "34  Rtweet and Text Analysis",
    "section": "",
    "text": "By Collin K. Berke, Ph.D.\nOne of the best rivalries in college volleyball was played on Saturday, November 2, 2019. The seventh-ranked Penn State Nittany Lions (16-3) took on the eigth-ranked Nebraska Cornhuskers (16-3). This match featured two of the best middle blockers in the country, Nebraska’s Lauren Stivrins and Penn State’s Kaitlyn Hord. Stivrins was ranked No. 1 in Big Ten hitting percentage, a .466 before the match up. Hord, close behind, had a .423 hitting percentage and was ranked towards the top as one of the league’s top blockers.\nAlongside being a competition between premier players, this match was set to be a battle between two of the winningest coaches in NCAA Women’s Volleyball history. Russ Rose, head coach of the Nittany Lions, came into the match with a 1289-209 (.860) record, 17 Big Ten Conference Championships, and 7 NCAA National Championships. For the Nebraska Cornhuskers’ head coach, John Cook came into the match with a 721-148 (.830) record, 9 Big 12 Conference Championships, 4 Big Ten Conference Championships, and 5 NCAA National Championships. Check out this article here to get a better understanding of the significance of this game and rivalry.\nBeing a contest between two storied programs, premier players, and two of the most winningest coaches in NCAA volleyball history, this match was poised to be one of the premier Big Ten matches of the 2019 season. If history was to serve as a guide, this match would easily go into five exciting, nail-biting sets.\nTo no surprise–it did. Nebraska came out victorious, 3 sets to 2, winning the fifth set 15 - 13. Although we have commentators, analysts, and reporters to tell us the story of the game, wouldn’t it be interesting to tell the story from the fan’s perspective? Can what they say allow us to take a pulse of how the fan base feels during the game? We can answer this question using Twitter tweet data, which we will access with the rtweet package.\nQuestion - How do people feel during a game? Positive? Negative? Neutral?\nThis chapter will teach you how to extract, analyze, and visualize Twitter text data to tell a story about peoples sentiments toward any sport team, player, or event. Although Twitter is conventionally thought of as a social media platform, at a general level, it can be thought of as a corpus of textual data, which is generated by millions of users, talking about a wide array of topics over time.\nDuring this chapter, we will access text data held within the body of tweets, which we will extract and import into R through the use of an API (application programming interface). This can seem like a pretty technical term, but all it really is is a portal to which data can be shared between computers and humans. NPR has an API 101 post on their site, which you can read to get a rough idea of what an API is and how they are used.\nIn fact, many news organizations provide APIs for people to access and use their data. For example, many news services like The New York Times, NPR, The Associated Press and social media platforms like Facebook have APIs that can be used to access content or varying types of data. Many of these just require you to: a). have a developer account; b) have the proper API keys; and c). use their API in accordance with their terms of service. Every API you come across should have documentation outlining its use.\nAbove was a pretty hand-wavy explanation of APIs. Indeed, APIs have many different uses beyond just extracting data, but such a discussion is beyond the scope of this chapter. Nevertheless, APIs can be a powerful, useful tool to access data not normally available on web pages or other statistical reporting services."
  },
  {
    "objectID": "rtweet.html#prerequisites",
    "href": "rtweet.html#prerequisites",
    "title": "34  Rtweet and Text Analysis",
    "section": "34.1 Prerequisites",
    "text": "34.1 Prerequisites\nYou will need to have a Twitter account to access and extract data. If needed, you can sign up for an account here.\n\n34.1.1 Tools for text analysis\nThis chapter will also require you to load and acquaint yourself with functions in four packages, rtweet, lubridate, stringr, and tidytext. You may have used some of functions in other portions of this class. Others may be new to you.\n\nrtweet is a R package used to access Twitter data via the Twitter API.\nlubridate is a package that makes working with dates and times a bit easier.\nstringr is a package that provides several functions to make working with string data a little easier.\ntidytext is a package used to tidy, analyze, and visualize textual analyses. We will use this package to calculate tweet sentiments (e.g., positive and negative feelings).\n\nThis chapter will also use other packages you have gained familiarity with throughout the class: dplyr and ggplot2. To install these packages and load them for use in our analysis session, run the following code:\n\ninstall.packages(\"rtweet\") # installs the rtweet package\n\ninstall.packages(\"tidytext\") # installs the tidytext package\n\ninstall.packages(\"tidyverse\") # A collection of packages, includes the stringr packages\n\ninstall.packages(\"lubridate\") # Provides functions to make working with dates/times easier\n\n\n# Load the packages to be used in your analysis session\n\nlibrary(rtweet)\n\nlibrary(tidytext)\n\nlibrary(tidyverse)\n\nlibrary(lubridate)\n\nlibrary(ggrepel)\n\n\n\n34.1.2 Working with string data\nString data is just basically letters, words, symbols, and even emojis. Take for example the following tweet:\n\n\n\n\n\nEverything contained in the message portion of the tweet is string data, even the emojis. When it comes to emojis, most have a special textual code that is rendered by a browser or device that gets displayed as an image. For example, the ear of corn emoji is actually written as :corn:, but it gets rendered as an image when we view the tweet on our computers/devices. We can extract, analyze, and visualize this string data to tell a wide range of stories from users’ tweets. Our goal being to show sentiment over the length of a Husker volleyball Match and football game."
  },
  {
    "objectID": "rtweet.html#verifying-your-account-to-access-twitter-data",
    "href": "rtweet.html#verifying-your-account-to-access-twitter-data",
    "title": "34  Rtweet and Text Analysis",
    "section": "34.2 Verifying your account to access Twitter data",
    "text": "34.2 Verifying your account to access Twitter data\nBefore you can access Twitter data, you will need to verify your account. The rtweet package makes this really easy to do. You will first need to run one of the package’s functions for it to walk you through the authentication process. To do this, let’s just search for the most recent 8000 (non-retweeted) tweets containing the #huskers and #GBR hashtags.\nBefore you run the following code chunk, though, be aware a few things will take place. First, a browser window will open up asking you to verify that rtweet is allowed to access Twitter data via the API on behalf of your account. Accept this request and enter your credentials if you are asked to. Once you do this, you should get a message in your browser stating you have successfully authenticated the rtweet package. The data will then begin to download. The amount of time needed to import this data will depend on how many tweets the hashtag(s) are associated with. More tweets generally means longer import times.\n\nhuskers <- search_tweets(\n  \"#huskers\", n = 8000, include_rts = FALSE\n)\n\ngbr <- search_tweets(\n  \"#GBR\", n = 8000, include_rts = FALSE\n)\n\nImportant Note: Depending on when you run the above code chunk, the API will return different data then the data used for the examples later in this chapter. This is due to the query rate cap Twitter places on it’s API. Twitter’s API caps queries to 18,000 of the most recent tweets during the past couple of days. This cap resets every 15 minutes. The rtweet package does has functionality to pull data once your query limit resets. However, if you’re looking to pull tweets for a very popular event (e.g., The Super Bowl), you may want to consider other options to extract this type of data. This is also important to understand because if you are looking to pull tweets for a specific event, you will need to make sure you are pulling this data within a reasonable time during or after the event. If you don’t, these rate limits might not allow you access the data you need to do your analysis.\nThe data we will use later for the examples in the chapter can be found here and here. The first data set are tweets that use the #huskers hashtag. The second has data of tweets that use the #gbr hashtag. You will need to download both data sets, put them in the right directory, and import both for the below examples to work correctly. The code to import this data will look something like this:\n\nhuskerTweets <- read_csv(\"data/huskerTweets.csv\")\n\nRows: 7974 Columns: 90\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (49): user_id, status_id, screen_name, text, source, reply_to_status_id...\ndbl  (13): display_text_width, favorite_count, retweet_count, quoted_favorit...\nlgl  (25): is_quote, is_retweet, quote_count, reply_count, symbols, ext_medi...\ndttm  (3): created_at, quoted_created_at, account_created_at\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ngbrTweets <- read_csv(\"data/gbrTweets.csv\")\n\nWarning: One or more parsing issues, see `problems()` for details\n\n\nRows: 5678 Columns: 90\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (49): user_id, status_id, screen_name, text, source, reply_to_status_id...\ndbl  (13): display_text_width, favorite_count, retweet_count, quoted_favorit...\nlgl  (25): is_quote, is_retweet, quote_count, reply_count, symbols, ext_medi...\ndttm  (3): created_at, quoted_created_at, account_created_at\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nThis brings up a good point about saving any data you import from Twitter’s API. Always save your data. Remember those rate limits? If you don’t save your data and too many days pass, you will not be able to access that data again. To do this, you can use the write_as_csv() function from the rtweet package to save a .csv file of your data. The code to do this will look something like this:\n\nwrite_as_csv(huskerTweets, \"data/huskerTweets.csv\")\n\nBe aware that this function will overwrite data. If you make changes to your huskerTweets object and then run the write_as_csv() function again, it will overwrite your saved file with the modifications you made to your object. The lesson then is to always save an extra copy of your data in a separate directory, just in case you do accidentally make a mistake in overwriting your data."
  },
  {
    "objectID": "rtweet.html#the-data-used-here",
    "href": "rtweet.html#the-data-used-here",
    "title": "34  Rtweet and Text Analysis",
    "section": "34.3 The data used here",
    "text": "34.3 The data used here\nTo provide a little context, I pulled the data in this chapter on Sunday, November 3, 2019. This was the day after Nebraska Football lost to Purdue, and Nebraska Volleyball won against Penn State. You can follow the steps above to download this data for the following examples.\nTo make it easier to work with, I am going to combine these two data sets into one using the bind_rows() function from dplyr. There is a slight problem though, some people may have had a tweet that contained both the #huskers and #GBR hashtags in their tweet. So if we combine these two data sets, there might be duplicate data. To dedupe the data, we can apply a distinct(text, .keep_all = TRUE) to remove any duplicates. The .keep_all = TRUE argument just tells R to keep all columns in the data frame after our data has been deduped.\n\ntweet_data <- bind_rows(huskerTweets, gbrTweets) %>% \n  distinct(text, .keep_all = TRUE)"
  },
  {
    "objectID": "rtweet.html#data-exploration",
    "href": "rtweet.html#data-exploration",
    "title": "34  Rtweet and Text Analysis",
    "section": "34.4 Data Exploration",
    "text": "34.4 Data Exploration\nLet’s explore the data a bit. Run a glimpse(tweet_data) to get a view of what data was returned from twitter. My query on November 3rd, 2019 returned 11,523 non-retweeted tweets from 3,917 accounts using the #huskers and/or the #GBR hashtag within the tweet’s body (again if you ran the code above, your data will be different) .\nIt’s important to remember these tweets can come from accounts that are people, organizations, and even bots. So when drawing conclusions from this data, make sure to keep in mind that these tweets may not represent the sentiment of just one person. Additionally, it is important to remember that not all fans of a sports team are on or use Twitter, so it surely is not a valid representation of all fan sentiment. Indeed, you could also have fans of other teams using your hashtags.\n\nglimpse(tweet_data)\n\nRows: 11,523\nColumns: 90\n$ user_id                 <chr> \"x17636179\", \"x17636179\", \"x17636179\", \"x15629…\n$ status_id               <chr> \"x1191100304940396544\", \"x1190852650905944065\"…\n$ created_at              <dttm> 2019-11-03 21:10:16, 2019-11-03 04:46:11, 201…\n$ screen_name             <chr> \"SeanKeeler\", \"SeanKeeler\", \"SeanKeeler\", \"Hus…\n$ text                    <chr> \"ICYMI, #CSURams fans, a recap of @denverpost …\n$ source                  <chr> \"Twitter Web App\", \"Twitter for iPhone\", \"Twit…\n$ display_text_width      <dbl> 269, 188, 182, 122, 135, 189, 172, 135, 94, 11…\n$ reply_to_status_id      <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ reply_to_user_id        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ reply_to_screen_name    <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ is_quote                <lgl> FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE…\n$ is_retweet              <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALS…\n$ favorite_count          <dbl> 0, 0, 1, 116, 19, 2, 40, 23, 149, 5, 31, 15, 4…\n$ retweet_count           <dbl> 0, 0, 0, 6, 1, 0, 1, 2, 5, 1, 3, 1, 0, 0, 0, 0…\n$ quote_count             <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ reply_count             <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ hashtags                <chr> \"CSURams Huskers ProudToBe AtThePeak CSU\", \"Hu…\n$ symbols                 <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ urls_url                <chr> \"tinyurl.com/y2b3kog9 tinyurl.com/yy7ntps4\", \"…\n$ urls_t.co               <chr> \"https://t.co/1FlAnRRgEq https://t.co/t8j1LJe8…\n$ urls_expanded_url       <chr> \"https://tinyurl.com/y2b3kog9 https://tinyurl.…\n$ media_url               <chr> NA, NA, NA, \"http://pbs.twimg.com/ext_tw_video…\n$ media_t.co              <chr> NA, NA, NA, \"https://t.co/FSCP827hg0\", \"https:…\n$ media_expanded_url      <chr> NA, NA, NA, \"https://twitter.com/HuskerSports/…\n$ media_type              <chr> NA, NA, NA, \"photo\", \"photo\", \"photo\", \"photo\"…\n$ ext_media_url           <chr> NA, NA, NA, \"http://pbs.twimg.com/ext_tw_video…\n$ ext_media_t.co          <chr> NA, NA, NA, \"https://t.co/FSCP827hg0\", \"https:…\n$ ext_media_expanded_url  <chr> NA, NA, NA, \"https://twitter.com/HuskerSports/…\n$ ext_media_type          <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ mentions_user_id        <chr> \"x8216772\", \"x8216772\", \"x24725032\", \"x1210226…\n$ mentions_screen_name    <chr> \"denverpost\", \"denverpost\", \"DPostSports\", \"Ha…\n$ lang                    <chr> \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\"…\n$ quoted_status_id        <chr> NA, \"x1190803840213209088\", NA, NA, NA, NA, NA…\n$ quoted_text             <chr> NA, \"From Nebraska to Fort Collins, how CSU Ra…\n$ quoted_created_at       <dttm> NA, 2019-11-03 01:32:14, NA, NA, NA, NA, NA, …\n$ quoted_source           <chr> NA, \"TweetDeck\", NA, NA, NA, NA, NA, NA, NA, N…\n$ quoted_favorite_count   <dbl> NA, 5, NA, NA, NA, NA, NA, NA, NA, NA, 194, NA…\n$ quoted_retweet_count    <dbl> NA, 1, NA, NA, NA, NA, NA, NA, NA, NA, 16, NA,…\n$ quoted_user_id          <chr> NA, \"x24725032\", NA, NA, NA, NA, NA, NA, NA, N…\n$ quoted_screen_name      <chr> NA, \"DPostSports\", NA, NA, NA, NA, NA, NA, NA,…\n$ quoted_name             <chr> NA, \"Denver Post Sports\", NA, NA, NA, NA, NA, …\n$ quoted_followers_count  <dbl> NA, 34841, NA, NA, NA, NA, NA, NA, NA, NA, 109…\n$ quoted_friends_count    <dbl> NA, 395, NA, NA, NA, NA, NA, NA, NA, NA, 601, …\n$ quoted_statuses_count   <dbl> NA, 113697, NA, NA, NA, NA, NA, NA, NA, NA, 19…\n$ quoted_location         <chr> NA, \"Denver, Colorado\", NA, NA, NA, NA, NA, NA…\n$ quoted_description      <chr> NA, \"Sports news & analysis from @denverpost o…\n$ quoted_verified         <lgl> NA, TRUE, NA, NA, NA, NA, NA, NA, NA, NA, FALS…\n$ retweet_status_id       <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ retweet_text            <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ retweet_created_at      <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ retweet_source          <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ retweet_favorite_count  <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ retweet_retweet_count   <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ retweet_user_id         <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ retweet_screen_name     <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ retweet_name            <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ retweet_followers_count <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ retweet_friends_count   <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ retweet_statuses_count  <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ retweet_location        <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ retweet_description     <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ retweet_verified        <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ place_url               <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ place_name              <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ place_full_name         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ place_type              <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ country                 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ country_code            <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ geo_coords              <chr> \"NA NA\", \"NA NA\", \"NA NA\", \"NA NA\", \"NA NA\", \"…\n$ coords_coords           <chr> \"NA NA\", \"NA NA\", \"NA NA\", \"NA NA\", \"NA NA\", \"…\n$ bbox_coords             <chr> \"NA NA NA NA NA NA NA NA\", \"NA NA NA NA NA NA …\n$ status_url              <chr> \"https://twitter.com/SeanKeeler/status/1191100…\n$ name                    <chr> \"Sean Keeler\", \"Sean Keeler\", \"Sean Keeler\", \"…\n$ location                <chr> \"Denver, CO\", \"Denver, CO\", \"Denver, CO\", \"Neb…\n$ description             <chr> \"@DenverPost staffer, dad, husband, drummer, d…\n$ url                     <chr> \"https://t.co/z0eFbv9eaz\", \"https://t.co/z0eFb…\n$ protected               <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALS…\n$ followers_count         <dbl> 5245, 5245, 5245, 30451, 30451, 30451, 30451, …\n$ friends_count           <dbl> 1619, 1619, 1619, 701, 701, 701, 701, 701, 701…\n$ listed_count            <dbl> 296, 296, 296, 247, 247, 247, 247, 247, 247, 2…\n$ statuses_count          <dbl> 28124, 28124, 28124, 12801, 12801, 12801, 1280…\n$ favourites_count        <dbl> 4498, 4498, 4498, 6033, 6033, 6033, 6033, 6033…\n$ account_created_at      <dttm> 2008-11-25 23:53:13, 2008-11-25 23:53:13, 200…\n$ verified                <lgl> FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE, T…\n$ profile_url             <chr> \"https://t.co/z0eFbv9eaz\", \"https://t.co/z0eFb…\n$ profile_expanded_url    <chr> \"http://www.seankeeler.tumblr.com\", \"http://ww…\n$ account_lang            <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ profile_banner_url      <chr> \"https://pbs.twimg.com/profile_banners/1763617…\n$ profile_background_url  <chr> \"http://abs.twimg.com/images/themes/theme10/bg…\n$ profile_image_url       <chr> \"http://pbs.twimg.com/profile_images/118130627…\n\n\nAs you can see, glimpse() returns a lot of columns that are not really relevant to our analysis. Let’s apply a select() function to only retain the data relevant to our analysis, .\n\ntweet_data <- tweet_data %>% \n  select(user_id, status_id, created_at, screen_name, text, display_text_width,\n         favorite_count, retweet_count, hashtags, description, followers_count)"
  },
  {
    "objectID": "rtweet.html#cleaning-data-for-analysis",
    "href": "rtweet.html#cleaning-data-for-analysis",
    "title": "34  Rtweet and Text Analysis",
    "section": "34.5 Cleaning data for analysis",
    "text": "34.5 Cleaning data for analysis\nIf you examine the data set, you will see this data needs some wrangling. First, we need to fix the created_at variable. Right now it is represented in Greenwich Mean Time (GMT), but we need it to be in Central Standard Time (CST). We do this so we can make sense of when during the game things happened. Second, the data is outside of the time frame we are interested in examining, so we need to filter the data to be windowed during the time of the game. We will filter the data by date and time, examining tweets a little before and after the game.\n\n34.5.1 Fixing the date and focusing only on game tweets\nWe will use the with_tz() on our created_at variable within our mutate() function to transform the created_at column into Central Standard Time (CST). We do this by setting the tzone argument to \"America/Chicago\". Once out time is adjusted, we need group tweets within a specific bin of time. For this example I have decided to bin tweets to the nearest 5 minute mark. We can do this by using the round_time() function provided to us by the lubridate package.\nThen, since we are only interested in tweets during the game, we can apply a dplyr filter() function to window our data set to tweets being posted around the start and end of the game.\n\nvolleyball_tweets <- tweet_data %>%\n  mutate(created_at = with_tz(created_at, tzone = \"America/Chicago\"),\n         created_at = round_time(created_at, \"5 mins\", tz = \"America/Chicago\")) %>% \n  filter(created_at >= \"2019-11-02 18:30:00\" & created_at <= \"2019-11-02 23:30:00\")"
  },
  {
    "objectID": "rtweet.html#number-of-tweets-throughout-the-game",
    "href": "rtweet.html#number-of-tweets-throughout-the-game",
    "title": "34  Rtweet and Text Analysis",
    "section": "34.6 Number of tweets throughout the game",
    "text": "34.6 Number of tweets throughout the game\nOne question we might have pertains to the number of tweets that occur during the course of the match. To do this, all we need to do is group_by() our tweets by our created_at variable, and then use the count() function to count the number of tweets within each five minute bin. We then use ggplot to plot a line chart where created_at is placed on the x-axis and n, number of tweets, is placed on the y-axis.\n\nstart_time <- tibble(time = as_datetime(\"2019-11-02 19:35:00\", tz = \"America/Chicago\"), label = \"Start Time\") \nvolleyball_time <- volleyball_tweets %>%\n  group_by(created_at) %>% \n  count()\n\nggplot() +\n  geom_line(data = volleyball_time, aes(x = created_at, y = n)) +\n  geom_point(data = start_time, aes(x = time, y = 5), color = \"red\") +\n  geom_text_repel(data = start_time, aes(x = time, y = 3, label = label), nudge_x = -2) +\n  labs(y = \"Number of Tweets\",\n       x = \"Central Standard Time (CST)\") +\n  theme_minimal() +\n  theme(axis.title.x = element_blank())\n\n\n\n\nThere you have it. A trend line plotting tweet volume throughout the course of the event. Do you see any areas where the match might have had a significant number of tweets?"
  },
  {
    "objectID": "rtweet.html#tidying-the-text-data-for-analysis-applying-the-sentiment-scores",
    "href": "rtweet.html#tidying-the-text-data-for-analysis-applying-the-sentiment-scores",
    "title": "34  Rtweet and Text Analysis",
    "section": "34.7 Tidying the text data for analysis, applying the sentiment scores",
    "text": "34.7 Tidying the text data for analysis, applying the sentiment scores\nOkay, that’s cool–but what we really want to know is what are peoples’ sentiments throughout the game? Did they feel positive or negative throughout the event? Were there times that were more positive or negative? To achieve this, we are going to use the tidytext package to tidy up our text data and apply a sentiment score to each word held within each tweet. Let’s break this down step-by-step.\nFirst, we need to get the dictionary that contains the sentiment scoring for thousands of words used in the English language. afinn <- get_sentiments(\"afinn\") does just that for us. The development of these sentiment dictionaries is beyond this chapter. However, most of these dictionaries are crowd sourced by having people provide self-responses on how positive or negative a word is to them. For now, just understand the affin variable contains many words that have been rated for how positive or negative a word is on a scale that ranges from -5 to 5. -5 being the most negative, and 5 being the most positive. If you want to learn more about this dictionary or others, you can read more about them here.\nSecond, now that we have our dictionary imported, we need to clean up our tweets data set so we can apply sentiment scores to each word used within each tweet. There’s one problem, though. Each row in our data set is a complete tweet. For us to apply a sentiment score for each word, each word needs to get its own row. This is where the unnest_tokens() function from the tidytext package comes into play. We use this function to create a data set that will create a new column called word, which will place every word from every tweet in our data set on its own row, which it knows which text data to this because we set the the second argument to the column name that holds our text data. In this case, we give it the text column. Once you run this code, if you look at the volleyball_tweets_tidy object, you should now have a data set where every row has its own word which was done for every tweet. This data frame should now be a super long data frame.\nLastly, the English language has many words that really don’t mean anything in regards to sentiment. Take for example the word ‘the’. This article really doesn’t represent a positive or negative sentiment. Thus, these types of words need to be taken out of our data set to enhance improve the accuracy of our analysis. To do this, we will apply the anti_join(stop_words) to our dplyr chain. All this does is get rid of the stop words in our data set that really don’t contribute to the sentiment scores we are eventually going to calculate.\nIf you get an error on the next bit of code, you’ll likely need to install the textdata package on the console with install.packages(\"textdata\"). Next, if this next block of code hangs, it’s because in the console you’re being asked if you want to download some data. You do indeed want to do that, so type 1 and hit enter.\n\nafinn <- get_sentiments(\"afinn\")\n\nvolleyball_tweets_tidy <- volleyball_tweets %>% \n  unnest_tokens(word, text) %>% \n  anti_join(stop_words) \n\nJoining, by = \"word\"\n\n\n\n34.7.0.1 Fan sentiment over the game\nNow that we have a tidied textual data set, all we need to do is apply our sentiment scores to these words using the inner_join(), then group_by() our created_at variable, and calculate the mean sentiment for each five minute interval. At this point, we will use ggplot to plot sentiment of the tweets over time. We will do this by plotting the created_at variable on the x-axis and the newly calculated sentiment variable on the y-axis. The rest is just adding annotations and styling, which we are already familiar with.\n\nvolleyball_tweets_sentiment <- volleyball_tweets_tidy %>%\n  inner_join(afinn) %>% \n  group_by(created_at) %>% \n  summarise(sentiment = mean(value))\n\nJoining, by = \"word\"\n\nggplot() +\n  geom_line(data = volleyball_tweets_sentiment, aes(x = created_at, y = sentiment)) +\n  geom_text(aes(x = as_datetime(\"2019-11-02 19:00:00\", tz = \"America/Chicago\"), y = 3), color = \"darkgreen\", label = \"Positive Sentiment\", size = 5) +\n  geom_text(aes(x = as_datetime(\"2019-11-02 19:00:00\", tz = \"America/Chicago\"), y = -3), color = \"red\", label = \"Negative Sentiment\", size = 5) +\n  labs(title = \"People's Sentiment on Twitter Positive Towards\\nHusker Volleyball's Win Against Penn State\",\n       subtitle = \"Sentiment mostly positive throughout the game\",\n       caption = \"Source: #huskers and #GBR Tweets, 2019-11-02 | By Collin K. Berke\",\n       y = \"Sentiment\",\n       x = \"Central Standard Time (CST)\") + \n  scale_y_continuous(limits = c(-4, 4)) +\n  theme_minimal() +\n  theme(axis.title.x = element_blank(),\n        plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 10),\n    axis.text = element_text(size = 7)\n        )\n\n\n\n\nWhen looking at this trend line, you can see that during the volleyball game, tweets using the #husker and #gbr hashtags had some wide variation in sentiment. Overall it seems that tweets during the volleyball match were mostly positive, where at times it dipped negative. Why might this be the case? Well, unfortunately, even though this was a big game for Husker volleyball, not many people were tweeting during the match (take a look at the number of tweets chart above). So if there was one word used in a tweet that was ranked as very negative in sentiment, it would have easily drove our average sentiment into the negative region quickly.\nAlso, we need to consider that this match took place after the Huskers loss to Purdue, which we will examine in the next example. This is important to know because people during the volleyball match may have also been tweeting about how poorly the football game went earlier in the day. Thus, low tweet volume mixed with the potential for tweets referencing something other than the match at hand may have had some influence on the sentiment scores.\nThere’s also one last thing to keep in mind when you draw conclusions from this type of text data. Language is complex–it can have multiple meanings, which is highly influenced by context. Take for example the word ‘destroy’, like its use in the following statement: “This team is going to destroy the defense today.” Although we clearly can see this is a positive statement, when a computer applies sentiment scores, the context of the statement is stripped away, and destroy will be scored as negative sentiment. In short, computers are not smart enough to include context when they calculate sentiment, yet. So, keep this limitation in mind when you draw conclusions from your sentiment analyses using text data.\n\n\n34.7.1 Example 2 - Nebraska’s loss to Purdue, what were fan’s sentiments towards this loss?\nThe Nebraska Cornhuskers–a 3-point favorite going into West Lafayette, IN–squared off with the Purdue Boilermakers on November 2, 2019. Purdue was 2-6 on the season. Nebraska, with a 4-4 record coming off of a 38-31 home loss to Indiana, had many fans hoping Scott Frost could lead his team to a must needed win. Especially given the expectation was the Cornhuskers would go 6-6 on the season, and the team still had to play Wisconsin (6-2), Maryland (3-6), and Iowa (6-2) to get to those needed six wins to become bowl eligible. So, how did people particularly take this loss? Let’s use our Twitter data to get an answer.\nAgain, we need to fix the time zone with the with_tz() function so the data is represented in Central Standard Time (CST). Then we apply our filter() command to window our data to when the game was taking place.\n\nfootball_tweets <- tweet_data %>%\n  mutate(created_at = with_tz(created_at, tzone = \"America/Chicago\"),\n         created_at = round_time(created_at, \"5 mins\", tz = \"America/Chicago\")) %>% \n  filter(created_at >= \"2019-11-02 11:00:00\" & created_at <= \"2019-11-02 15:30:00\") \n\nNow, let’s just get a sense of the number of tweets that occurred at certain points in the game. We again need to do some data wrangling with group_by(), and then we use the count() function to add up all the tweets during each five minute interval. Once the data is wrangled, we can use our ggplot code to visualize tweet volume throughout the game.\n\nfootball_time <- football_tweets %>%\n  group_by(created_at) %>% \n  count()\n\nggplot() +\n  geom_line(data = football_time, aes(x = created_at, y = n)) +\n  theme_minimal() +\n  labs(y = \"Number of Tweets\")\n\n\n\n\nLooking at this plot, we can see the tweet volume is a lot higher than that of the volleyball match. In fact, it looks like towards the end of the game there was a five minute interval where ~80 or so tweets occurred. Given the outcome of the game, I assume people were not real happy during this spike in activity. Well we have the tools to answer this question.\nAs before, let’s pull in our sentiment library with the get_sentiments() function. Then lets tidy up our tweet data using the unnest_tokens() and anti_join(stop_words). Remember this step just places every word within a tweet on its own row and filters out any words that don’t have any real meaning to the calculation of sentiment (i.e., and, the, a, etc.).\n\nafinn <- get_sentiments(\"afinn\")\n\nfootball_tweets_tidy <- football_tweets %>% \n  unnest_tokens(word, text) %>% \n  anti_join(stop_words) \n\nJoining, by = \"word\"\n\n\nWe now have our clean textual data, let’s apply sentiment scores for each word using the inner_join(affin) function, group_by(created_at) to create a group for each five minute interval, and then use summarise() to calculate then mean sentiment for each time period.\nYou can then use the ggplot code to plot sentiment over time, introduce annotations to highlight specific aspects within our plot, and then apply styling to the plot to move it closer to publication readiness. Now for the big reveal, how did people take the loss to a 2-6 Purdue? Run the code and find out.\n\nfootball_tweets_sentiment <- football_tweets_tidy %>%\n  inner_join(afinn) %>% \n  group_by(created_at) %>% \n  summarise(sentiment = mean(value)) %>% \n  arrange(sentiment)\n\nJoining, by = \"word\"\n\nggplot() +\n  geom_line(data = football_tweets_sentiment, aes(x = created_at, y = sentiment)) +\n  geom_text(aes(x = as_datetime(\"2019-11-02 14:30:00\", tz = \"America/Chicago\"), y = 2), color = \"darkgreen\", label = \"Positive Sentiment\", size = 5) +\n  geom_text(aes(x = as_datetime(\"2019-11-02 14:30:00\", tz = \"America/Chicago\"), y = -2), color = \"red\", label = \"Negative Sentiment\", size = 5) +\n  scale_y_continuous(limits = c(-2.5, 2.5)) +\n  labs(title = \"People's Sentiment on Twitter Negative\\nTowards Husker Football's Loss to Purdue\",\n       subtitle = \"People were positive at the start and part of the first half,\\nthen negative throughout\",\n       caption = \"Source: #huskers and #GBR Tweets, 2019-11-02 | By Collin K. Berke\",\n       y = \"Sentiment\",\n       x = \"Central Standard Time (CST)\") + \n  theme_minimal() +\n  theme(axis.title.x = element_blank(),\n        plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 10),\n    axis.text = element_text(size = 7)\n  )\n\n\n\n\nAs you can see, it started out pretty positive. Then, it started to go negative throughout the first half. However, there was a bump, which was around the time D-Lineman, Darrion Daniels almost scored a pick six. Around halftime, we can see a little bit of a bump towards positive sentiment. This was probably most likely due to people cheering on the Huskers to come out strong after the half. As the second half progressed, you can see things turned for the worst again, and sentiment became negative up until the end of the game, most likely because people realized they were going to get another L on the schedule. You can relive all this excitement again by catching the game recap here."
  },
  {
    "objectID": "rvest.html",
    "href": "rvest.html",
    "title": "35  Intro to rvest",
    "section": "",
    "text": "All the way back in Chapter 2, we used Google Sheets and importHTML to get our own data out of a website. For me, that’s a lot of pointing and clicking and copying and pasting. R has a library that can automate the harvesting of data from HTML on the internet. It’s called rvest.\nLet’s grab a simple, basic HTML table from College Football Stats. There’s nothing particularly strange about this table – it’s simply formatted and easy to scrape.\nFirst we’ll need some libraries. We’re going to use a library called rvest, which you can get by running install.packages('rvest') in the console.\nThe rvest package has functions that make fetching, reading and parsing HTML simple. The first thing we need to do is specify a url that we’re going to scrape.\nNow, the most difficult part of scraping data from any website is knowing what exact HTML tag you need to grab. In this case, we want a <table> tag that has all of our data table in it. But how do you tell R which one that is? Well, it’s easy, once you know what to do. But it’s not simple. So I’ve made a short video to show you how to find it.\nWhen you have simple tables, the code is very simple. You create a variable to receive the data, then pass it the url, read the html that was fetched, find the node you need using your XPath value you just copied and you tell rvest that it’s a table.\nWhat we get from this is … not a dataframe. It’s a list with one element in it, which just so happens to be our dataframe. When you get this, the solution is simple: just overwrite the variable you created with the first list element.\nAnd what do we have?\nWe have data, ready for analysis."
  },
  {
    "objectID": "rvest.html#a-slightly-more-complicated-example",
    "href": "rvest.html#a-slightly-more-complicated-example",
    "title": "35  Intro to rvest",
    "section": "35.1 A slightly more complicated example",
    "text": "35.1 A slightly more complicated example\nWhat if we want more than one year in our dataframe?\nThis is a common problem. What if we want to look at every scoring offense going back several years? The website has them going back to 2009. How can we combine them?\nFirst, we should note, that the data does not have anything in it to indicate what year it comes from. So we’re going to have to add that. And we’re going to have to figure out a way to stack two dataframes on top of each other.\nSo let’s grab 2020.\n\nscoringoffenseurl20 <- \"http://www.cfbstats.com/2020/leader/national/team/offense/split01/category09/sort01.html\"\n\nscoringoffense20 <- scoringoffenseurl20 %>%\n  read_html() %>%\n  html_nodes(xpath = '//*[@id=\"content\"]/div[2]/table') %>%\n  html_table()\n\nscoringoffense20 <- scoringoffense20[[1]]\n\nFirst, how are we going to know, in the data, which year our data is from? We can use mutate.\n\nscoringoffense20 <- scoringoffense %>% mutate(YEAR = 2020)\n\nError in initialize(...): attempt to use zero-length variable name\n\n\nUh oh. Error. What does it say? It’s … not clear, but a hint is that our first column doesn’t have a name. Each column must be named. If you look at our data in the environment tab in the upper right corner, you’ll see that indeed, the first column has no name. It’s the FBS rank of each team. So we can fix that and mutate in the same step. We’ll do that using rename and since the field doesn’t have a name to rename it, we’ll use a position argument. We’ll say rename column 1 as Rank.\n\nscoringoffense21 <- scoringoffense %>% rename(Rank = 1) %>% mutate(YEAR = 2021)\nscoringoffense20 <- scoringoffense20 %>% rename(Rank = 1) %>% mutate(YEAR = 2020)\n\nAnd now, to combine the two tables together length-wise – we need to make long data – we’ll use a dpylr function called bind_rows. The good thing is bind_rows is simple.\n\ncombined <- bind_rows(scoringoffense21, scoringoffense20)\n\nNote in the environment tab we now have a data frame called combined that has 257 observations – which just so happens to be what 127 from 2020 and 130 from 2021 add up to.\n\nhead(combined)\n\n# A tibble: 6 × 11\n   Rank Name            G    TD    FG `1XP` `2XP` Safety Points `Points/G`  YEAR\n  <int> <chr>       <int> <int> <int> <int> <int>  <int>  <int>      <dbl> <dbl>\n1     1 Ohio State     13    76    20    76     0      1    594       45.7  2021\n2     2 Western Ke…    14    79    23    72     2      0    619       44.2  2021\n3     3 Pittsburgh     14    76    17    71     0      1    580       41.4  2021\n4     4 Wake Forest    14    72    23    65     4      0    574       41    2021\n5     5 Coastal Ca…    13    72     9    65     2      2    532       40.9  2021\n6     6 Alabama        15    75    23    71     4      0    598       39.9  2021"
  },
  {
    "objectID": "rvest.html#an-even-more-complicated-example",
    "href": "rvest.html#an-even-more-complicated-example",
    "title": "35  Intro to rvest",
    "section": "35.2 An even more complicated example",
    "text": "35.2 An even more complicated example\nWhat do you do when the table has non-standard headers?\nUnfortunately, non-standard means there’s no one way to do it – it’s going to depend on the table and the headers. But here’s one idea: Don’t try to make it work.\nI’ll explain.\nLet’s try to get season team stats from Sports Reference. If you look at that page, you’ll see the problem right away – the headers span two rows, and they repeat. That’s going to be all kinds of no good. You can’t import that. Dataframes must have names all in one row. If you have two-line headers, you have a problem you have to fix before you can do anything else with it.\nFirst we’ll grab the page.\n\nurl <- \"https://www.sports-reference.com/cbb/seasons/2020-school-stats.html\"\n\nNow, similar to our example above, we’ll read the html, use XPath to find the table, and then read that table with a directive passed to it setting the header to FALSE. That tells rvest that there isn’t a header row. Just import it as data.\n\nstats <- url %>%\n  read_html() %>%\n  html_nodes(xpath = '//*[@id=\"basic_school_stats\"]') %>%\n  html_table(header=FALSE)\n\nWhat we get back is a list of one element (similar to above). So let’s pop it out into a data frame.\n\nstats <- stats[[1]]\n\nAnd we’ll take a look at what we have.\n\nhead(stats)\n\n# A tibble: 6 × 38\n  X1    X2     X3    X4    X5    X6    X7    X8    X9    X10   X11   X12   X13  \n  <chr> <chr>  <chr> <chr> <chr> <chr> <chr> <chr> <lgl> <chr> <chr> <lgl> <chr>\n1 \"\"    \"\"     Over… Over… Over… Over… Over… Over… NA    Conf. Conf. NA    Home \n2 \"Rk\"  \"Scho… G     W     L     W-L%  SRS   SOS   NA    W     L     NA    W    \n3 \"1\"   \"Abil… 31    20    11    .645  -2.87 -6.87 NA    15    5     NA    13   \n4 \"2\"   \"Air … 32    12    20    .375  -0.37 3.02  NA    5     13    NA    8    \n5 \"3\"   \"Akro… 31    24    7     .774  7.15  -0.40 NA    14    4     NA    15   \n6 \"4\"   \"Alab… 30    8     22    .267  -18.… -8.85 NA    5     13    NA    6    \n# … with 25 more variables: X14 <chr>, X15 <lgl>, X16 <chr>, X17 <chr>,\n#   X18 <lgl>, X19 <chr>, X20 <chr>, X21 <lgl>, X22 <chr>, X23 <chr>,\n#   X24 <chr>, X25 <chr>, X26 <chr>, X27 <chr>, X28 <chr>, X29 <chr>,\n#   X30 <chr>, X31 <chr>, X32 <chr>, X33 <chr>, X34 <chr>, X35 <chr>,\n#   X36 <chr>, X37 <chr>, X38 <chr>\n\n\nSo, that’s not ideal. We have headers and data mixed together, and our columns are named X1 to X38. Also note: They’re all character fields. Because the headers are interspersed with data, it all gets called character data. So we’ve got to first rename each field.\n\nstats <- stats %>% rename(Rank=X1, School=X2, Games=X3, OverallWins=X4, OverallLosses=X5, WinPct=X6, OverallSRS=X7, OverallSOS=X8, Blank1=X9, ConferenceWins=X10, ConferenceLosses=X11, Blank2=X12, HomeWins=X13, HomeLosses=X14, Blank3=X15, AwayWins=X16, AwayLosses=X17, Blank4=X18, ForPoints=X19, OppPoints=X20, Blank5=X21, Minutes=X22, FieldGoalsMade=X23, FieldGoalsAttempted=X24, FieldGoalPCT=X25, ThreePointMade=X26, ThreePointAttempts=X27, ThreePointPct=X28, FreeThrowsMade=X29, FreeThrowsAttempted=X30, FreeThrowPCT=X31, OffensiveRebounds=X32, TotalRebounds=X33, Assists=X34, Steals=X35, Blocks=X36, Turnovers=X37, PersonalFouls=X38)\n\nNow we have to get rid of those headers interspersed in the data. We can do that with filter that say keep all the stuff that isn’t this.\n\nstats <- stats %>% filter(Rank != \"Rk\" & Games != \"Overall\") \n\nAnd finally, we need to change the file type of all the fields that need it. We’re going to use a clever little trick, which goes like this: We’re going to use mutate_at, which means mutate these fields. The pattern for mutate_at is mutate_at these variables and do this thing to them. But instead of specifying which of 38 variables we’re going to mutate, we’re going to specify the one we don’t want to change, which is the name of the school. And we just want to convert them to numeric, which is simple. Here’s what it looks like:\n\nstats <- stats %>% mutate_at(vars(-School), as.numeric)\n\nOne last thing: Who needs columns called Blank1, Blank2, Blank3, etc?\n\nstats <- stats %>% select(-starts_with(\"Blank\"))\n\nAnd just like that, we have a method for getting up to the minute season stats for every team in Division I.\n\nhead(stats)\n\n# A tibble: 6 × 33\n   Rank School      Games OverallWins OverallLosses WinPct OverallSRS OverallSOS\n  <dbl> <chr>       <dbl>       <dbl>         <dbl>  <dbl>      <dbl>      <dbl>\n1     1 Abilene Ch…    31          20            11  0.645      -2.87      -6.87\n2     2 Air Force      32          12            20  0.375      -0.37       3.02\n3     3 Akron          31          24             7  0.774       7.15      -0.4 \n4     4 Alabama A&M    30           8            22  0.267     -18.9       -8.85\n5     5 UAB            32          19            13  0.594      -0.94      -1.64\n6     6 Alabama St…    32           8            24  0.25      -16.2       -6.53\n# … with 25 more variables: ConferenceWins <dbl>, ConferenceLosses <dbl>,\n#   HomeWins <dbl>, HomeLosses <dbl>, AwayWins <dbl>, AwayLosses <dbl>,\n#   ForPoints <dbl>, OppPoints <dbl>, Minutes <dbl>, FieldGoalsMade <dbl>,\n#   FieldGoalsAttempted <dbl>, FieldGoalPCT <dbl>, ThreePointMade <dbl>,\n#   ThreePointAttempts <dbl>, ThreePointPct <dbl>, FreeThrowsMade <dbl>,\n#   FreeThrowsAttempted <dbl>, FreeThrowPCT <dbl>, OffensiveRebounds <dbl>,\n#   TotalRebounds <dbl>, Assists <dbl>, Steals <dbl>, Blocks <dbl>, …"
  },
  {
    "objectID": "advancedrvest.html",
    "href": "advancedrvest.html",
    "title": "36  Advanced rvest",
    "section": "",
    "text": "With the chapter, we learned how to grab one table from one page. But what if you needed more than that? What if you needed hundreds of tables from hundreds of pages? What if you needed to combine one table on one page into a bigger table, but hundreds of times. There’s a way to do this, it just takes patience, a lot of logic, a lot of debugging and, for me, a fair bit of swearing.\nSo what we are after are game by game stats for each college basketball team in America.\nWe can see from this page that each team is linked. If we follow each link, we get a ton of tables. But they aren’t what we need. There’s a link to gamelogs underneath the team names.\nSo we can see from this that we’ve got some problems.\nSo let’s start with that last question first and grab libraries we need.\nFirst things first, we need to grab the url to each team from that first link.\nBut notice first, we don’t want to grab the table. The table doesn’t help us. We need to grab the only link in the table. So we can do that by using the table xpath node, then grabbing the anchor tags in the table, then get only the link out of them (instead of the linked text).\nNotice we now have a list called schools with … 353 elements. That’s the number of teams in college basketball, so we’re off to a good start. Here’s what the fourth element is.\nSo note, that’s the relative path to Alabama A&M’s team page. By relative path, I mean it doesn’t have the root domain. So we need to add that to each request or we’ll get no where.\nSo that’s a problem to note.\nBefore we solve that, let’s just make sure we can get one page and get what we need.\nWe’ll scrape Abilene Christian.\nTo merge all this into one big table, we need to grab the team name and their conference and merge it into the table. But those values come from somewhere else. The scraping works just about the same, but instead of html_table you use html_text.\nSo the first part of this is reading the html of the page so we don’t do that for each element – we just do it once so as to not overwhelm their servers.\nThe second part is we’re grabbing the team name based on it’s location in the page.\nThird: The conference.\nFourth is the table itself, noting to ignore the headers. The last bit fixes the headers, removes the garbage header data from the table, converts the data to numbers, fixes the date and mutates a team and conference value. It looks like a lot, and it took a bit of twiddling to get it done, but it’s no different from what you did for your last homework.\nNow what we’re left with is how do we do this for ALL the teams. We need to send 353 requests to their servers to get each page. And each url is not the one we have – we need to alter it.\nFirst we have to add the root domain to each request. And, each request needs to go to /2019-gamelogs.html instead of /2019.html. If you look at the urls two the page we have and the page we need, that’s all that changes.\nWhat we’re going to use is what is known in programming as a loop. We can loop through a list and have it do something to each element in the loop. And once it’s done, we can move on to the next thing.\nThink of it like a program that will go though a list of your classmates and ask each one of them for their year in school. It will start at one end of the list and move through asking each one “What year in school are you?” and will move on after getting an answer.\nExcept we want to take a url, add something to it, alter it, then request it and grab a bunch of data from it. Once we’re done doing all that, we’ll take all that info and cram it into a bigger dataset and then move on to the next one. Here’s what that looks like:\nThe magic here is in for (i in schools){. What that says is for each iterator in schools – for each school in schools – do what follows each time. So we take the code we wrote for one school and use it for every school.\nThis part:\nlog_url is what changes our school page url to our logs url, and school_url is taking that log url and the root domain and merging them together to create the complete url. Then, page just reads that url we created.\nWhat follows that is taken straight from our example of just doing one.\nThe last bits are using bind_rows to take our data and mash it into a bigger table, over and over and over again until we have them all in a single table. Then, we tell our scraper to wait a few seconds because we don’t want our script to machine gun requests at their server as fast as it can go. That’s a guaranteed way to get them to block scrapers, and could knock them off the internet. Aggressive scrapers aren’t cool. Don’t do it.\nLastly, we write it out to a csv file.\nSo with a little programming knowhow, a little bit of problem solving and the stubbornness not to quit on it, you can get a whole lot of data scattered all over the place with not a lot of code."
  },
  {
    "objectID": "advancedrvest.html#one-last-bit",
    "href": "advancedrvest.html#one-last-bit",
    "title": "36  Advanced rvest",
    "section": "36.1 One last bit",
    "text": "36.1 One last bit\nMost tables that Sports Reference sites have are in plain vanilla HTML. But some of them – particularly player based stuff – are hidden with a little trick. The site puts the data in a comment – where a browser will ignore it – and then uses javascript to interpret the commented data. To a human on the page, it looks the same. To a browswer or a scraper, it’s invisible. You’ll get errors. How do you get around it?\n\nScrape the comments.\nTurn the comment into text.\nThen read that text as html.\nProceed as normal.\n\n\nh <- read_html('https://www.baseball-reference.com/leagues/MLB/2017-standard-pitching.shtml')\n\ndf <- h %>% html_nodes(xpath = '//comment()') %>%    # select comment nodes\n    html_text() %>%    # extract comment text\n    paste(collapse = '') %>%    # collapse to a single string\n    read_html() %>%    # reparse to HTML\n    html_node('table') %>%    # select the desired table\n    html_table()"
  },
  {
    "objectID": "blogging.html",
    "href": "blogging.html",
    "title": "37  Building your own blog with blogdown",
    "section": "",
    "text": "If you listen to the Measurables Podcast for about two episodes, you’ll detect a pattern. The host asks each guest how they got started in sports analytics. To a one, they’ll say they found public data and started blogging about their analysis of it. For nearly every single guest, this is their path into the field. They started messing around with data in a toolset, found something interesting and wrote a post about what they found and how they found it. Other analysts noticed it, or a hiring manager liked what they read, and the rest is history, as they say.\nSo, let’s do that. Let’s get you a blog so you can post your work.\nHere’s our requirements:"
  },
  {
    "objectID": "blogging.html#setup",
    "href": "blogging.html#setup",
    "title": "37  Building your own blog with blogdown",
    "section": "37.1 Setup",
    "text": "37.1 Setup\nWith those requirements in mind, we’re going to use a library called Blogdown, which creates blog posts from R Markdown files, similar to what you’ve been working with in this book.\nIt installs how you think it should. Go into the console and run this:\n\ninstall.packages('blogdown') \n\nAfter that, run this:\n\nblogdown::install_hugo()\n\nAfter that, we’re ready to start making a blog. To do that, go to File > New Project and select New Directory (or Version Control if you know what you’re doing).\n\n\n\n\n\nIn the Project Type view, you may have to scroll down to find “Website using blogdown” but that’s your choice. Mine will probably look different than yours, but below is what the line you’re looking for looks like.\n\n\n\n\n\nAnd now we’ve come to our first decision point.\nFirst, name the directory you’re going to put this into. Keep it simple. Blog is fine. Then decide where on your computer you’re going to put it. Put it somewhere you’re going to remember. Don’t put it on your Desktop. Put it in a folder. Remember what folder because you’re going to need this later.\nNow for the big decision: What theme to use. There’s four choices, but the default theme is the most fully documented. If you want to use another theme, you’ll be better off creating two projects: the one you’re going to publish, and the lithium theme you can steal stuff from.\nHere’s the easiest themes to work with:\n\nyihui/hugo-lithium\nyihui/hugo-prose\nyihui/hugo-ivy\nyihui/hugo-xmin\n\n\n\n\n\n\nWhen you hit Create Project, you should get an R Studio screen. You might have a file open called config.yaml. If you don’t, open it (you can use the files pane in the bottom right). This file will look different depending on which theme you used. This configuration file needs to have a few things in it. This is the config.yaml for my website, but you should use it as a guide for what yours will need:\nbaseurl: http://mattwaite.github.io/\nlanguageCode: en-us\ntitle: Matt Waite's GitHub Site\ntheme: hugo-lithium\ngoogleAnalytics: ''\ndisqusShortname: ''\n\nignoreFiles:\n  - \\.Rmd$\n  - \\.Rmarkdown$\n  - _cache$\n  - \\.knit\\.md$\n  - \\.utf8\\.md$\npermalinks:\n  post: /:year/:month/:day/:slug/\nmenu:\n  main:\n    - name: About\n      url: /about/\n    - name: GitHub\n      url: https://github.com/mattwaite\n    - name: Twitter\n      url: https://twitter.com/mattwaite\nparams:\n  \n  MathJaxCDN: //cdnjs.cloudflare.com/ajax/libs\n  MathJaxVersion: 2.7.5\n  description: Tools and teaching materials made by Matt Waite of the University of Nebraska-Lincoln\n  favicon: favicon.ico\n  highlightjsCDN: //cdnjs.cloudflare.com/ajax/libs\n  highlightjsLang:\n    - r\n    - yaml\n  highlightjsTheme: GitHub\n  highlightjsVersion: 9.12.0\n  logo:\n    alt: Logo\n    height: 50\n    url: logo.png\n    width: 50\nThe top parts are generally filled in regardless of the theme. You’ll obviously want to change the base url and the title. For Google Analytics, you’ll add your tracking id there if and when you want to set that up. Leave ignorefiles and permalinks alone. For your menu – that is up to you. If someone wanting to hire you came across your site, what would you include here? Another thing to change? The description. It will be the text that appears below the name in Google."
  },
  {
    "objectID": "blogging.html#seeing-your-site",
    "href": "blogging.html#seeing-your-site",
    "title": "37  Building your own blog with blogdown",
    "section": "37.2 Seeing your site",
    "text": "37.2 Seeing your site\nWhile you are creating your site, you’re going to want to see it. Now’s a good time to introduce serving your site in R Studio so you can see it before you deploy it.\nIn the console, type this: blogdown:: serve_site() or you can go to Addins > Serve Site.\nNow, in the viewer tab on the right, you should see your site."
  },
  {
    "objectID": "blogging.html#editing-existing-markdown-content",
    "href": "blogging.html#editing-existing-markdown-content",
    "title": "37  Building your own blog with blogdown",
    "section": "37.3 Editing existing Markdown content",
    "text": "37.3 Editing existing Markdown content\nThere’s two types of files you can work with – plain Markdown files or R Markdown files. Plain Markdown are generally pages without code. R Markdown are the ones with the code.\nLet’s start with a simple Markdown file – the homepage of the site. To edit files, use the Files tab. All of the material you’ll be editing is in the content folder.\n\n\n\n\n\nLet’s start with editing the about.md file. Some templates also have a _index.md file, which is the static part of the homepage.\n\n\n\n\n\nAt the top, you will have something called a yaml header, which are things that set up the page. They are quite simple to figure out. Here’s the yaml header the Ivy theme generates. Obviously, I need to change the author, the date and the title for my site.\n---\nauthor: Yihui Xie\ndate: \"2017-08-06\"\ntitle: About Hugo Ivy\n---\nChange yours, then change the text below the yaml header, and then save it. Click on the Viewer tab and check out your work."
  },
  {
    "objectID": "blogging.html#creating-a-new-post-in-r-markdown",
    "href": "blogging.html#creating-a-new-post-in-r-markdown",
    "title": "37  Building your own blog with blogdown",
    "section": "37.4 Creating a new post in R Markdown",
    "text": "37.4 Creating a new post in R Markdown\nYou’ll notice in your content folder that there is a folder called post, and in there are multiple posts. Depending on your theme, you might just have folders in post, and you might have some markdown files. They work mostly the same way.\nThe magic here is how you name them. You’ll remember from config.yaml that we have a post url format that goes post / year / month / day / slug. The reason for that is that urls matter for Google. Clean urls with meaningful information in them rank higher.\nSo in post, you’ll see the folders are named similarly – a date separated by dashes followed by a slug – the headline of your post in all lower case with dashes instead of spaces. So if I were writing a post called “I love sports data”, the slug version of that would be i-love-sports-data. If I were writing it on December 15, which I am, my folder would be 2020-12-15-i-love-sports-data.\nNOTE: CAPITALIZATION MATTERS. AS IN, DON’T. You don’t see capitals in URLs, so don’t use them.\nSo let’s create a post.\nThe easiest way to do this is to click Addins > New Post. You need to fill out four things on the page: The Title, Author, Date (if you’re changing it) and the Format. Be smart about the title – don’t but TEST TEST TEST or TITLE HERE because it will build with that and it’s hard to change later. Give some thought to the headline on your post before you hit done.\n\n\n\n\n\nWhen you’re done, hit Done and an RMarkdown file will appear, just as you have been using throughout this book.\nThe first thing you’ll see is the yaml header. Typically, if we’ve filled out the previous screen correctly, we should be good. But if you need to fix something, you can do it here.\n---\ntitle: \"Sports Data Analysis and Visualization\"\nauthor: \"Matt Waite\"\ndate: 2019-07-29T21:13:14-05:00\ncategories: [\"Books\"]\ntags: [\"R\", \"data\", \"sports\"]\n---\nBelow the yaml header? That’s up to you. Go do some of that writing stuff you do."
  },
  {
    "objectID": "blogging.html#publishing-your-site",
    "href": "blogging.html#publishing-your-site",
    "title": "37  Building your own blog with blogdown",
    "section": "37.5 Publishing your site",
    "text": "37.5 Publishing your site\nBlogdown is built on top of the Hugo static site generator. What that means is that Blogdown is going to take your Markdown files and create static html. What does static html mean? It means there’s no server creating it on the fly – that’s called dynamic html – so this can be hosted on the simplest of servers.\nPublishing takes a lot of steps to get set up, but once it is, it’s easy.\nStep 1: Get a GitHub account\nGo to GitHub and sign up for an account. NOTE: Your username will be part of your website address, and you could potentially be sending this to employers. I’m sure blaze420rryday has been your handle since middle school, but do you want an employer to see that? My GitHub user name is mattwaite. See what I’m getting at here?\nStep 2: Set up your website repository\nFor the low low price of nothing, GitHub will host a website for you, and we are going to take them up on that bargain. There’s several tricks to getting this to work, but none of them are hard. They just require you to be specific.\nTo start, you can click on the plus sign in the top right corner or hit the green new button, depending on what your page looks like vs mine (I’m reasonably active GitHub user, so mine will look different from yours).\n\n\n\n\n\nIn the create a new repository page, the name of your respository needs to follow this pattern: yourusernamehere.github.io where yourusernamehere is … your username. So my site is mattwaite.github.io because my username is mattwaite. This is why you do not want to select swaggylovedoctor as your username, no matter how attached to it you are. Your employment chances are zero with something dumb like that.\nAfter you’ve named the repository correctly, leave it public, check add .gitignore, and then select a gitignore template. Type R into the search, select it, and the create repository button will become active. Click create repository.\nStep 3:\nDon’t close your GitHub window.\nIn a new tab, download the GitHub Desktop App and install it.\nGitHub is a version control system and a social network mixed together. Version control is like Track Changes in Word, but on steroids. If you plan on a career in analytics or data science, GitHub is a skill you will have to learn, but it’s beyond the scope of this book.\nTo work around this, we’re going to use GitHub Desktop to manage our interactions with GitHub. Open GitHub Desktop and log into your GitHub account in the app.\nTo get your repository into GitHub Desktop, go back to your tab with your GitHub repository in it. Find the Code button and click it. Click on the Open With GitHub Desktop button.\nIn the window that pops up, we need to set the Local Path. This path needs to be the same place your blog project is located. Click the Choose button and navigate to where your blog project is located. Then, just click Clone.\n\n\n\n\n\nStep 4:\nLet’s get your site on the internet.\nSwitch back to your blog project in R Studio. We’re going to output your site and upload it to GitHub.\nTo do this, we need to change config.yaml. We need to tell your website project that you want to publish to your GitHub folder, not the default.\nOpen config.yaml in your blog project. Near the top, above ignoreFiles, add this line, replacing yourusername with … your user name. This says publish to your GitHub project that you put in the same folder as your blog project:\npublishDir: \"../yourusername.github.io\"\nSave config.yaml.\nOnce you are ready to build your site, you need to click on the Build tab and then on Build Website.\n\n\n\n\n\nIf it worked, you should see output in the window that looks something like this (yours will be different from mine):\n\n\n\n\n\nStep 5\nNow go to the GitHub Desktop App. You should see something that looks like this, though yours will be different from mine.\n\n\n\n\n\nThis is where you will commit files to your repository. GitHub is a two-step process for getting files from your computer to GitHub. The first is committing the files. To do that, add a message in the box next to your avatar (where it says update index.html in the screenshot above). Then click Commit to main (mine says master because it’s an older repository before GitHub switched to using main by default). The second step is to push it to GitHub. You do that on the screen that appears after you have committed your files. It should say you have No Local Changes, which is good because you sent them to GitHub. Now click Push origin.\n\n\n\n\n\nIn a few minutes, you should be able to go to username.github.io in a browser and you’ll see your site. Here’s mine."
  },
  {
    "objectID": "checklist.html",
    "href": "checklist.html",
    "title": "38  Project Checklist",
    "section": "",
    "text": "The main projects in SPMC350 Sports Data Analysis and Visualization involve writing a blog post, created on GitHub pages, about a sports topic that uses code, data and three graphics to tell a story. The assignment is worth 20 percent of the semester grade.\nAn example of a B+/A- post: Is Nebraska the best worst team in college basketball?"
  },
  {
    "objectID": "checklist.html#topic-checklist",
    "href": "checklist.html#topic-checklist",
    "title": "38  Project Checklist",
    "section": "38.1 Topic checklist",
    "text": "38.1 Topic checklist\n\nIs your topic original? Is it interesting?\nDoes your topic ask if Tom Brady, Michael Jordan, Lebron James, the 95 Huskers, Alabama football or Georgia’s 2021 defense is the GOAT? Then your topic is not original nor interesting.\nSeriously. Anything that asks if Alabama is good, or the Golden State Warriors, or any team that’s one more than one championship in a relatively short period of time. If you’re asking if they’re good, stop. Find something else.\nThere’s a very, very, very big world out there. Read. Listen. Find something new.\nStill stuck? Sometimes good projects come from pain. A decent idea might be is X as bad as we think? The one exception: If your idea is Nebraska is the best 3-9 team of all time, stop. It’s played out. Find another cosmically snake-bitten team or player.\nAnother idea: What sports are in season? What’s happening? Good or bad. Zero in on that."
  },
  {
    "objectID": "checklist.html#writing-checklist",
    "href": "checklist.html#writing-checklist",
    "title": "38  Project Checklist",
    "section": "38.2 Writing checklist",
    "text": "38.2 Writing checklist\n\nHave you spell checked your writing?\nHave you read what you have written out loud? Reading it out loud will help you find bad writing.\nNo really. Read it out loud. It makes a huge difference. If you stumble over your own words, you should rewrite it.\nIf what you read out loud doesn’t sound like you, rewrite it.\nDo you have complete sentences? Do you have active verbs?"
  },
  {
    "objectID": "checklist.html#headline-checklist",
    "href": "checklist.html#headline-checklist",
    "title": "38  Project Checklist",
    "section": "38.3 Headline checklist",
    "text": "38.3 Headline checklist\n\nAre your headlines just labels? Example: Nebraska’s offense. NBA’s Best Shooters. The best NFL punters. Those are labels, not headlines.\nDo your headlines tell a story, or attempt to draw me into one?\nDo your headlines include words that are what the chart is about?\nDo your headlines point me toward what I should see in the chart?"
  },
  {
    "objectID": "checklist.html#graphics-checklist",
    "href": "checklist.html#graphics-checklist",
    "title": "38  Project Checklist",
    "section": "38.4 Graphics checklist",
    "text": "38.4 Graphics checklist\n\nDo you have the required parts? They are: headline, chatter, credit line, source line.\nDo your graphics have annotations that help me determine what is going on? Example: Are important dots labeled on a scatterplot?\nAre there lines to show me averages? Are those lines labeled?\nCan I read bar chart axis text?\n\nDo each one of your charts tell a story? Can I tell what that story is in a glance?\nDo you use color sparingly to draw my attention to something specific?\nIs there separation between your headline size and your chatter size?\nDoes your typography have a hierarchy? Does your headline stand out from your chatter? Are your axis labels smaller than your data labels?\nHave you simplified the theme (i.e. dropped the default grey background)?\nAre your axis labels something anyone can understand?"
  },
  {
    "objectID": "checklist.html#code-checklist",
    "href": "checklist.html#code-checklist",
    "title": "38  Project Checklist",
    "section": "38.5 Code checklist",
    "text": "38.5 Code checklist\n\nAre your variables named what they are? Meaning, did you call your data logs when it’s made up of players? That’s bad.\nIs spaced out so it’s one line per command? Look at the example post for guidance.\nIs your code in the proper order? Libraries at the top. Data preparation before the graphics?\nDid you add message=FALSE, warning=FALSE to any {r} blocks that spit out large amounts of automated text? Your library step doesn’t need all that gibberish spitting out in your blog."
  },
  {
    "objectID": "checklist.html#last-thing",
    "href": "checklist.html#last-thing",
    "title": "38  Project Checklist",
    "section": "38.6 Last thing",
    "text": "38.6 Last thing\nCan you see your blog post on the internet?\nThe link you are turning in starts with YourGitHubUserNameHere.github.io. If you are turning in a GitHub.com url, you are turning in the wrong thing."
  },
  {
    "objectID": "usingpackages.html",
    "href": "usingpackages.html",
    "title": "39  Using packages to get data",
    "section": "",
    "text": "There is a growing number of packages and repositories of sports data, largely because there’s a growing number of people who want to analyze that data. We’ve done it ourselves with simple Google Sheets tricks. Then there’s RVest, which is a method of scraping the data yourself from websites. But with these packages, someone has done the work of gathering the data for you. All you have to learn are the commands to get it.\nOne very promising collection of libraries is something called the SportsDataverse, which has a collection of packages covering specific sports, all of which are in various stages of development. Some are more complete than others, but they are all being actively worked on by developers. Packages of interest in this class are:\nNot part of the SportsDataverse, but in the same neighborhood, is nflfastR, which can provide NFL play-by-play data.\nBecause they’re all under development, not all of them can be installed with just a simple install.packages(\"something\"). Some require a little work, some require API keys.\nThe main issue for you is to read the documentation carefully."
  },
  {
    "objectID": "usingpackages.html#using-cfbfastr-as-a-cautionary-tale",
    "href": "usingpackages.html#using-cfbfastr-as-a-cautionary-tale",
    "title": "39  Using packages to get data",
    "section": "39.1 Using cfbfastR as a cautionary tale",
    "text": "39.1 Using cfbfastR as a cautionary tale\ncfbfastR presents us a good view into the promise and peril of libraries like this.\nFirst, to make this work, follow the installation instructions and then follow how to get an API key from College Football Data and how to add that to your environment. But maybe wait to do that until you read the whole section.\nAfter installations, we can load it up.\n\nlibrary(tidyverse)\nlibrary(cfbfastR)\n\nYou might be thinking, “Oh wow, I can get play by play data for college football. Let’s look at what are the five most heartbreaking plays of this doomed Nebraska season.” Because what better way to determine doom than by looking at the steepest dropoff in win probability, which is included in the data.\nGreat idea. Let’s do it.\nThe first thing to do is read the documentation. You’ll see that you can request data for each week. For example, here’s week 2, which is actually Nebraska’s third game (the week 0 game is lumped in with week 1).\n\nnebraska <- cfbd_pbp_data(\n 2021,\n  week=2, \n  season_type = \"regular\",\n  team = \"Nebraska\",\n  epa_wpa = TRUE,\n)\n\n• 13:47:30 | Start processing of 1 game...\n\n\nThere’s not an easy way to get all of a single team’s games. A way to do it that’s not very pretty but it works is like this:\n\nwk1 <- cfbd_pbp_data(2021, week=1, season_type = \"regular\", team = \"Nebraska\", epa_wpa = TRUE)\nSys.sleep(2)\nwk2 <- cfbd_pbp_data(2021, week=2, season_type = \"regular\", team = \"Nebraska\", epa_wpa = TRUE)\nSys.sleep(2)\nwk3 <- cfbd_pbp_data(2021, week=3, season_type = \"regular\", team = \"Nebraska\", epa_wpa = TRUE)\nSys.sleep(2)\nwk4 <- cfbd_pbp_data(2021, week=4, season_type = \"regular\", team = \"Nebraska\", epa_wpa = TRUE)\nSys.sleep(2)\nwk5 <- cfbd_pbp_data(2021, week=5, season_type = \"regular\", team = \"Nebraska\", epa_wpa = TRUE)\nSys.sleep(2)\nwk6 <- cfbd_pbp_data(2021, week=6, season_type = \"regular\", team = \"Nebraska\", epa_wpa = TRUE)\nSys.sleep(2)\nwk7 <- cfbd_pbp_data(2021, week=7, season_type = \"regular\", team = \"Nebraska\", epa_wpa = TRUE)\nSys.sleep(2)\nwk9 <- cfbd_pbp_data(2021, week=9, season_type = \"regular\", team = \"Nebraska\", epa_wpa = TRUE)\nSys.sleep(2)\nwk10 <- cfbd_pbp_data(2021, week=10, season_type = \"regular\", team = \"Nebraska\", epa_wpa = TRUE)\n\nnuplays <- bind_rows(wk1, wk2, wk3, wk4, wk5, wk6, wk7, wk9, wk10)\n\nThe sys.sleep bits just pauses for two seconds before running the next block. Since we’re requesting data from someone else’s computer, we want to be kind. Week 8 was a bye week for Nebraska, so if you request it, you’ll get an empty request and a warning. The bind_rows parts puts all the dataframes into a single dataframe.\nNow you’re ready to look at heartbreak. How do we define heartbreak? How about like this: you first have to lose the game, it comes in the third or fourth quarter, it involves a play (i.e. not a timeout), and it results in the biggest drop in win probability.\n\nnuplays %>% \n  filter(pos_team == \"Nebraska\" & def_pos_team != \"Fordham\" & def_pos_team != \"Buffalo\" & def_pos_team != \"Northwestern\" & play_type != \"Timeout\") %>% \n  filter(period == 3 | period == 4) %>% \n  mutate(HeartbreakLevel = wp_before - wp_after) %>% \n  arrange(desc(HeartbreakLevel)) %>% \n  top_n(5, wt=HeartbreakLevel) %>%\n  select(period, clock.minutes, def_pos_team, play_type, play_text)\n\n── play-by-play data from CollegeFootballData.com ──────────── cfbfastR 1.9.0 ──\n\n\nℹ Data updated: 2022-07-14 13:47:32 CDT\n\n\n# A tibble: 5 × 5\n  period clock.minutes def_pos_team   play_type                  play_text      \n   <int>         <int> <chr>          <chr>                      <chr>          \n1      4             1 Michigan       Fumble Recovery (Opponent) Adrian Martine…\n2      4             1 Michigan State Punt                       William Przyst…\n3      4            14 Michigan State Sack                       Adrian Martine…\n4      3            10 Purdue         Interception Return        Adrian Martine…\n5      4             3 Michigan State Punt Return Touchdown      Daniel Cerni p…\n\n\nThe most heartbreaking play of the season? A fourth quarter fumble against Michigan. Next up: Basically the entire fourth quarter against Michigan State."
  },
  {
    "objectID": "usingpackages.html#another-example",
    "href": "usingpackages.html#another-example",
    "title": "39  Using packages to get data",
    "section": "39.2 Another example",
    "text": "39.2 Another example\nThe wehoop package is mature enough to have a version on CRAN, so you can install it the usual way with install.packages(\"wehoop\"). Another helpful library to install is progressr with install.packages(\"progressr\")\n\nlibrary(wehoop)\n\nMany of these libraries have more than play-by-play data. For example, wehoop has box scores and player data for both the WNBA and college basketball. From personal experience, WNBA data isn’t hard to get, but women’s college basketball is a giant pain.\nSo, who is Nebraska’s single season points champion over the last five seasons?\n\nprogressr::with_progress({\n  wbb_player_box <- wehoop::load_wbb_player_box(2017:2021)\n})\n\nWith progressr, you’ll see a progress bar in the console, which lets you know that your command is still working, since some of these requests take minutes to complete. Player box scores is quicker – five seasons was a matter of seconds.\nIf you look at the wbb_player_box data we now have, we have each player in each game over each season – more than 300,000 records. Finding out who Nebraska’s top 10 single-season scoring leaders are is a matter of grouping, summing and filtering.\n\nwbb_player_box %>% \n  filter(team_short_display_name == \"Nebraska\") %>% \n  group_by(athlete_display_name, season) %>% \n  summarise(totalPoints = sum(as.numeric(pts))) %>% \n  arrange(desc(totalPoints)) %>%\n  ungroup() %>%\n  top_n(10, wt=totalPoints)\n\n# A tibble: 10 × 3\n   athlete_display_name season totalPoints\n   <chr>                 <int>       <dbl>\n 1 Jessica Shepard        2017         538\n 2 Sam Haiby              2021         438\n 3 Leigha Brown           2020         433\n 4 Hannah Whitish         2018         391\n 5 Kate Cain              2018         312\n 6 Isabelle Bourne        2021         300\n 7 Sam Haiby              2020         300\n 8 Hannah Whitish         2019         292\n 9 Sam Haiby              2019         285\n10 Maddie Simon           2018         282\n\n\nThis just in: Sam Haiby is good at basketball."
  }
]